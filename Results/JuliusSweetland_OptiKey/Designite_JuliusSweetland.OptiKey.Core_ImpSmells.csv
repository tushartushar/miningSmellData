Implementation smell,Namespace,Class,File,Method,Description
Long Method,JuliusSweetland.OptiKey.Extensions,FunctionKeysExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\FunctionKeysExtensions.cs,ToVirtualKeyCode,The method has 117 lines of code.
Long Method,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,KeyValues,The method has 133 lines of code.
Long Method,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The method has 120 lines of code.
Long Method,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The method has 228 lines of code.
Long Method,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateInputService,The method has 122 lines of code.
Long Method,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AttemptToStartMaryTTSService,The method has 104 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMicrosoftSpeechLibrary,The method has 113 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The method has 156 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The method has 137 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The method has 209 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The method has 107 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The method has 305 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The method has 141 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The method has 417 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,GenerateContent,The method has 413 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SetupInputServiceEventHandlers,The method has 140 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The method has 301 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The method has 1437 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepListCommands,The method has 127 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The method has 218 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,The method has 166 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,AddDynamicStepList,The method has 116 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The method has 113 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The method has 105 lines of code.
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,Cyclomatic complexity of the method is 31
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToCultureInfo,Cyclomatic complexity of the method is 31
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,Cyclomatic complexity of the method is 15
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToExtendedDescription,Cyclomatic complexity of the method is 15
Complex Method,JuliusSweetland.OptiKey.Extensions,FunctionKeysExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\FunctionKeysExtensions.cs,ToVirtualKeyCode,Cyclomatic complexity of the method is 55
Complex Method,JuliusSweetland.OptiKey.Extensions,KeyValueExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\KeyValueExtensions.cs,ReduceToSequentiallyDistinctLetters,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Models,SerializableDictionaryOfTimeSpanByKeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\SerializableDictionaryOfTimeSpanByKeyValues.cs,ReadXml,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateInputService,Cyclomatic complexity of the method is 14
Complex Method,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMicrosoftSpeechLibrary,Cyclomatic complexity of the method is 11
Complex Method,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,Cyclomatic complexity of the method is 10
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,Cyclomatic complexity of the method is 19
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,Cyclomatic complexity of the method is 14
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,Cyclomatic complexity of the method is 23
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,Cyclomatic complexity of the method is 17
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,Cyclomatic complexity of the method is 65
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessSingleKeyPress,Cyclomatic complexity of the method is 10
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,Cyclomatic complexity of the method is 24
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,PublishKeyPress,Cyclomatic complexity of the method is 13
Complex Method,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,Cyclomatic complexity of the method is 44
Complex Method,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,dec2hex,Cyclomatic complexity of the method is 10
Complex Method,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,GenerateContent,Cyclomatic complexity of the method is 100
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,Cyclomatic complexity of the method is 10
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,Cyclomatic complexity of the method is 51
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,Cyclomatic complexity of the method is 181
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepList,Cyclomatic complexity of the method is 11
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepListCommands,Cyclomatic complexity of the method is 19
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SetKeyboardFromEnum,Cyclomatic complexity of the method is 25
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,Cyclomatic complexity of the method is 12
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateKeyWithBasicProps,Cyclomatic complexity of the method is 16
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,Cyclomatic complexity of the method is 27
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItem,Cyclomatic complexity of the method is 14
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,AddDynamicStepList,Cyclomatic complexity of the method is 26
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,Cyclomatic complexity of the method is 20
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,Cyclomatic complexity of the method is 8
Long Parameter List,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The method has 13 parameters. Parameters: simulateKeyStrokes' getText' setText' getLastTextChange' setLastTextChange' getLastTextChangeWasSuggestion' setLastTextChangeWasSuggestion' getSuppressNextAutoSpace' setSuppressNextAutoSpace' getShiftStateSetAutomatically' setShiftStateSetAutomatically' getSuggestions' setSuggestions
Long Parameter List,JuliusSweetland.OptiKey.Models,KeyEnabledStates,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyEnabledStates.cs,KeyEnabledStates,The method has 5 parameters. Parameters: keyStateService' suggestionService' capturingStateManager' lastMouseActionStateManager' calibrationService
Long Parameter List,JuliusSweetland.OptiKey.Native,PInvoke,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Native\PInvoke.cs,GetTokenInformation,The method has 5 parameters. Parameters: TokenHandle' TokenInformationClass' TokenInformation' TokenInformationLength' ReturnLength
Long Parameter List,JuliusSweetland.OptiKey.Native,PInvoke,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Native\PInvoke.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateInputService,The method has 6 parameters. Parameters: keyStateService' dictionaryService' audioService' calibrationService' capturingStateManager' errorNotifyingServices
Long Parameter List,JuliusSweetland.OptiKey.Services,IWindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IWindowManipulationService.cs,OverridePersistedState,The method has 8 parameters. Parameters: inPersistNewState' inWindowState' inPosition' inDockSize' inWidth' inHeight' inHorizontalOffset' inVerticalOffset
Long Parameter List,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,KeyStateService,The method has 5 parameters. Parameters: suggestionService' capturingStateManager' lastMouseActionStateManager' calibrationService' fireKeySelectionEvent
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakNewOrInterruptCurrentSpeech,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,Speak,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMicrosoftSpeechLibrary,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,MapCaptureToEntries,The method has 6 parameters. Parameters: timestampedPointAndKeyValues' minCount' reliableFirstLetter' reliableLastLetter' cancellationTokenSource' exceptionHandler
Long Parameter List,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,ToCleansedUncleansedStrings,The method has 6 parameters. Parameters: charsWithCount' threshold' firstCharCleansed' firstCharUncleansed' lastCharCleansed' lastCharUncleansed
Long Parameter List,JuliusSweetland.OptiKey.Services,IAudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IAudioService.cs,SpeakNewOrInterruptCurrentSpeech,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,IDictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IDictionaryService.cs,MapCaptureToEntries,The method has 6 parameters. Parameters: timestampedPointAndKeyValues' minCount' reliableFirstLetter' reliableLastLetter' cancellationTokenSource' exceptionHandler
Long Parameter List,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,InputService,The method has 7 parameters. Parameters: keyStateService' dictionaryService' audioService' capturingStateManager' pointSource' keySelectionTriggerSource' pointSelectionTriggerSource
Long Parameter List,JuliusSweetland.OptiKey.Services,IrisbondDuoCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IrisbondDuoCalibrationService.cs,OnCalibrationResults,The method has 7 parameters. Parameters: leftPrecisionError' leftAccuracyError' rightPrecisionError' rightAccuracyError' combinedPrecisionError' combinedAccuracyError' cancelled
Long Parameter List,JuliusSweetland.OptiKey.Services,IrisbondDuoPointService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IrisbondDuoPointService.cs,OnData,The method has 18 parameters. Parameters: timestamp' pogX' pogY' pogRawX' pogRawY' screenWidth' screenHeight' detectedL' detectedR' resWidth' resHeight' leftEyeX' leftEyeY' leftEyeSize' rightEyeX' rightEyeY' rightEyeSize' distanceFactor
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,WindowManipulationService,The method has 20 parameters. Parameters: window' getPersistedState' getOpacity' getWindowState' getPreviousWindowState' getFloatingSizeAndPosition' getDockPosition' getDockSize' getFullDockThicknessAsPercentageOfScreen' getCollapsedDockThicknessAsPercentageOfFullDockThickness' getMinimisedPosition' savePersistedState' saveOpacity' saveWindowState' savePreviousWindowState' saveFloatingSizeAndPosition' saveDockPosition' saveDockSize' saveFullDockThicknessAsPercentageOfScreen' saveCollapsedDockThicknessAsPercentageOfFullDockThickness
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The method has 8 parameters. Parameters: inPersistNewState' inWindowState' inPosition' inDockSize' inWidth' inHeight' inHorizontalOffset' inVerticalOffset
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,AppBarPositionChangeCallback,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The method has 8 parameters. Parameters: direction' amountInPx' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating' windowState' floatingSizeAndPosition
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The method has 6 parameters. Parameters: direction' windowState' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating
Long Parameter List,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,KeyboardOutputService,The method has 5 parameters. Parameters: keyStateService' suggestionService' publishService' dictionaryService' fireKeySelectionEvent
Long Parameter List,JuliusSweetland.OptiKey.Observables.TriggerSources,KeyFixationSource,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Observables\TriggerSources\KeyFixationSource.cs,KeyFixationSource,The method has 6 parameters. Parameters: lockOnTime' resumeRequiresLockOn' defaultTimeToCompleteTrigger' timeToCompleteTriggerByKey' incompleteFixationTtl' pointSource
Long Parameter List,JuliusSweetland.OptiKey.Observables.TriggerSources,PointFixationSource,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Observables\TriggerSources\PointFixationSource.cs,PointFixationSource,The method has 5 parameters. Parameters: lockOnTime' timeToCompleteTrigger' lockOnRadius' fixationRadius' pointSource
Long Parameter List,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,DynamicKeyboard,The method has 16 parameters. Parameters: backAction' windowManipulationService' keyStateService' inputService' audioService' raiseToastNotification' link' overrideKeyStates' persistNewState' windowState' position' dockSize' width' height' horizontalOffset' verticalOffset
Long Parameter List,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,CalculateLookToScrollVelocity,The method has 5 parameters. Parameters: current' centre' deadzone' baseSpeed' acceleration
Long Parameter List,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,MainViewModel,The method has 12 parameters. Parameters: audioService' calibrationService' dictionaryService' keyStateService' suggestionService' capturingStateManager' lastMouseActionStateManager' inputService' keyboardOutputService' mouseOutputService' mainWindowManipulationService' errorNotifyingServices
Long Parameter List,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,PlaceKeyInPosition,The method has 5 parameters. Parameters: key' row' col' rowspan' colspan
Long Parameter List,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,AddKey,The method has 5 parameters. Parameters: key' row' col' rowspan' colspan
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The length of the parameter getLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The length of the parameter setLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyboardOutputServiceState.cs,,The length of the parameter setLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,XmlSuggestionCol,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionCol.xaml.cs,,The length of the parameter NumberOfSuggestionsDisplayedProperty is 36.
Long Identifier,JuliusSweetland.OptiKey.Models,XmlSuggestionCol,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionCol.xaml.cs,,The length of the parameter BackgroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,XmlSuggestionCol,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionCol.xaml.cs,,The length of the parameter DisabledBackgroundColourOverrideProperty is 40.
Long Identifier,JuliusSweetland.OptiKey.Models,XmlSuggestionRow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionRow.xaml.cs,,The length of the parameter NumberOfSuggestionsDisplayedProperty is 36.
Long Identifier,JuliusSweetland.OptiKey.Models,XmlSuggestionRow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionRow.xaml.cs,,The length of the parameter BackgroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,XmlSuggestionRow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionRow.xaml.cs,,The length of the parameter DisabledBackgroundColourOverrideProperty is 40.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningArabicLetterSuperscriptAlefKey is 39.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningArabicSmallHighLigatureSadWithLamWithAlefMaksuraKey is 60.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningCommaAboveOrSmoothBreathingKey is 39.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningCyrillicPsiliPneumataOrSmoothBreathingKey is 50.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningIotaSubscriptOrYpogegrammeniKey is 40.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningPalatalizedHookBelowKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningRetroflexHookBelowKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter CombiningReversedCommaAboveOrRoughBreathingKey is 46.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter ConversationCommuniKateKeyboardKey is 34.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter ConversationConfirmKeyboardKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter ConversationNumericAndSymbolsKeyboardKey is 40.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter MouseMoveAndLeftDoubleClickKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter MoveAndResizeAdjustmentAmountKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter MoveToBottomAndLeftBoundariesKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter MoveToBottomAndRightBoundariesKey is 33.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter MoveToTopAndRightBoundariesKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup1AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup2AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup3AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup4AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup5AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup6AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup7AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup8AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup9AllKey is 35.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup10AllKey is 36.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup1SubGroup1Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup1SubGroup2Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup1SubGroup3Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup2SubGroup1Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup2SubGroup2Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup2SubGroup3Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup3SubGroup1Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup3SubGroup2Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup3SubGroup3Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup4SubGroup1Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup4SubGroup2Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardAlphaGroup4SubGroup3Key is 41.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardNumericAllKey is 31.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardNumericGroup1Key is 34.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardNumericGroup2Key is 34.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardNumericGroup3Key is 34.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter SimplifiedKeyboardGermanUmlaut is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValues.cs,,The length of the parameter ToggleCaseOfPreviousCharacterKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,,The length of the parameter turnOnMultiKeySelectionWhenKeysWhichPreventTextCaptureAreReleased is 65.
Long Identifier,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,MapCaptureToEntries,The length of the parameter charsWithCountWithoutReliableFirstOrLast is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,,The length of the parameter mapToDictionaryMatchesCancellationTokenSource is 45.
Long Identifier,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,,The length of the parameter startMultiKeySelectionTriggerSignal is 35.
Long Identifier,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,,The length of the parameter stopMultiKeySelectionTriggerSignal is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter getFullDockThicknessAsPercentageOfScreen is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter getCollapsedDockThicknessAsPercentageOfFullDockThickness is 56.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter saveFullDockThicknessAsPercentageOfScreen is 41.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter saveCollapsedDockThicknessAsPercentageOfFullDockThickness is 57.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the parameter maxCollapsedDockHeightAdjustment is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the parameter maxCollapsedDockWidthAdjustment is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the parameter fullDockThicknessAsPercentageOfScreen is 37.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the parameter collapsedDockThicknessAsPercentageOfFullDockThickness is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The length of the parameter fullDockThicknessAsPercentageOfScreen is 37.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The length of the parameter collapsedDockThicknessAsPercentageOfFullDockThickness is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN is 47.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS is 65.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN is 42.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN is 43.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter getFullDockThicknessAsPercentageOfScreen is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter getCollapsedDockThicknessAsPercentageOfFullDockThickness is 56.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter saveFullDockThicknessAsPercentageOfScreen is 41.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,,The length of the parameter saveCollapsedDockThicknessAsPercentageOfFullDockThickness is 57.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter inProgressWordWithNewProcessedText is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter adjustedInProgressWordWithNewProcessedText is 42.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter adjustedAndComposedInProgressWordWithNewProcessedText is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,AdjustInProgressWord,The length of the parameter inProgressWordWithNewProcessedText is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,,The length of the parameter lastProcessedTextWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Observables.TriggerSources,KeyFixationSource,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Observables\TriggerSources\KeyFixationSource.cs,,The length of the parameter FunctionKeysWithIgnoredStringValue is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,CursorBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\CursorBehaviours.cs,BeginAnimationOnPointSelectionEventChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,CursorBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\CursorBehaviours.cs,,The length of the parameter BeginAnimationOnPointSelectionEventProperty is 43.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,KeyBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\KeyBehaviours.cs,BeginAnimationOnKeySelectionEventChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,KeyBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\KeyBehaviours.cs,,The length of the parameter BeginAnimationOnKeySelectionEventProperty is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,ScrollViewerBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\ScrollViewerBehaviours.cs,AutoScrollToEndOnPropertyOrCollectionChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,ScrollViewerBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\ScrollViewerBehaviours.cs,,The length of the parameter AutoScrollToEndOnPropertyOrCollectionChangedProperty is 52.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The length of the parameter screenCoordinatesIndexUpperBound is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,PropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Scratchpad,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Scratchpad.cs,,The length of the parameter BackgroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,OnLoaded,The length of the parameter keySelectionProgressSubscription is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,OnLoaded,The length of the parameter capturingMultiKeySelectionSubscription is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,TextChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter BackgroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter DisabledBackgroundColourOverrideProperty is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter KeyDownBackgroundOverrideProperty is 33.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter KeyDownOpacityOverrideProperty is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter DisabledBackgroundOpacityProperty is 33.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter ForegroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter DisabledForegroundColourOverrideProperty is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter HoverForegroundColourOverrideProperty is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter SelectionProgressColourOverrideProperty is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter SelectionForegroundColourOverrideProperty is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter UseUnicodeCompatibilityFontProperty is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter UsePersianCompatibilityFontProperty is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,,The length of the parameter UseUrduCompatibilityFontProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,,The length of the parameter currentKeyboardKeyValueSubscriptions is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Output,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Output.xaml.cs,,The length of the parameter NumberOfSuggestionsDisplayedProperty is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.TriggerActions,CalibrateWindowAction,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\TriggerActions\CalibrateWindowAction.cs,,The length of the parameter MainWindowManipulationServiceProperty is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the parameter notificationWithServicesAndState is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The length of the parameter conversationNumericAndSymbolsBackAction is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The length of the parameter simplifiedConversationAlphaBackAction is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationAlpha1 is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationAlpha2 is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationConfirm is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationNumericAndSymbols is 42.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the parameter conversationNumericAndSymbolsBackAction is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,AttachKeyboardSupportsCollapsedDockListener,The length of the parameter resizeDockIfCollapsedDockingNotSupported is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter choosingLookToScrollBoundsTarget is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter lookToScrollBoundsWhenActivated is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter windowLookToScrollBoundsTarget is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter lookToScrollLeftoverScrollAmount is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter pendingErrorToastNotificationContent is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter inputServicePointsPerSecondHandler is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter inputServiceCurrentPositionHandler is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter inputServiceLivePositionHandler is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter inputServiceSelectionProgressHandler is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,,The length of the parameter inputServiceSelectionResultHandler is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointsMousePositionSampleIntervalInMs is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerKeyboardKeyDownUpKey is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerMouseDownUpButton is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationLockOnTimeInMs is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationResumeRequiresLockOn is 47.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationDefaultCompleteTimeInMs is 50.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationCompleteTimesByIndividualKey is 55.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups is 59.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerIncompleteFixationTtlInMs is 44.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerKeyboardKeyDownUpKey is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerMouseDownUpButton is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerFixationLockOnTimeInMs is 43.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerFixationCompleteTimeInMs is 45.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerLockOnRadius is 33.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerFixationRadius is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter progressIndicatorResizeStartProportion is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter progressIndicatorResizeEndProportion is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter multiKeySelectionTriggerStopSignal is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter multiKeySelectionFixationMinDwellTimeInMs is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter multiKeySelectionMaxDurationInMs is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureStartSoundFile is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureStartSoundVolume is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureEndSoundFile is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureEndSoundVolume is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,FeaturesViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\FeaturesViewModel.cs,,The length of the parameter enableCommuniKateKeyboardLayout is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,FeaturesViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\FeaturesViewModel.cs,,The length of the parameter communiKateSpeakSelectedVolume is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter toastNotificationHorizontalFillPercentage is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter toastNotificationVerticalFillPercentage is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter toastNotificationSecondsPerCharacter is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter magnifySourcePercentageOfScreen is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter magnifyDestinationPercentageOfScreen is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter mainWindowFullDockThicknessAsPercentageOfScreen is 47.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter mainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness is 63.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter publishVirtualKeyCodesForCharacters is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter suppressModifierKeysForAllMouseActions is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter suppressModifierKeysWhenInMouseKeyboard is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter magnifySuppressedForScrollingActions is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollCentreMouseWhenActivated is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollBringWindowToFrontWhenActivated is 43.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollBringWindowToFrontAfterChoosingScreenPoint is 54.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollSuspendBeforeChoosingPointForMouse is 46.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollResumeAfterChoosingPointForMouse is 44.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollDeactivateUponSwitchingKeyboards is 44.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollOverlayBoundsColour is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollOverlayDeadzoneColour is 33.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollOverlayBoundsThickness is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollOverlayDeadzoneThickness is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollHorizontalDeadzone is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter lookToScrollAccelerationMedium is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter displayVoicesWhenChangingKeyboardLanguage is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter suppressAutoCapitaliseIntelligently is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter multiKeySelectionMaxDictionaryMatches is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.Windows,MainWindow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Windows\MainWindow.xaml.cs,,The length of the parameter managementWindowRequestCommand is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.Windows,MainWindow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Windows\MainWindow.xaml.cs,,The length of the parameter BackgroundColourOverrideProperty is 32.
Long Statement,JuliusSweetland.OptiKey.DataFilters,KalmanFilter,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\DataFilters\KalmanFilter.cs,Update,The length of the statement  "            EstimationConfidence = MeasurementNoise * (EstimationConfidence + ProcessNoise) / (MeasurementNoise + EstimationConfidence + ProcessNoise); " is 139.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "            return category == UnicodeCategory.NonSpacingMark //(All combining diacritic characters are non-spacing marks). Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn"(mark' nonspacing).The value is 5. " is 258.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "                || category == UnicodeCategory.SpacingCombiningMark //Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark' spacing combining). The value is 6. " is 265.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "                || category == UnicodeCategory.EnclosingMark; //Enclosing mark character' which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark' enclosing). The value is 7. " is 269.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,NormaliseAndRemoveRepeatingCharactersAndHandlePhrases,The length of the statement  "                    if (!suppressRepeatedCharacters || hashStringBuilder.Length == 0 || hashStringBuilder[hashStringBuilder.Length - 1] != c) " is 121.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "                    case UnicodeCategory.NonSpacingMark: //(All combining diacritic characters are non-spacing marks). Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn"(mark' nonspacing).The value is 5. " is 245.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "                    case UnicodeCategory.SpacingCombiningMark: //Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark' spacing combining). The value is 6. " is 256.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "                    case UnicodeCategory.EnclosingMark: //Enclosing mark character' which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark' enclosing). The value is 7. " is 259.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The length of the statement  "                "CountBackToLastCharCategoryBoundary called with '{0}' - boundary calculated as {1} characters from end."' input' count); " is 121.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,InProgressWord,The length of the statement  "                && !char.IsWhiteSpace(input[cursorIndex-1])) //Character before cursor position is not whitespace' i.e. at least 1 letter of the word is before the cursor position " is 163.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\ObservableExtensions.cs,PublishLivePointsOnly,The length of the statement  "                .StartWith(new Timestamped<Point?>(null' DateTimeOffset.Now.ToUniversalTime())); //Prefix the sequence with an initial value of NULL " is 132.
Long Statement,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyboardOutputServiceState.cs,RestoreState,The length of the statement  "            Log.InfoFormat("Restoring KeyboardOutputService state for SimulateKeyStrokes={0}. Text:'{1}'' LastTextChange:'{2}'' LastTextChangeWasSuggestion:'{3}'' SuppressNextAutoSpace:'{4}'' ShiftStateSetAutomatically:'{5}'' Suggestions:'{6}'"' " is 233.
Long Statement,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyboardOutputServiceState.cs,RestoreState,The length of the statement  "                simulateKeyStrokes' text' lastTextChange' lastTextChangeWasSuggestion' suppressNextAutoSpace' shiftStateSetAutomatically' suggestions.ToString("(null)")); " is 154.
Long Statement,JuliusSweetland.OptiKey.Models,KeyValueConverter,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValueConverter.cs,ConvertFrom,The length of the statement  "                Log.Warn("Unable to convert from string (to KeyValue) as value was null. This can occur if a selection begins before the keyboard is fully initialised."); " is 154.
Long Statement,JuliusSweetland.OptiKey.Models,KeyValueConverter,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValueConverter.cs,ConvertTo,The length of the statement  "                Log.Warn("Unable to convert to string (from KeyValue) as value was null. This can occur if a selection begins before the keyboard is fully initialised."); " is 154.
Long Statement,JuliusSweetland.OptiKey.Models,XmlSuggestionCol,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionCol.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/models/xmlkeyboardmodels/xmlsuggestioncol.xaml"' System.UriKind.Relative); " is 138.
Long Statement,JuliusSweetland.OptiKey.Models,XmlSuggestionRow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionRow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/models/xmlkeyboardmodels/xmlsuggestionrow.xaml"' System.UriKind.Relative); " is 138.
Long Statement,JuliusSweetland.OptiKey.Models,XmlScratchpad,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlScratchpad.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/models/xmlkeyboardmodels/xmlscratchpad.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.Models,KeyEnabledStates,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyEnabledStates.cs,SuggestionKeyIsValid,The length of the statement  "                && suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage * suggestionService.SuggestionsPerPage + index); " is 124.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    presageStartMenuFolder = Registry.GetValue("HKEY_CURRENT_USER\\Software\\Presage"' "Start Menu Folder"' string.Empty).ToString(); " is 129.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                Log.InfoFormat("Presage path: {0} | Presage start menu folder: {1} | OS bitness: {2}"' presagePath' presageStartMenuFolder' osBitness); " is 135.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (path(s) missing). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 178.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (valid version not detected). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 189.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (incorrect bitness? Install location is suspect). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 209.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (install directory does not exist). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 195.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                //2.Attempt to construct a Presage object' which can fail for a few reasons' including BadImageFormatExceptions (64-bit version installed) " is 138.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Presage failed to bootstrap - attempting to suppress finalisation. The suggestion method has been changed to NGram"' ex); " is 132.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                    presageTestInstance.set_config("Presage.Predictors.DefaultSmoothedNgramPredictor.DBFILENAME"' Path.GetFullPath(Settings.Default.PresageDatabaseLocation)); " is 154.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                        presageTestInstance.set_config("Presage.Predictors.DefaultSmoothedNgramPredictor.DBFILENAME"' Path.GetFullPath(Settings.Default.PresageDatabaseLocation)); " is 154.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The length of the statement  "                        Log.Error("Presage failed to bootstrap. The database (database.db file) was not found' and the database.zip file could not be extracted!"' ex); " is 143.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowPreviousState from settings with value '{0}'"' Settings.Default.MainWindowPreviousState); " is 124.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                            Log.DebugFormat("Getting MainWindowFloatingSizeAndPosition from settings with value '{0}'"' Settings.Default.MainWindowFloatingSizeAndPosition); " is 144.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                            Log.DebugFormat("Getting MainWindowDockPosition from settings with value '{0}'"' Settings.Default.MainWindowDockPosition); " is 122.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                            Log.DebugFormat("Getting MainWindowFullDockThicknessAsPercentageOfScreen from settings with value '{0}'"' Settings.Default.MainWindowFullDockThicknessAsPercentageOfScreen); " is 172.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                            Log.DebugFormat("Getting MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness from settings with value '{0}'"' Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness); " is 204.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowMinimisedPosition from settings with value '{0}'"' Settings.Default.MainWindowMinimisedPosition); " is 132.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateMainWindowManipulationService,The length of the statement  "                            Log.DebugFormat("Storing MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness to settings with value '{0}'"' t); " is 123.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AttachUnhandledExceptionHandlers,The length of the statement  "            Current.DispatcherUnhandledException += (sender' args) => Log.Error("A DispatcherUnhandledException has been encountered..."' args.Exception); " is 142.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AttachUnhandledExceptionHandlers,The length of the statement  "            AppDomain.CurrentDomain.UnhandledException += (sender' args) => Log.Error("An UnhandledException has been encountered..."' args.ExceptionObject as Exception); " is 158.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AttachUnhandledExceptionHandlers,The length of the statement  "            TaskScheduler.UnobservedTaskException += (sender' args) => Log.Error("An UnobservedTaskException has been encountered..."' args.Exception); " is 139.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateInputService,The length of the statement  "                    throw new ArgumentException("'PointsSource' settings is missing or not recognised! Please correct and restart OptiKey."); " is 121.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The length of the statement  "                message.AppendLine(string.Format(OptiKey.Properties.Resources.KEYBOARD_AND_DICTIONARY_LANGUAGE_DESCRIPTION' Settings.Default.KeyboardAndDictionaryLanguage.ToDescription())); " is 173.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The length of the statement  "                message.AppendLine(string.Format(OptiKey.Properties.Resources.UI_LANGUAGE_DESCRIPTION' Settings.Default.UiLanguage.ToDescription())); " is 133.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The length of the statement  "                message.AppendLine(string.Format(OptiKey.Properties.Resources.POINTING_SOURCE_DESCRIPTION' Settings.Default.PointsSource.ToDescription())); " is 139.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The length of the statement  "                        keySelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds)); " is 166.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The length of the statement  "                        pointSelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds)); " is 163.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CheckForUpdates,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,GetDefaultUserKeyboardFolder,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' applicationDataSubPath); " is 133.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,GetDefaultUserKeyboardFolder,The length of the statement  "            // If directory doesn't exist' assume that this is the first run. So' move dynamic keyboards from installation package to target path " is 133.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,GetDefaultUserKeyboardFolder,The length of the statement  "                foreach (string dynamicKeyboard in Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory + @"\Resources\DynamicKeyboards")) " is 126.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,GetDefaultPluginsFolder,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' applicationDataSubPath); " is 133.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,GetDefaultPluginsFolder,The length of the statement  "            // If directory doesn't exist' assume that this is the first run. So' move plugins from installation package to target path " is 123.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AttemptToStartMaryTTSService,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AttemptToStartMaryTTSService,The length of the statement  "                        "Disabling MaryTTS and using System Voice '{1}' instead."' ExpectedMaryTTSLocationSuffix' Settings.Default.SpeechVoice); " is 120.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AlertIfPresageBitnessOrBootstrapOrVersionFailure,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,AlertIfPresageBitnessOrBootstrapOrVersionFailure,The length of the statement  "                Log.Error("Invalid Presage installation' or problem starting Presage. Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 180.
Long Statement,JuliusSweetland.OptiKey.Services.PluginEngine,PluginEngine,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\PluginEngine\PluginEngine.cs,ValidateAndCreatePlugins,The length of the statement  "                    Plugins pluginMetadata = (Plugins)serializer.Deserialize(new StringReader(new StreamReader(dll.GetManifestResourceStream(metadataResName)).ReadToEnd())); " is 153.
Long Statement,JuliusSweetland.OptiKey.Services.Suggestions,PresageSuggestions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\Suggestions\PresageSuggestions.cs,GetSuggestions,The length of the statement  "                Log.Error("PresageException caught. Rethrowing. This is an attempt to see why the PresageException is not being caught. PresageException:"' pe); " is 144.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,The length of the statement  "                    Log.Info("No stored KeyStateService state to restore for SimulateKeyStrokes=true. Defaulting Multi-Key Selection key state."); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,The length of the statement  "                    Log.Info("No stored KeyStateService state to restore for SimulateKeyStrokes=false.  Defaulting Multi-Key Selection key state & releasing all publish only keys."); " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,AddKeyDownStatesChangeHandlers,The length of the statement  "                Settings.Default.MouseMagnifierLockedDown = KeyDownStates[KeyValues.MouseMagnifierKey].Value == Enums.KeyDownStates.LockedDown); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyStateService.cs,CalculateMultiKeySelectionSupported,The length of the statement  "                //Automatically turn multi-key capture back on again when appropriate if it is currently locked down (if it is just down then let it go) " is 136.
Long Statement,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,Speak,The length of the statement  "            Log.InfoFormat("Speaking '{0}' with volume '{1}'' rate '{2}' and voice '{3}' and delay {4}ms"' textToSpeak' volume' rate'  " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,LoadDictionary,The length of the statement  "            Log.InfoFormat("LoadDictionary called. Keyboard language setting is '{0}'."' Settings.Default.KeyboardAndDictionaryLanguage); " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,LoadDictionaryFromLanguageFile,The length of the statement  "             var originalDictionaryPath = Path.GetFullPath(string.Format(@"{0}{1}{2}"' OriginalDictionariesSubPath' Settings.Default.KeyboardAndDictionaryLanguage' DictionaryFileType)); " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,GetUserDictionaryPath,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' ApplicationDataSubPath); " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,ExistsInDictionary,The length of the statement  "                    .Any(dictionaryEntry => !string.IsNullOrWhiteSpace(dictionaryEntry) && dictionaryEntry.Trim().Equals(entryToFind.Trim())); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,AddEntryToDictionary,The length of the statement  "                        Log.DebugFormat("Adding new (not loaded from dictionary file) entry '{0}' to in-memory dictionary with hash '{1}'"' entry' hash); " is 129.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "            Log.DebugFormat("PerformIncrementOrDecrementOfEntryUsageCount called with entry '{0}' and isIncrement={1}"' text' isIncrement); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "                                Log.Warn(string.Format("An attempt was made to decrement the usage count of entry '{0}'' but the usage count was zero so no action was taken."' match.Entry)); " is 158.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "                    if (index == charsWithCount.Count - 1 && reliableLastCharCleansed != null && cwc.Item1 == reliableLastCharCleansed.Value) " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "                    ? Math.Max((int)Math.Floor(charsWithCountWithoutReliableFirstOrLast.Average(cwc => cwc.Item3))' minCount) //Coerce threshold up to minimum count from settings " is 158.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                            && (keyStateService.KeyEnabledStates == null || keyStateService.KeyEnabledStates[triggerSignal.PointAndKeyValue.KeyValue])) " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                                && keyStateService.KeyEnabledStates[KeyValues.MultiKeySelectionIsOnKey] //It is possible for MultiKeySelectionIsOnKey to be down/locked down even though it is disabled - check for this " is 184.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                                && !KeyValues.CombiningKeys.Any(key => keyStateService.KeyDownStates[key].Value.IsDownOrLockedDown())) //Do not start if any combining ("dead") keys are down " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                                Log.Debug("Multi-key selection is currently enabled and the key on which the trigger occurred is a letter. Publishing the selection and beginning a new multi-key selection capture."); " is 183.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "                    //Why am I wrapping this call in a Task.Run? Internally the MapCaptureToEntries method uses PLINQ which also blocks the UI thread - this frees it up. " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "                    //This cannot be done inside the MapCaptureToEntries method as the method takes a ref param' which cannot be used inside an anonymous delegate or lambda. " is 153.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,PublishCurrentPosition,The length of the statement  "                Log.DebugFormat("Publishing CurrentPosition event with Point:{0} KeyValue:{1}"' currentPosition.Item1' currentPosition.Item2); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,PublishSelectionResult,The length of the statement  "                Log.DebugFormat("Publishing Selection Result event with {0} point(s)' FunctionKey:'{1}'' String:'{2}'' Best match '{3}'' Suggestion count:{4}"' " is 143.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndLeftClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and left clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndLeftDoubleClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and double left clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 132.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndMiddleClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and middle clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndRightClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and right clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndScrollWheelUp,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling up by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 146.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndScrollWheelDown,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling down by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 148.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndScrollWheelLeft,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling left by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 148.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MouseOutputService.cs,MoveAndScrollWheelRight,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling right by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,MyGazePointService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MyGazePointService.cs,EventCallback,The length of the statement  "                    new DateTimeOffset(DateTime.UtcNow).ToUniversalTime())); //Event data does not include a useable timestamp as it would be meaningless " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,IrisbondDuoCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IrisbondDuoCalibrationService.cs,Calibrate,The length of the statement  "            taskCompletionSource = new TaskCompletionSource<string>(); //Used to make this method awaitable on the InteractionRequest callback " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,TobiiEyeXCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\TobiiEyeXCalibrationService.cs,Calibrate,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<string>(); //Used to make this method awaitable on the InteractionRequest callback " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var yAdjustmentToBottom = distanceToBottomBoundary < 0 ? distanceToBottomBoundary : (amountInPx / Graphics.DipScalingFactorY).CoerceToUpperLimit(distanceToBottomBoundary); " is 171.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var yAdjustmentToTop = distanceToTopBoundary < 0 ? distanceToTopBoundary : (amountInPx / Graphics.DipScalingFactorY).CoerceToUpperLimit(distanceToTopBoundary); " is 159.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var xAdjustmentToLeft = distanceToLeftBoundary < 0 ? distanceToLeftBoundary : (amountInPx / Graphics.DipScalingFactorX).CoerceToUpperLimit(distanceToLeftBoundary); " is 163.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var xAdjustmentToRight = distanceToRightBoundary < 0 ? distanceToRightBoundary : (amountInPx / Graphics.DipScalingFactorX).CoerceToUpperLimit(distanceToRightBoundary); " is 167.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            var distanceToBottomBoundaryIfFloating = screenBoundsInDp.Bottom - (floatingSizeAndPosition.Top + floatingSizeAndPosition.Height); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            var distanceToRightBoundaryIfFloating = screenBoundsInDp.Right - (floatingSizeAndPosition.Left + floatingSizeAndPosition.Width); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "            Log.InfoFormat("OverridePersistedState called with PersistNewState {0}' WindowState {1}' Position {2}' Width {3}' Height {4}' horizontalOffset {5}' verticalOffset {6}"' inPersistNewState' inWindowState' inPosition' inWidth' inHeight' inHorizontalOffset' inVerticalOffset); " is 272.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "            var newWidth = string.IsNullOrWhiteSpace(inWidth) || !double.TryParse(inWidth.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999 " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "            var newHeight = string.IsNullOrWhiteSpace(inHeight) || !double.TryParse(inHeight.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999 " is 160.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "            var horizontalOffset = string.IsNullOrWhiteSpace(inHorizontalOffset) || !double.TryParse(inHorizontalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999 " is 187.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "            var verticalOffset = string.IsNullOrWhiteSpace(inVerticalOffset) || !double.TryParse(inVerticalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999 " is 181.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "                    saveCollapsedDockThicknessAsPercentageOfFullDockThickness(100 * newFullDockThicknessPercent / getFullDockThicknessAsPercentageOfScreen()); " is 138.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "                    newTop = (newMovePosition == MoveToDirections.Top || newMovePosition == MoveToDirections.TopLeft || newMovePosition == MoveToDirections.TopRight) " is 145.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "                        : (newMovePosition == MoveToDirections.Bottom || newMovePosition == MoveToDirections.BottomLeft || newMovePosition == MoveToDirections.BottomRight) " is 147.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "                    newLeft = (newMovePosition == MoveToDirections.Left || newMovePosition == MoveToDirections.TopLeft || newMovePosition == MoveToDirections.BottomLeft) " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The length of the statement  "                        : (newMovePosition == MoveToDirections.Right || newMovePosition == MoveToDirections.TopRight || newMovePosition == MoveToDirections.BottomRight) " is 144.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,ResizeDockToCollapsed,The length of the statement  "            SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx); //PersistSizeAndPosition() is called indirectly by SetAppBarSizeAndPosition - no need to call explicitly " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,ResizeDockToFull,The length of the statement  "            SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx); //PersistSizeAndPosition() is called indirectly by SetAppBarSizeAndPosition - no need to call explicitly " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Restore,The length of the statement  "            if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) return; " is 129.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height); " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width); " is 131.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height)); " is 228.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width)); " is 225.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) " is 140.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100); " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 178.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) " is 131.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100); " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) " is 137.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100); " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,ApplyAndPersistSizeAndPosition,The length of the statement  "            Log.InfoFormat("ApplyAndPersistSizeAndPosition called with rect.Top:{0}' rect.Bottom:{1}' rect.Left:{2}' rect.Right:{3}"' " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,ApplySizeAndPosition,The length of the statement  "            //Previously 4 commands were required to set the 4 values and had the undesirable behavior of triggerring a repaint after each of the 4 commands " is 144.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The length of the statement  "            var thicknessAsPercentage = (getFullDockThicknessAsPercentageOfScreen() * getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000; //Percentage of a percentage " is 171.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                    Log.WarnFormat("Saved full docked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness(); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                    Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness); " is 146.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                    Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' " is 151.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                        floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height); " is 185.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            Log.InfoFormat("Move called with direction:{0}' amountInPx:{1}' distanceToTopBoundaryIfFloating:{2}' distanceToBottomBoundaryIfFloating:{3}' distanceToLeftBoundaryIfFloating:{4}' distanceToRightBoundaryIfFloating: {5}' windowState:{6}' floatingSizeAndPosition.Top:{7}' floatingSizeAndPosition.Bottom:{8}' floatingSizeAndPosition.Left:{9}' floatingSizeAndPosition.Right:{10}"' " is 375.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "                direction' amountInPx' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating' windowState' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right); " is 296.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            var yAdjustmentToBottom = distanceToBottomBoundaryIfFloating < 0 ? distanceToBottomBoundaryIfFloating : yAdjustmentAmount.CoerceToUpperLimit(distanceToBottomBoundaryIfFloating); " is 177.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            var yAdjustmentToTop = distanceToTopBoundaryIfFloating < 0 ? distanceToTopBoundaryIfFloating : yAdjustmentAmount.CoerceToUpperLimit(distanceToTopBoundaryIfFloating); " is 165.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            var xAdjustmentToLeft = distanceToLeftBoundaryIfFloating < 0 ? distanceToLeftBoundaryIfFloating : xAdjustmentAmount.CoerceToUpperLimit(distanceToLeftBoundaryIfFloating); " is 169.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The length of the statement  "            var xAdjustmentToRight = distanceToRightBoundaryIfFloating < 0 ? distanceToRightBoundaryIfFloating : xAdjustmentAmount.CoerceToUpperLimit(distanceToRightBoundaryIfFloating); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The length of the statement  "            Log.InfoFormat("MoveToEdge called with direction:{0}' windowState:{1}' distanceToTopBoundaryIfFloating:{2}' distanceToBottomBoundaryIfFloating:{3}' distanceToLeftBoundaryIfFloating:{4}' distanceToRightBoundaryIfFloating: {5}"' " is 226.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The length of the statement  "                direction' windowState' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating); " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("SetAppBarSizeAndPosition called with dockPosition:{0}' sizeAndPosition.Top:{1}' sizeAndPosition.Bottom:{2}' sizeAndPosition.Left:{3}' sizeAndPosition.Right:{4}"' " is 177.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("Screen bounds in px - Top:{0}' Left:{1}' Width:{2}' Height:{3}"' screenBoundsInPx.Top' screenBoundsInPx.Left' screenBoundsInPx.Width' screenBoundsInPx.Height); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("QueryPos returned barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("Rect values adjusted (to compensate for other app bars) to barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' " is 161.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("finalDockLeftInDp:{0}' finalDockTopInDp:{1}' finalDockWidthInDp:{2}' finalDockHeightInDp:{3}"' finalDockLeftInDp' finalDockTopInDp' finalDockWidthInDp' finalDockHeightInDp); " is 189.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("Screen bounds in dp - Top:{0}' Left:{1}' Width:{2}' Height:{3}"' screenBoundsInDp.Top' screenBoundsInDp.Left' screenBoundsInDp.Width' screenBoundsInDp.Height); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "                Log.WarnFormat("Unable to set inappropriate window size - height:{0}' width:{1}; Width and height must all be positive values."' finalDockHeightInDp' finalDockWidthInDp); " is 170.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            //as WPF will send a resize after a new appbar is added. We need to apply the received size & position after this happens. " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                    Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                    //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)' plus the last decomposed character (so the last character is decomposed and the prefix of the word is recombined if possible) " is 238.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                    var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove); " is 143.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                            dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word " is 155.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                            dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                            //Add back the decomposed in-progress word' with the last character (potentially) cased differently (lower->upper or vice versa)' composed again (to recombine if possible) " is 171.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                Log.DebugFormat("Last character of in-progress word has had its case toggled. It will be converted from '{0}' to '{1}'."' finalCharacter' reCasedFinalCharacter); " is 161.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                            var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1)' reCasedFinalCharacter).Compose(); " is 147.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessSingleKeyText,The length of the statement  "            //If the setting to type diacritics after letters is set to true then we want to apply the diacritic as soon as it is typed. " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                Log.DebugFormat("Suppressing auto space before this capture as the KeyboardAndDictionaryLanguage {0} does not support auto space."' Settings.Default.KeyboardAndDictionaryLanguage); " is 180.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                     && !(keyStateService.KeyDownStates[KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown() && char.IsLetter(newText.First()))) " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                //and the current capture is not a multi-key selection of a single letter (as we also want to inject the space for this scenario). " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                Log.Debug("Suppressing auto space before this capture as the user appears to be typing one char at a time. Also the last text change was not a suggestion' and the current capture is not a single letter captured with multi-key selection enabled."); " is 247.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                Log.Debug("Suppressing auto space before this capture as it follows a single character which is not a letter' or a closing or mid-sentence punctuation mark."); " is 159.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        Log.DebugFormat("In-progress word (including new text) can be combined/composed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWordWithNewProcessedText' adjustedAndComposedInProgressWordWithNewProcessedText); " is 237.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        //Remove changed in-progress word suffix string from external applications by outputting backspaces - the new suffix will be published seperately " is 145.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        for (var backCount = 0; backCount < countOfCharactersToRemove; backCount++) //Don't include newTextProcessed as it does not exist on Text yet " is 141.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        newTextModified = adjustedAndComposedInProgressWordWithNewProcessedText.Substring(commonRootLength' adjustedAndComposedInProgressWordWithNewProcessedText.Length - commonRootLength); " is 181.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,AdjustInProgressWord,The length of the statement  "                            || (result.Length > index + 1 && result[index + 1].UnicodeCodePointRange() != UnicodeCodePointRanges.HangulVowel))) //Or next char exists and it is NOT a Hangul vowel " is 166.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,SimulateKeyStrokesHasChanged,The length of the statement  "                Log.InfoFormat("No stored KeyboardOutputService state to restore for SimulateKeyStrokes={0} - defaulting state."' newStateKey); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,GenerateSuggestions,The length of the statement  "                            suggestionChars[index] = char.ToUpper(suggestion[index]' Settings.Default.KeyboardAndDictionaryLanguage.ToCultureInfo()); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,PublishKeyPress,The length of the statement  "                    Log.InfoFormat("Publishing '{0}' => as virtual key code {1}(0x{1:X}){2}{3}{4} (using VkKeyScanEx with keyboard layout:{5})"' " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,SwapLastTextChangeForSuggestion,The length of the statement  "                    if (!Settings.Default.SuggestNextWords || !lastProcessedTextWasSuggestion && !string.IsNullOrEmpty(inProgressWord) && Char.IsLetterOrDigit(inProgressWord.Last())) " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ApplyModifierKeys,The length of the statement  "                Log.DebugFormat("A key which prevents text capture is down - modifying '{0}' to null."' textToModify.ToPrintableString()); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,PublishService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\PublishService.cs,ScrollMouseWheelAbsoluteHorizontal,The length of the statement  "                inputSimulator.Mouse.HorizontalScroll(1); //Scroll by one click' which is the absolute amount temporarily set in MouseWheelClickSize " is 132.
Long Statement,JuliusSweetland.OptiKey.Services,PublishService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\PublishService.cs,ScrollMouseWheelAbsoluteVertical,The length of the statement  "                inputSimulator.Mouse.VerticalScroll(1); //Scroll by one click' which is the absolute amount temporarily set in MouseWheelClickSize " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\TheEyeTribeCalibrationService.cs,Calibrate,The length of the statement  "                calRunner.Owner = parentWindow; //Setting the owner preserves the z-order of the parent and child windows if the focus is shifted away from the child window (otherwise the child popup will be hidden) " is 199.
Long Statement,JuliusSweetland.OptiKey.Static,Sound,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Static\Sound.cs,GetSoundLength,The length of the statement  "                    length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0))); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the statement  "                    textBox.OnPropertyChanges<double>(FrameworkElement.ActualWidthProperty).Subscribe(_ => PositionCaret(textBox' caretElement))' " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the statement  "                    textBox.OnPropertyChanges<double>(FrameworkElement.ActualHeightProperty).Subscribe(_ => PositionCaret(textBox' caretElement)) " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the statement  "                                    Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' CurrentButton.background_color); " is 136.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the statement  "                                    Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' CurrentButton.background_color' BlankButtonCount - 1); " is 170.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the statement  "                                    if (!string.IsNullOrEmpty(imageData.path)) { image = CKpath() + imageData.path.Replace("..\\"' "").Replace("../"' ""); } " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the statement  "                                    if (!string.IsNullOrEmpty(soundData.path)) { sound = CKpath() + soundData.path.Replace("..\\"' "").Replace("../"' ""); } " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKpath,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' ApplicationDataSubPath); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,dec2hex,The length of the statement  "                    Log.DebugFormat("Background colour: {3} {0}' {1}' {2} )."' deccolours.ElementAt(0)' deccolours.ElementAt(1)' deccolours.ElementAt(2)' dec.Substring(0' left)); " is 158.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,dec2hex,The length of the statement  "                    Log.DebugFormat("Background colour: {4} {0}' {1}' {2}' {3} )."' deccolours.ElementAt(0)' deccolours.ElementAt(1)' deccolours.ElementAt(2)' deccolours.ElementAt(3)' dec.Substring(0' left)); " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenTopLeftInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Left' screen.Bounds.Top)); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenBottomRightInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Right' screen.Bounds.Bottom)); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenTopLeftInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Left' screen.Bounds.Top)); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenBottomRightInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Right' screen.Bounds.Bottom)); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CursorPopup.cs,OnLoaded,The length of the statement  "                .Where(cpp => IsOpen && SelectionProgress == 0) //Only set Point if popup is open and there isn't a current fixation in progress " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "                var dpiPoint = this.GetTransformFromDevice().Transform(pointCopy); //Offsets are in device independent pixels (DIP)' but the incoming Point is in pixels " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "                if(dpiPoint.X + Width > screenBottomRightInWpfCoords.X) //Width is set explicitly on the Popup from the Setting value. Cannot use ActualWidth as it will be 0 (Popup itself is not part of the visual tree) " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "                if (dpiPoint.Y + Height > screenBottomRightInWpfCoords.Y) //Width is set explicitly on the Popup from the Setting value. Cannot use ActualWidth as it will be 0 (Popup itself is not part of the visual tree) " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "                            SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes) " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "                            //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "            var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360; " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "                var range = (Settings.Default.ProgressIndicatorResizeStartProportion - Settings.Default.ProgressIndicatorResizeEndProportion) / 100d; " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "                var range = (Settings.Default.ProgressIndicatorResizeEndProportion - Settings.Default.ProgressIndicatorResizeStartProportion) / 100d; " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,OnLoaded,The length of the statement  "            //Display shift down text (upper case text) if shift is locked down' or down (but NOT when we are capturing a multi key selection) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,OnLoaded,The length of the statement  "            calculateDisplayShiftDownText(keyStateService.KeyDownStates[KeyValues.LeftShiftKey].Value' capturingStateManager.CapturingMultiKeySelection); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\TextBlockScaler.cs,AttachTextBlockHandlers,The length of the statement  "                var textBlockException = new XamlException("TextBlockScaler cannot find a TextBlock in its collection of child elements"); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\TextBlockScaler.cs,AttachTextBlockHandlers,The length of the statement  "            if (textBlock.IsLoaded) //Loaded event is fired from the root down; we may be here before the child TextBlock has loaded' so check " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\TextBlockScaler.cs,IsTextTrimmedAtThisFontSize,The length of the statement  "                MaxTextWidth = ActualWidth' //Limit the max width to the current width of this TextBlockScaler to produce wrapping behaviour " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\TextBlockScaler.cs,IsTextTrimmedAtThisFontSize,The length of the statement  "            return formattedText.Height > ActualHeight; //If the formatted text needs more height than we are providing then it would be trimmed " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowMoves,The length of the statement  "                    Log.Info($"Window's LocationChanged event detected. New window left:{window?.Left}' right:{(window?.Left ?? 0) + (window?.Width ?? 0)}' top:{window?.Top}' bottom:{(window?.Top ?? 0) + (window?.Height ?? 0)}."); " is 210.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The length of the statement  "                    && !(double.TryParse(horizontalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)) " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The length of the statement  "            windowManipulationService.OverridePersistedState(persistNewState' windowState' position' dockSize' width' height' horizontalOffset' verticalOffset); " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,CalibrateWindowAction,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\TriggerActions\CalibrateWindowAction.cs,Invoke,The length of the statement  "                Log.Error("CalibrateWindowAction was invoked' but the CalibrationService (dependency property) is not set. Calibration is not possible."); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "                            parentWindow; //Setting the owner preserves the z-order of the parent and child windows when the focus is shifted back to the parent (otherwise the child popup will be hidden) " is 175.
Long Statement,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateBackgroundColourToForegroundBrush,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateBackgroundColourToForegroundBrush.cs,Convert,The length of the statement  "            //return new SolidColorBrush(Color.FromRgb((byte)(0xFF - Background.R)' (byte)(0xFF - Background.G)' (byte)(0xFF - Background.B))); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ValueConverters,BitmapImageCheck,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\IsValidImage.cs,recalculateExtensions,The length of the statement  "            nativeExtensions = new string[] { ".BMP"' ".GIF"' ".ICO"' ".JPEG"' ".PNG"' ".TIFF"' ".DDS"' ".JPG"' ".JXR"' ".HDP"' ".WDP" }; " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,FindLargestGapBetweenScreenAndMainWindow,The length of the statement  "            var above = new Rect { X = screen.Left' Y = screen.Top' Width = screen.Width' Height = window.Top >= screen.Top ? window.Top - screen.Top : 0 }; " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,FindLargestGapBetweenScreenAndMainWindow,The length of the statement  "            var below = new Rect { X = screen.Left' Y = window.Bottom' Width = screen.Width' Height = screen.Bottom >= window.Bottom ? screen.Bottom - window.Bottom : 0 }; " is 159.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,FindLargestGapBetweenScreenAndMainWindow,The length of the statement  "            var left = new Rect { X = screen.Left' Y = screen.Top' Width = window.Left >= screen.Left ? window.Left - screen.Left : 0' Height = screen.Height }; " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,FindLargestGapBetweenScreenAndMainWindow,The length of the statement  "            var right = new Rect { X = window.Right' Y = screen.Top' Width = screen.Right >= window.Right ? screen.Right - window.Right : 0' Height = screen.Height }; " is 154.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,GetWindowBounds,The length of the statement  "            if (PInvoke.DwmGetWindowAttribute(hWnd' DWMWINDOWATTRIBUTE.ExtendedFrameBounds' out rawRect' Marshal.SizeOf<RECT>()) != 0) " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SetupInputServiceEventHandlers,The length of the statement  "                    if (SelectionMode == SelectionModes.Key && (singleKeyValue != null || (multiKeySelection != null && multiKeySelection.Any()))) " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SetupInputServiceEventHandlers,The length of the statement  "                        if (singleKeyValue != null && singleKeyValue.FunctionKey != null && singleKeyValue.FunctionKey.Value == FunctionKeys.StepList) " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SetupInputServiceEventHandlers,The length of the statement  "                            The application handles the singleKeyValue string by converting it into a list of commands and then creating commandKeyValue as needed " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                                        RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume()); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                                keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                        && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,ResetAndCleanupAfterMouseAction,The length of the statement  "                keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleServiceError,The length of the statement  "            Log.Error("Error event received from service. Raising ErrorNotificationRequest and playing ErrorSoundFile (from settings)"' exception); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleServiceError,The length of the statement  "            if (RaiseToastNotification(Resources.CRASH_TITLE' exception.Message' NotificationTypes.Error' () => inputService.RequestResume())) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SelectLanguage,The length of the statement  "            InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepList,The length of the statement  "                                    Log.InfoFormat("StepList {0} finished without changing state to Up because key [{1}] is down"' singleKeyValue.String' keyUpCandidate.String); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepListCommands,The length of the statement  "                            Log.InfoFormat("StepListCommand: Change keyboard to string [{0}]. Replace previous keyboard=[{1}]"' commandKeyValue.String' vReturn); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,RunDynamicPlugin,The length of the statement  "                if (RaiseToastNotification(Resources.CRASH_TITLE' exception.Message' NotificationTypes.Error' () => inputService.RequestResume())) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,RunPlugin_Legacy,The length of the statement  "                if (RaiseToastNotification(Resources.CRASH_TITLE' exception.Message' NotificationTypes.Error' () => inputService.RequestResume())) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,RaiseAnyPendingErrorToastNotifications,The length of the statement  "                Log.ErrorFormat("Toast notification popup will be shown to display startup errors:{0}"' pendingErrorToastNotificationContent); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\ManagementViewModel.cs,CoercePersianSettings,The length of the statement  "                            Log.Info("Prompting user to change the UiLanguage to Persian as the KeyboardAndDictionaryLanguage is Persian. The UiLanguage controls whether the scratchpad has text flow RightToLeft' which Persian requires."); " is 210.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\ManagementViewModel.cs,CoercePersianSettings,The length of the statement  "                            Log.Info("Prompting user to change the font to an Persian compatible font. If another font is used then text may be displayed incorrectly."); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\ManagementViewModel.cs,CoerceUrduSettings,The length of the statement  "                            Log.Info("Prompting user to change the UiLanguage to Urdu as the KeyboardAndDictionaryLanguage is Urdu. The UiLanguage controls whether the scratchpad has text flow RightToLeft' which Urdu requires."); " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\ManagementViewModel.cs,CoerceUrduSettings,The length of the statement  "                            Log.Info("Prompting user to change the font to an Urdu compatible font. If another font is used then text (especially numbers which are only displayed correctly in Urdu if an Urdu font is used) may be displayed incorrectly."); " is 226.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerFixationDefaultCompleteTimeInMs = Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds; " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerFixationCompleteTimesByIndividualKey = Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups = FromSetting(Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerIncompleteFixationTtlInMs = Settings.Default.KeySelectionTriggerIncompleteFixationTtl.TotalMilliseconds; " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            PointSelectionTriggerFixationLockOnTimeInMs = Settings.Default.PointSelectionTriggerFixationLockOnTime.TotalMilliseconds; " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            PointSelectionTriggerFixationCompleteTimeInMs = Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds; " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationLockOnTime = TimeSpan.FromMilliseconds(KeySelectionTriggerFixationLockOnTimeInMs); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime = TimeSpan.FromMilliseconds(KeySelectionTriggerFixationDefaultCompleteTimeInMs); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey = KeySelectionTriggerFixationCompleteTimesByIndividualKey; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues = ToSetting(KeySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerIncompleteFixationTtl = TimeSpan.FromMilliseconds(KeySelectionTriggerIncompleteFixationTtlInMs); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.PointSelectionTriggerFixationLockOnTime = TimeSpan.FromMilliseconds(PointSelectionTriggerFixationLockOnTimeInMs); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.PointSelectionTriggerFixationCompleteTime = TimeSpan.FromMilliseconds(PointSelectionTriggerFixationCompleteTimeInMs); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.MultiKeySelectionFixationMinDwellTime = TimeSpan.FromMilliseconds(MultiKeySelectionFixationMinDwellTimeInMs); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ALPHA_1' KeyValues.Alpha1KeyboardKey' dictionary.ContainsKey(KeyValues.Alpha1KeyboardKey) ? dictionary[KeyValues.Alpha1KeyboardKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ALPHA_2' KeyValues.Alpha2KeyboardKey' dictionary.ContainsKey(KeyValues.Alpha2KeyboardKey) ? dictionary[KeyValues.Alpha2KeyboardKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BACK' KeyValues.BackFromKeyboardKey' dictionary.ContainsKey(KeyValues.BackFromKeyboardKey) ? dictionary[KeyValues.BackFromKeyboardKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONVERSATION_ALPHA_1' KeyValues.ConversationAlpha1KeyboardKey' dictionary.ContainsKey(KeyValues.ConversationAlpha1KeyboardKey) ? dictionary[KeyValues.ConversationAlpha1KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONVERSATION_ALPHA_2' KeyValues.ConversationAlpha2KeyboardKey' dictionary.ContainsKey(KeyValues.ConversationAlpha2KeyboardKey) ? dictionary[KeyValues.ConversationAlpha2KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONVERSATION_NUMERIC_AND_SYMBOLS' KeyValues.ConversationNumericAndSymbolsKeyboardKey' dictionary.ContainsKey(KeyValues.ConversationNumericAndSymbolsKeyboardKey) ? dictionary[KeyValues.ConversationNumericAndSymbolsKeyboardKey] : (TimeSpan?)null)' " is 279.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CURRENCIES_1' KeyValues.Currencies1KeyboardKey' dictionary.ContainsKey(KeyValues.Currencies1KeyboardKey) ? dictionary[KeyValues.Currencies1KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CURRENCIES_2' KeyValues.Currencies2KeyboardKey' dictionary.ContainsKey(KeyValues.Currencies2KeyboardKey) ? dictionary[KeyValues.Currencies2KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DIACRITICS_1' KeyValues.Diacritic1KeyboardKey' dictionary.ContainsKey(KeyValues.Diacritic1KeyboardKey) ? dictionary[KeyValues.Diacritic1KeyboardKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DIACRITICS_2' KeyValues.Diacritic2KeyboardKey' dictionary.ContainsKey(KeyValues.Diacritic2KeyboardKey) ? dictionary[KeyValues.Diacritic2KeyboardKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DIACRITICS_3' KeyValues.Diacritic3KeyboardKey' dictionary.ContainsKey(KeyValues.Diacritic3KeyboardKey) ? dictionary[KeyValues.Diacritic3KeyboardKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DYNAMIC_KEYBOARD' KeyValues.DynamicKeyboardKey' dictionary.ContainsKey(KeyValues.DynamicKeyboardKey) ? dictionary[KeyValues.DynamicKeyboardKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LANGUAGE_AND_VOICE_UPPER_CASE' KeyValues.LanguageKeyboardKey' dictionary.ContainsKey(KeyValues.LanguageKeyboardKey) ? dictionary[KeyValues.LanguageKeyboardKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MENU' KeyValues.MenuKeyboardKey' dictionary.ContainsKey(KeyValues.MenuKeyboardKey) ? dictionary[KeyValues.MenuKeyboardKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOUSE' KeyValues.MouseKeyboardKey' dictionary.ContainsKey(KeyValues.MouseKeyboardKey) ? dictionary[KeyValues.MouseKeyboardKey] : (TimeSpan?)null)' " is 180.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUMBERS_SYMBOLS_1' KeyValues.NumericAndSymbols1KeyboardKey' dictionary.ContainsKey(KeyValues.NumericAndSymbols1KeyboardKey) ? dictionary[KeyValues.NumericAndSymbols1KeyboardKey] : (TimeSpan?)null)' " is 231.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUMBERS_SYMBOLS_2' KeyValues.NumericAndSymbols2KeyboardKey' dictionary.ContainsKey(KeyValues.NumericAndSymbols2KeyboardKey) ? dictionary[KeyValues.NumericAndSymbols2KeyboardKey] : (TimeSpan?)null)' " is 231.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUMBERS_SYMBOLS_3' KeyValues.NumericAndSymbols3KeyboardKey' dictionary.ContainsKey(KeyValues.NumericAndSymbols3KeyboardKey) ? dictionary[KeyValues.NumericAndSymbols3KeyboardKey] : (TimeSpan?)null)' " is 231.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PHYSICAL_KEYS' KeyValues.PhysicalKeysKeyboardKey' dictionary.ContainsKey(KeyValues.PhysicalKeysKeyboardKey) ? dictionary[KeyValues.PhysicalKeysKeyboardKey] : (TimeSpan?)null)' " is 209.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SIZE_AND_POSITION' KeyValues.SizeAndPositionKeyboardKey' dictionary.ContainsKey(KeyValues.SizeAndPositionKeyboardKey) ? dictionary[KeyValues.SizeAndPositionKeyboardKey] : (TimeSpan?)null)' " is 222.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.WEB_BROWSING' KeyValues.WebBrowsingKeyboardKey' dictionary.ContainsKey(KeyValues.WebBrowsingKeyboardKey) ? dictionary[KeyValues.WebBrowsingKeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.COLLAPSE_DOCK' KeyValues.CollapseDockKey' dictionary.ContainsKey(KeyValues.CollapseDockKey) ? dictionary[KeyValues.CollapseDockKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOCK' KeyValues.ExpandDockKey' dictionary.ContainsKey(KeyValues.ExpandDockKey) ? dictionary[KeyValues.ExpandDockKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CATALAN_SPAIN' KeyValues.CatalanSpainKey' dictionary.ContainsKey(KeyValues.CatalanSpainKey) ? dictionary[KeyValues.CatalanSpainKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CROATIAN_CROATIA' KeyValues.CroatianCroatiaKey'dictionary.ContainsKey(KeyValues.CroatianCroatiaKey) ? dictionary[KeyValues.CroatianCroatiaKey] : (TimeSpan?) null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CZECH_CZECH_REPUBLIC' KeyValues.CzechCzechRepublicKey' dictionary.ContainsKey(KeyValues.CzechCzechRepublicKey) ? dictionary[KeyValues.CzechCzechRepublicKey] : (TimeSpan?) null)' " is 211.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DANISH_DENMARK' KeyValues.DanishDenmarkKey'dictionary.ContainsKey(KeyValues.DanishDenmarkKey) ? dictionary[KeyValues.DanishDenmarkKey] : (TimeSpan?) null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DUTCH_BELGIUM' KeyValues.DutchBelgiumKey' dictionary.ContainsKey(KeyValues.DutchBelgiumKey) ? dictionary[KeyValues.DutchBelgiumKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DUTCH_NETHERLANDS' KeyValues.DutchNetherlandsKey' dictionary.ContainsKey(KeyValues.DutchNetherlandsKey) ? dictionary[KeyValues.DutchNetherlandsKey] : (TimeSpan?)null)' " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ENGLISH_CANADA' KeyValues.EnglishCanadaKey' dictionary.ContainsKey(KeyValues.EnglishCanadaKey) ? dictionary[KeyValues.EnglishCanadaKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ENGLISH_UK' KeyValues.EnglishUKKey' dictionary.ContainsKey(KeyValues.EnglishUKKey) ? dictionary[KeyValues.EnglishUKKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ENGLISH_US' KeyValues.EnglishUSKey' dictionary.ContainsKey(KeyValues.EnglishUSKey) ? dictionary[KeyValues.EnglishUSKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.FINNISH_FINLAND' KeyValues.FinnishFinlandKey' dictionary.ContainsKey(KeyValues.FinnishFinlandKey) ? dictionary[KeyValues.FinnishFinlandKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.FRENCH_CANADA' KeyValues.FrenchCanadaKey' dictionary.ContainsKey(KeyValues.FrenchCanadaKey) ? dictionary[KeyValues.FrenchCanadaKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.FRENCH_FRANCE' KeyValues.FrenchFranceKey' dictionary.ContainsKey(KeyValues.FrenchFranceKey) ? dictionary[KeyValues.FrenchFranceKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.GEORGIAN_GEORGIA' KeyValues.GeorgianGeorgiaKey' dictionary.ContainsKey(KeyValues.GeorgianGeorgiaKey) ? dictionary[KeyValues.GeorgianGeorgiaKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.GERMAN_GERMANY' KeyValues.GermanGermanyKey' dictionary.ContainsKey(KeyValues.GermanGermanyKey) ? dictionary[KeyValues.GermanGermanyKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.GREEK_GREECE' KeyValues.GreekGreeceKey' dictionary.ContainsKey(KeyValues.GreekGreeceKey) ? dictionary[KeyValues.GreekGreeceKey] : (TimeSpan?) null)' " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.HEBREW_ISRAEL' KeyValues.HebrewIsraelKey' dictionary.ContainsKey(KeyValues.HebrewIsraelKey) ? dictionary[KeyValues.HebrewIsraelKey] : (TimeSpan?) null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                     new KeyValueAndTimeSpan(Resources.HUNGARIAN_HUNGARY' KeyValues.HungarianHungaryKey' dictionary.ContainsKey(KeyValues.HungarianHungaryKey) ? dictionary[KeyValues.HungarianHungaryKey] : (TimeSpan?) null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ITALIAN_ITALY' KeyValues.ItalianItalyKey' dictionary.ContainsKey(KeyValues.ItalianItalyKey) ? dictionary[KeyValues.ItalianItalyKey] : (TimeSpan?) null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JAPANESE_JAPAN' KeyValues.JapaneseJapanKey' dictionary.ContainsKey(KeyValues.JapaneseJapanKey) ? dictionary[KeyValues.JapaneseJapanKey] : (TimeSpan?) null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.KOREAN_KOREA' KeyValues.KoreanKoreaKey' dictionary.ContainsKey(KeyValues.KoreanKoreaKey) ? dictionary[KeyValues.KoreanKoreaKey] : (TimeSpan?) null)' " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PERSIAN_IRAN' KeyValues.PersianIranKey' dictionary.ContainsKey(KeyValues.PersianIranKey) ? dictionary[KeyValues.PersianIranKey] : (TimeSpan?) null)' " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.POLISH_POLAND' KeyValues.PolishPolandKey' dictionary.ContainsKey(KeyValues.PolishPolandKey) ? dictionary[KeyValues.PolishPolandKey] : (TimeSpan?) null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PORTUGUESE_PORTUGAL' KeyValues.PortuguesePortugalKey' dictionary.ContainsKey(KeyValues.PortuguesePortugalKey) ? dictionary[KeyValues.PortuguesePortugalKey] : (TimeSpan?) null)' " is 210.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RUSSIAN_RUSSIA' KeyValues.RussianRussiaKey' dictionary.ContainsKey(KeyValues.RussianRussiaKey) ? dictionary[KeyValues.RussianRussiaKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SERBIAN_SERBIA' KeyValues.SerbianSerbiaKey' dictionary.ContainsKey(KeyValues.SerbianSerbiaKey) ? dictionary[KeyValues.SerbianSerbiaKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SLOVAK_SLOVAKIA' KeyValues.SlovakSlovakiaKey' dictionary.ContainsKey(KeyValues.SlovakSlovakiaKey) ? dictionary[KeyValues.SlovakSlovakiaKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SLOVENIAN_SLOVENIA' KeyValues.SlovenianSloveniaKey' dictionary.ContainsKey(KeyValues.SlovenianSloveniaKey) ? dictionary[KeyValues.SlovenianSloveniaKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SPANISH_SPAIN' KeyValues.SpanishSpainKey' dictionary.ContainsKey(KeyValues.SpanishSpainKey) ? dictionary[KeyValues.SpanishSpainKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.TURKISH_TURKEY' KeyValues.TurkishTurkeyKey' dictionary.ContainsKey(KeyValues.TurkishTurkeyKey) ? dictionary[KeyValues.TurkishTurkeyKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.UKRAINIAN_UKRAINE' KeyValues.UkrainianUkraineKey' dictionary.ContainsKey(KeyValues.UkrainianUkraineKey) ? dictionary[KeyValues.UkrainianUkraineKey] : (TimeSpan?)null)' " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.URDU_PAKISTAN' KeyValues.UrduPakistanKey' dictionary.ContainsKey(KeyValues.UrduPakistanKey) ? dictionary[KeyValues.UrduPakistanKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LOOK_TO_SCROLL_ACTIVE_KEY_GROUP_LABEL' KeyValues.LookToScrollActiveKey' dictionary.ContainsKey(KeyValues.LookToScrollActiveKey) ? dictionary[KeyValues.LookToScrollActiveKey] : (TimeSpan?)null)' " is 227.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LOOK_TO_SCROLL_BOUNDS_KEY_GROUP_LABEL' KeyValues.LookToScrollBoundsKey' dictionary.ContainsKey(KeyValues.LookToScrollBoundsKey) ? dictionary[KeyValues.LookToScrollBoundsKey] : (TimeSpan?)null)' " is 227.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LOOK_TO_SCROLL_INCREMENT_KEY_GROUP_LABEL' KeyValues.LookToScrollIncrementKey' dictionary.ContainsKey(KeyValues.LookToScrollIncrementKey) ? dictionary[KeyValues.LookToScrollIncrementKey] : (TimeSpan?)null)' " is 239.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LOOK_TO_SCROLL_MODE_KEY_GROUP_LABEL' KeyValues.LookToScrollModeKey' dictionary.ContainsKey(KeyValues.LookToScrollModeKey) ? dictionary[KeyValues.LookToScrollModeKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LOOK_TO_SCROLL_SPEED_KEY_GROUP_LABEL' KeyValues.LookToScrollSpeedKey' dictionary.ContainsKey(KeyValues.LookToScrollSpeedKey) ? dictionary[KeyValues.LookToScrollSpeedKey] : (TimeSpan?)null)' " is 223.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ADD_TO_DICTIONARY' KeyValues.AddToDictionaryKey' dictionary.ContainsKey(KeyValues.AddToDictionaryKey) ? dictionary[KeyValues.AddToDictionaryKey] : (TimeSpan?)null)' " is 198.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ATTENTION' KeyValues.AttentionKey' dictionary.ContainsKey(KeyValues.AttentionKey) ? dictionary[KeyValues.AttentionKey] : (TimeSpan?)null)' " is 172.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BACK_WORD' KeyValues.BackManyKey' dictionary.ContainsKey(KeyValues.BackManyKey) ? dictionary[KeyValues.BackManyKey] : (TimeSpan?)null)' " is 169.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BACK_ONE' KeyValues.BackOneKey' dictionary.ContainsKey(KeyValues.BackOneKey) ? dictionary[KeyValues.BackOneKey] : (TimeSpan?)null)' " is 165.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RE_CALIBRATE' KeyValues.CalibrateKey' dictionary.ContainsKey(KeyValues.CalibrateKey) ? dictionary[KeyValues.CalibrateKey] : (TimeSpan?)null)' " is 175.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CLEAR' KeyValues.ClearScratchpadKey' dictionary.ContainsKey(KeyValues.ClearScratchpadKey) ? dictionary[KeyValues.ClearScratchpadKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DECREASE_OPACITY' KeyValues.DecreaseOpacityKey' dictionary.ContainsKey(KeyValues.DecreaseOpacityKey) ? dictionary[KeyValues.DecreaseOpacityKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.INCREASE_OPACITY' KeyValues.IncreaseOpacityKey' dictionary.ContainsKey(KeyValues.IncreaseOpacityKey) ? dictionary[KeyValues.IncreaseOpacityKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MINIMISE' KeyValues.MinimiseKey' dictionary.ContainsKey(KeyValues.MinimiseKey) ? dictionary[KeyValues.MinimiseKey] : (TimeSpan?)null)' " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MORE_UPPER_CASE' KeyValues.MoreKey' dictionary.ContainsKey(KeyValues.MoreKey) ? dictionary[KeyValues.MoreKey] : (TimeSpan?)null)' " is 163.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MULTI_KEY_SELECTION_UPPER_CASE' KeyValues.MultiKeySelectionIsOnKey' dictionary.ContainsKey(KeyValues.MultiKeySelectionIsOnKey) ? dictionary[KeyValues.MultiKeySelectionIsOnKey] : (TimeSpan?)null)' " is 229.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NO' KeyValues.NoQuestionResultKey' dictionary.ContainsKey(KeyValues.NoQuestionResultKey) ? dictionary[KeyValues.NoQuestionResultKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.QUIT' KeyValues.QuitKey' dictionary.ContainsKey(KeyValues.QuitKey) ? dictionary[KeyValues.QuitKey] : (TimeSpan?)null)' " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RESTART_UPPERCASE' KeyValues.RestartKey' dictionary.ContainsKey(KeyValues.RestartKey) ? dictionary[KeyValues.RestartKey] : (TimeSpan?)null)' " is 174.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SELECT_VOICE' KeyValues.SelectVoiceKey' dictionary.ContainsKey(KeyValues.SelectVoiceKey) ? dictionary[KeyValues.SelectVoiceKey] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SLEEP' KeyValues.SleepKey' dictionary.ContainsKey(KeyValues.SleepKey) ? dictionary[KeyValues.SleepKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SPEAK' KeyValues.SpeakKey' dictionary.ContainsKey(KeyValues.SpeakKey) ? dictionary[KeyValues.SpeakKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.YES' KeyValues.YesQuestionResultKey' dictionary.ContainsKey(KeyValues.YesQuestionResultKey) ? dictionary[KeyValues.YesQuestionResultKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ALT' KeyValues.LeftAltKey' dictionary.ContainsKey(KeyValues.LeftAltKey) ? dictionary[KeyValues.LeftAltKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CTRL' KeyValues.LeftCtrlKey' dictionary.ContainsKey(KeyValues.LeftCtrlKey) ? dictionary[KeyValues.LeftCtrlKey] : (TimeSpan?)null)' " is 164.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHIFT' KeyValues.LeftShiftKey' dictionary.ContainsKey(KeyValues.LeftShiftKey) ? dictionary[KeyValues.LeftShiftKey] : (TimeSpan?)null)' " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.WIN' KeyValues.LeftWinKey' dictionary.ContainsKey(KeyValues.LeftWinKey) ? dictionary[KeyValues.LeftWinKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_CLICK' KeyValues.MouseLeftClickKey' dictionary.ContainsKey(KeyValues.MouseLeftClickKey) ? dictionary[KeyValues.MouseLeftClickKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_DOUBLE_CLICK' KeyValues.MouseLeftDoubleClickKey' dictionary.ContainsKey(KeyValues.MouseLeftDoubleClickKey) ? dictionary[KeyValues.MouseLeftDoubleClickKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_DOWN_UP' KeyValues.MouseLeftDownUpKey' dictionary.ContainsKey(KeyValues.MouseLeftDownUpKey) ? dictionary[KeyValues.MouseLeftDownUpKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MAGNETIC_CURSOR' KeyValues.MouseMagneticCursorKey' dictionary.ContainsKey(KeyValues.MouseMagneticCursorKey) ? dictionary[KeyValues.MouseMagneticCursorKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MIDDLE_CLICK' KeyValues.MouseMiddleClickKey' dictionary.ContainsKey(KeyValues.MouseMiddleClickKey) ? dictionary[KeyValues.MouseMiddleClickKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MIDDLE_DOWN_UP' KeyValues.MouseMiddleDownUpKey' dictionary.ContainsKey(KeyValues.MouseMiddleDownUpKey) ? dictionary[KeyValues.MouseMiddleDownUpKey] : (TimeSpan?)null)' " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_AMOUNT_IN_PIXEL' KeyValues.MouseMoveAmountInPixelsKey' dictionary.ContainsKey(KeyValues.MouseMoveAmountInPixelsKey) ? dictionary[KeyValues.MouseMoveAmountInPixelsKey] : (TimeSpan?)null)' " is 225.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN' KeyValues.MouseMoveToBottomKey' dictionary.ContainsKey(KeyValues.MouseMoveToBottomKey) ? dictionary[KeyValues.MouseMoveToBottomKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_TO' KeyValues.MouseMoveToKey' dictionary.ContainsKey(KeyValues.MouseMoveToKey) ? dictionary[KeyValues.MouseMoveToKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_LEFT' KeyValues.MouseMoveToLeftKey' dictionary.ContainsKey(KeyValues.MouseMoveToLeftKey) ? dictionary[KeyValues.MouseMoveToLeftKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_RIGHT' KeyValues.MouseMoveToRightKey' dictionary.ContainsKey(KeyValues.MouseMoveToRightKey) ? dictionary[KeyValues.MouseMoveToRightKey] : (TimeSpan?)null)' " is 194.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP' KeyValues.MouseMoveToTopKey' dictionary.ContainsKey(KeyValues.MouseMoveToTopKey) ? dictionary[KeyValues.MouseMoveToTopKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_CLICK' KeyValues.MouseRightClickKey' dictionary.ContainsKey(KeyValues.MouseRightClickKey) ? dictionary[KeyValues.MouseRightClickKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_DOWN_UP' KeyValues.MouseRightDownUpKey' dictionary.ContainsKey(KeyValues.MouseRightDownUpKey) ? dictionary[KeyValues.MouseRightDownUpKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CLICK_AND_DRAG' KeyValues.MouseDragKey' dictionary.ContainsKey(KeyValues.MouseDragKey) ? dictionary[KeyValues.MouseDragKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_CLICK' KeyValues.MouseMoveAndLeftClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndLeftClickKey) ? dictionary[KeyValues.MouseMoveAndLeftClickKey] : (TimeSpan?)null)' " is 209.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_DOUBLE_CLICK' KeyValues.MouseMoveAndLeftDoubleClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndLeftDoubleClickKey) ? dictionary[KeyValues.MouseMoveAndLeftDoubleClickKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MIDDLE_CLICK' KeyValues.MouseMoveAndMiddleClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndMiddleClickKey) ? dictionary[KeyValues.MouseMoveAndMiddleClickKey] : (TimeSpan?)null)' " is 217.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_CLICK' KeyValues.MouseMoveAndRightClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndRightClickKey) ? dictionary[KeyValues.MouseMoveAndRightClickKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_DOWN' KeyValues.MouseMoveAndScrollToBottomKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToBottomKey) ? dictionary[KeyValues.MouseMoveAndScrollToBottomKey] : (TimeSpan?)null)' " is 225.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_LEFT' KeyValues.MouseMoveAndScrollToLeftKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToLeftKey) ? dictionary[KeyValues.MouseMoveAndScrollToLeftKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_RIGHT' KeyValues.MouseMoveAndScrollToRightKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToRightKey) ? dictionary[KeyValues.MouseMoveAndScrollToRightKey] : (TimeSpan?)null)' " is 223.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_UP' KeyValues.MouseMoveAndScrollToTopKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToTopKey) ? dictionary[KeyValues.MouseMoveAndScrollToTopKey] : (TimeSpan?)null)' " is 214.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_AMOUNT_IN_CLICKS' KeyValues.MouseScrollAmountInClicksKey' dictionary.ContainsKey(KeyValues.MouseScrollAmountInClicksKey) ? dictionary[KeyValues.MouseScrollAmountInClicksKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MAGNIFIER' KeyValues.MouseMagnifierKey' dictionary.ContainsKey(KeyValues.MouseMagnifierKey) ? dictionary[KeyValues.MouseMagnifierKey] : (TimeSpan?)null)' " is 187.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.REPEAT_LAST' KeyValues.RepeatLastMouseActionKey' dictionary.ContainsKey(KeyValues.RepeatLastMouseActionKey) ? dictionary[KeyValues.RepeatLastMouseActionKey] : (TimeSpan?)null)' " is 210.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOWN_AND_LEFT' KeyValues.ExpandToBottomAndLeftKey' dictionary.ContainsKey(KeyValues.ExpandToBottomAndLeftKey) ? dictionary[KeyValues.ExpandToBottomAndLeftKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOWN_AND_RIGHT' KeyValues.ExpandToBottomAndRightKey' dictionary.ContainsKey(KeyValues.ExpandToBottomAndRightKey) ? dictionary[KeyValues.ExpandToBottomAndRightKey] : (TimeSpan?)null)' " is 223.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOWN' KeyValues.ExpandToBottomKey' dictionary.ContainsKey(KeyValues.ExpandToBottomKey) ? dictionary[KeyValues.ExpandToBottomKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_LEFT' KeyValues.ExpandToLeftKey' dictionary.ContainsKey(KeyValues.ExpandToLeftKey) ? dictionary[KeyValues.ExpandToLeftKey] : (TimeSpan?)null)' " is 183.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_RIGHT' KeyValues.ExpandToRightKey' dictionary.ContainsKey(KeyValues.ExpandToRightKey) ? dictionary[KeyValues.ExpandToRightKey] : (TimeSpan?)null)' " is 187.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_UP_AND_LEFT' KeyValues.ExpandToTopAndLeftKey' dictionary.ContainsKey(KeyValues.ExpandToTopAndLeftKey) ? dictionary[KeyValues.ExpandToTopAndLeftKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_UP_AND_RIGHT' KeyValues.ExpandToTopAndRightKey' dictionary.ContainsKey(KeyValues.ExpandToTopAndRightKey) ? dictionary[KeyValues.ExpandToTopAndRightKey] : (TimeSpan?)null)' " is 212.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_UP' KeyValues.ExpandToTopKey' dictionary.ContainsKey(KeyValues.ExpandToTopKey) ? dictionary[KeyValues.ExpandToTopKey] : (TimeSpan?)null)' " is 178.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ADJUST_AMOUNT_IN_PIXELS' KeyValues.MoveAndResizeAdjustmentAmountKey' dictionary.ContainsKey(KeyValues.MoveAndResizeAdjustmentAmountKey) ? dictionary[KeyValues.MoveAndResizeAdjustmentAmountKey] : (TimeSpan?)null)' " is 246.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_DOWN_AND_LEFT' KeyValues.MoveToBottomAndLeftBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndLeftBoundariesKey) ? dictionary[KeyValues.MoveToBottomAndLeftBoundariesKey] : (TimeSpan?)null)' " is 241.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN_AND_LEFT' KeyValues.MoveToBottomAndLeftKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndLeftKey) ? dictionary[KeyValues.MoveToBottomAndLeftKey] : (TimeSpan?)null)' " is 211.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_DOWN_AND_RIGHT' KeyValues.MoveToBottomAndRightBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndRightBoundariesKey) ? dictionary[KeyValues.MoveToBottomAndRightBoundariesKey] : (TimeSpan?)null)' " is 245.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN_AND_RIGHT' KeyValues.MoveToBottomAndRightKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndRightKey) ? dictionary[KeyValues.MoveToBottomAndRightKey] : (TimeSpan?)null)' " is 215.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_DOWN' KeyValues.MoveToBottomBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToBottomBoundaryKey) ? dictionary[KeyValues.MoveToBottomBoundaryKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN' KeyValues.MoveToBottomKey' dictionary.ContainsKey(KeyValues.MoveToBottomKey) ? dictionary[KeyValues.MoveToBottomKey] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_LEFT' KeyValues.MoveToLeftBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToLeftBoundaryKey) ? dictionary[KeyValues.MoveToLeftBoundaryKey] : (TimeSpan?)null)' " is 199.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_LEFT' KeyValues.MoveToLeftKey' dictionary.ContainsKey(KeyValues.MoveToLeftKey) ? dictionary[KeyValues.MoveToLeftKey] : (TimeSpan?)null)' " is 175.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_RIGHT' KeyValues.MoveToRightBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToRightBoundaryKey) ? dictionary[KeyValues.MoveToRightBoundaryKey] : (TimeSpan?)null)' " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_RIGHT' KeyValues.MoveToRightKey' dictionary.ContainsKey(KeyValues.MoveToRightKey) ? dictionary[KeyValues.MoveToRightKey] : (TimeSpan?)null)' " is 179.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_UP_AND_LEFT' KeyValues.MoveToTopAndLeftBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToTopAndLeftBoundariesKey) ? dictionary[KeyValues.MoveToTopAndLeftBoundariesKey] : (TimeSpan?)null)' " is 230.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP_AND_LEFT' KeyValues.MoveToTopAndLeftKey' dictionary.ContainsKey(KeyValues.MoveToTopAndLeftKey) ? dictionary[KeyValues.MoveToTopAndLeftKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_UP_AND_RIGHT' KeyValues.MoveToTopAndRightBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToTopAndRightBoundariesKey) ? dictionary[KeyValues.MoveToTopAndRightBoundariesKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP_AND_RIGHT' KeyValues.MoveToTopAndRightKey' dictionary.ContainsKey(KeyValues.MoveToTopAndRightKey) ? dictionary[KeyValues.MoveToTopAndRightKey] : (TimeSpan?)null)' " is 204.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_UP' KeyValues.MoveToTopBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToTopBoundaryKey) ? dictionary[KeyValues.MoveToTopBoundaryKey] : (TimeSpan?)null)' " is 194.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP' KeyValues.MoveToTopKey' dictionary.ContainsKey(KeyValues.MoveToTopKey) ? dictionary[KeyValues.MoveToTopKey] : (TimeSpan?)null)' " is 170.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_UP_AND_RIGHT' KeyValues.ShrinkFromBottomAndLeftKey' dictionary.ContainsKey(KeyValues.ShrinkFromBottomAndLeftKey) ? dictionary[KeyValues.ShrinkFromBottomAndLeftKey] : (TimeSpan?)null)' " is 224.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_UP_AND_LEFT' KeyValues.ShrinkFromBottomAndRightKey' dictionary.ContainsKey(KeyValues.ShrinkFromBottomAndRightKey) ? dictionary[KeyValues.ShrinkFromBottomAndRightKey] : (TimeSpan?)null)' " is 226.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_UP' KeyValues.ShrinkFromBottomKey' dictionary.ContainsKey(KeyValues.ShrinkFromBottomKey) ? dictionary[KeyValues.ShrinkFromBottomKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_RIGHT' KeyValues.ShrinkFromLeftKey' dictionary.ContainsKey(KeyValues.ShrinkFromLeftKey) ? dictionary[KeyValues.ShrinkFromLeftKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_LEFT' KeyValues.ShrinkFromRightKey' dictionary.ContainsKey(KeyValues.ShrinkFromRightKey) ? dictionary[KeyValues.ShrinkFromRightKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_DOWN_AND_RIGHT' KeyValues.ShrinkFromTopAndLeftKey' dictionary.ContainsKey(KeyValues.ShrinkFromTopAndLeftKey) ? dictionary[KeyValues.ShrinkFromTopAndLeftKey] : (TimeSpan?)null)' " is 217.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_DOWN_AND_LEFT' KeyValues.ShrinkFromTopAndRightKey' dictionary.ContainsKey(KeyValues.ShrinkFromTopAndRightKey) ? dictionary[KeyValues.ShrinkFromTopAndRightKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_DOWN' KeyValues.ShrinkFromTopKey' dictionary.ContainsKey(KeyValues.ShrinkFromTopKey) ? dictionary[KeyValues.ShrinkFromTopKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DOWN_ARROW' KeyValues.ArrowDownKey' dictionary.ContainsKey(KeyValues.ArrowDownKey) ? dictionary[KeyValues.ArrowDownKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_ARROW' KeyValues.ArrowLeftKey' dictionary.ContainsKey(KeyValues.ArrowLeftKey) ? dictionary[KeyValues.ArrowLeftKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_ARROW' KeyValues.ArrowRightKey' dictionary.ContainsKey(KeyValues.ArrowRightKey) ? dictionary[KeyValues.ArrowRightKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.UP_ARROW' KeyValues.ArrowUpKey' dictionary.ContainsKey(KeyValues.ArrowUpKey) ? dictionary[KeyValues.ArrowUpKey] : (TimeSpan?)null)' " is 165.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BREAK' KeyValues.BreakKey' dictionary.ContainsKey(KeyValues.BreakKey) ? dictionary[KeyValues.BreakKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DEL' KeyValues.DeleteKey' dictionary.ContainsKey(KeyValues.DeleteKey) ? dictionary[KeyValues.DeleteKey] : (TimeSpan?)null)' " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.END' KeyValues.EndKey' dictionary.ContainsKey(KeyValues.EndKey) ? dictionary[KeyValues.EndKey] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ESC' KeyValues.EscapeKey' dictionary.ContainsKey(KeyValues.EscapeKey) ? dictionary[KeyValues.EscapeKey] : (TimeSpan?)null)' " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F10' KeyValues.F10Key' dictionary.ContainsKey(KeyValues.F10Key) ? dictionary[KeyValues.F10Key] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F11' KeyValues.F11Key' dictionary.ContainsKey(KeyValues.F11Key) ? dictionary[KeyValues.F11Key] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F12' KeyValues.F12Key' dictionary.ContainsKey(KeyValues.F12Key) ? dictionary[KeyValues.F12Key] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F1' KeyValues.F1Key' dictionary.ContainsKey(KeyValues.F1Key) ? dictionary[KeyValues.F1Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F2' KeyValues.F2Key' dictionary.ContainsKey(KeyValues.F2Key) ? dictionary[KeyValues.F2Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F3' KeyValues.F3Key' dictionary.ContainsKey(KeyValues.F3Key) ? dictionary[KeyValues.F3Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F4' KeyValues.F4Key' dictionary.ContainsKey(KeyValues.F4Key) ? dictionary[KeyValues.F4Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F5' KeyValues.F5Key' dictionary.ContainsKey(KeyValues.F5Key) ? dictionary[KeyValues.F5Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F6' KeyValues.F6Key' dictionary.ContainsKey(KeyValues.F6Key) ? dictionary[KeyValues.F6Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F7' KeyValues.F7Key' dictionary.ContainsKey(KeyValues.F7Key) ? dictionary[KeyValues.F7Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F8' KeyValues.F8Key' dictionary.ContainsKey(KeyValues.F8Key) ? dictionary[KeyValues.F8Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F9' KeyValues.F9Key' dictionary.ContainsKey(KeyValues.F9Key) ? dictionary[KeyValues.F9Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.HOME' KeyValues.HomeKey' dictionary.ContainsKey(KeyValues.HomeKey) ? dictionary[KeyValues.HomeKey] : (TimeSpan?)null)' " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.INS' KeyValues.InsertKey' dictionary.ContainsKey(KeyValues.InsertKey) ? dictionary[KeyValues.InsertKey] : (TimeSpan?)null)' " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONTEXTUAL_MENU_KEY' KeyValues.MenuKey' dictionary.ContainsKey(KeyValues.MenuKey) ? dictionary[KeyValues.MenuKey] : (TimeSpan?)null)' " is 167.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUM_LK' KeyValues.NumberLockKey' dictionary.ContainsKey(KeyValues.NumberLockKey) ? dictionary[KeyValues.NumberLockKey] : (TimeSpan?)null)' " is 172.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PG_DN' KeyValues.PgDnKey' dictionary.ContainsKey(KeyValues.PgDnKey) ? dictionary[KeyValues.PgDnKey] : (TimeSpan?)null)' " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PG_UP' KeyValues.PgUpKey' dictionary.ContainsKey(KeyValues.PgUpKey) ? dictionary[KeyValues.PgUpKey] : (TimeSpan?)null)' " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PRNT_SCR' KeyValues.PrintScreenKey' dictionary.ContainsKey(KeyValues.PrintScreenKey) ? dictionary[KeyValues.PrintScreenKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCRN_LK' KeyValues.ScrollLockKey' dictionary.ContainsKey(KeyValues.ScrollLockKey) ? dictionary[KeyValues.ScrollLockKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.TAB' KeyValues.TabKey' dictionary.ContainsKey(KeyValues.TabKey) ? dictionary[KeyValues.TabKey] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NEXT' KeyValues.NextSuggestionsKey' dictionary.ContainsKey(KeyValues.NextSuggestionsKey) ? dictionary[KeyValues.NextSuggestionsKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PREV' KeyValues.PreviousSuggestionsKey' dictionary.ContainsKey(KeyValues.PreviousSuggestionsKey) ? dictionary[KeyValues.PreviousSuggestionsKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_1' KeyValues.Suggestion1Key' dictionary.ContainsKey(KeyValues.Suggestion1Key) ? dictionary[KeyValues.Suggestion1Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_2' KeyValues.Suggestion2Key' dictionary.ContainsKey(KeyValues.Suggestion2Key) ? dictionary[KeyValues.Suggestion2Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_3' KeyValues.Suggestion3Key' dictionary.ContainsKey(KeyValues.Suggestion3Key) ? dictionary[KeyValues.Suggestion3Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_4' KeyValues.Suggestion4Key' dictionary.ContainsKey(KeyValues.Suggestion4Key) ? dictionary[KeyValues.Suggestion4Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_5' KeyValues.Suggestion5Key' dictionary.ContainsKey(KeyValues.Suggestion5Key) ? dictionary[KeyValues.Suggestion5Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_6' KeyValues.Suggestion6Key' dictionary.ContainsKey(KeyValues.Suggestion6Key) ? dictionary[KeyValues.Suggestion6Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,Load,The length of the statement  "            MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness = Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness; " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness = MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness; " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,Load,The length of the statement  "            LookToScrollBringWindowToFrontAfterChoosingScreenPoint = Settings.Default.LookToScrollBringWindowToFrontAfterChoosingScreenPoint; " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\OtherViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.LookToScrollBringWindowToFrontAfterChoosingScreenPoint = LookToScrollBringWindowToFrontAfterChoosingScreenPoint; " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Catalan,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Catalan\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/catalan/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Catalan,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Catalan\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/catalan/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,ConversationConfirm,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\ConversationConfirm.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/conversationconfirm.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Voice,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Voice.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/voice.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Language,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Language.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/language.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The length of the statement  "                && validWindowState != WindowStates.Docked && validWindowState != WindowStates.Floating && validWindowState != WindowStates.Maximised) " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The length of the statement  "            else if (!string.IsNullOrWhiteSpace(keyboard.Position) && !Enum.TryParse<MoveToDirections>(keyboard.Position' out validPosition)) " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The length of the statement  "            else if (!string.IsNullOrWhiteSpace(keyboard.DockSize) && !Enum.TryParse<DockSizes>(keyboard.DockSize' out validDockSize)) " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The length of the statement  "                !(double.TryParse(keyboard.HorizontalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)) " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The length of the statement  "                !(double.TryParse(keyboard.VerticalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)) " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateKeyWithBasicProps,The length of the statement  "                    vText = vLabel.Substring(vLabel.IndexOf("{Resource:")' vLabel.IndexOf("}"' vLabel.IndexOf("{Resource:")) - vLabel.IndexOf("{Resource:") + 1); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateKeyWithBasicProps,The length of the statement  "                    vText = vLabel.Substring(vLabel.IndexOf("{Setting:")' vLabel.IndexOf("}"' vLabel.IndexOf("{Setting:")) - vLabel.IndexOf("{Setting:") + 1); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,The length of the statement  "            var minKeyWidth = keyboard.Content.Items.Select(k => k.Width).Min() > 0 ? keyboard.Content.Items.Select(k => k.Width).Min() : 1; " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,The length of the statement  "            var minKeyHeight = keyboard.Content.Items.Select(k => k.Height).Min() > 0 ? keyboard.Content.Items.Select(k => k.Height).Min() : 1; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,The length of the statement  "                if (dynamicItem.Col + dynamicItem.Width > keyboard.Grid.Cols || dynamicItem.Row + dynamicItem.Height > keyboard.Grid.Rows) " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,The length of the statement  "                    var startRow = dynamicItem.Row > -1 ? (openGrid.ElementAt(dynamicItem.Row).Count >= dynamicItem.Width ? dynamicItem.Row : -1) " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupDynamicItems,The length of the statement  "                        var startColumn = (vRowsConfirmed > 0) ? vItemColumn : (dynamicItem.Col > -1) ? dynamicItem.Col : openGrid.ElementAt(row).First(); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,AddDynamicStepList,The length of the statement  "                    else if (vStep is DynamicLoop vkeyLoop) //this is last because all types are XmlDynamicKey' but we only want to go deeper if we hit a Loop flag " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The length of the statement  "                    vText = vLabel.Substring(vLabel.IndexOf("{Resource:")' vLabel.IndexOf("}"' vLabel.IndexOf("{Resource:")) - vLabel.IndexOf("{Resource:") + 1); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The length of the statement  "                    vText = vLabel.Substring(vLabel.IndexOf("{Setting:")' vLabel.IndexOf("}"' vLabel.IndexOf("{Setting:")) - vLabel.IndexOf("{Setting:") + 1); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,AddPluginKey,The length of the statement  "                // FIXME: Saving the XML of the xmlKey itself probably is not the best option. It is done this way to avoid messing with " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/dynamickeyboard.xaml"' System.UriKind.Relative); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/dynamickeyboardselector.xaml"' System.UriKind.Relative); " is 146.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Minimised,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Minimised.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/minimised.xaml"' System.UriKind.Relative); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Mouse,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Mouse.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/mouse.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,WebBrowsing,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\WebBrowsing.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/webbrowsing.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,SizeAndPosition,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\SizeAndPosition.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/sizeandposition.xaml"' System.UriKind.Relative); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Menu,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Menu.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/menu.xaml"' System.UriKind.Relative); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Diacritics3,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Diacritics3.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/diacritics3.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Diacritics2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Diacritics2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/diacritics2.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Diacritics1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Diacritics1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/diacritics1.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Currencies2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Currencies2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/currencies2.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,CommuniKate,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\CommuniKate.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/communikate.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,NumericAndSymbols1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\NumericAndSymbols1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/numericandsymbols1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Currencies1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\Currencies1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/currencies1.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,PhysicalKeys,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\PhysicalKeys.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/physicalkeys.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,NumericAndSymbols3,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\NumericAndSymbols3.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/numericandsymbols3.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,YesNoQuestion,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\YesNoQuestion.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/yesnoquestion.xaml"' System.UriKind.Relative); " is 136.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,NumericAndSymbols2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\NumericAndSymbols2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/numericandsymbols2.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,ConversationNumericAndSymbols,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\ConversationNumericAndSymbols.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/conversationnumericandsymbols.xaml"' System.UriKind.Relative); " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Czech,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Czech\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/czech/alpha1.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Czech,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Czech\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/czech/conversationalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Danish,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Danish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/danish/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Danish,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Danish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/danish/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hungarian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hungarian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hungarian/alpha1.xaml"' System.UriKind.Relative); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hungarian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hungarian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hungarian/conversationalpha1.xaml"' System.UriKind.Relative); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,Alpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\Alpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/alpha2.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,ConversationAlpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\ConversationAlpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/conversationalpha2.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,ConversationNumericAndSymbols,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\ConversationNumericAndSymbols.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/conversationnumericandsymbols.xaml"' System.UriKind.Relative); " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,NumericAndSymbols1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\NumericAndSymbols1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/numericandsymbols1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,NumericAndSymbols2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\NumericAndSymbols2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/numericandsymbols2.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Persian,NumericAndSymbols3,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Persian\NumericAndSymbols3.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/persian/numericandsymbols3.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,Alpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\Alpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/alpha2.xaml"' System.UriKind.Relative); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/alpha1.xaml"' System.UriKind.Relative); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,ConversationAlpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\ConversationAlpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/conversationalpha2.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/conversationalpha1.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,ConversationNumericAndSymbols,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\ConversationNumericAndSymbols.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/conversationnumericandsymbols.xaml"' System.UriKind.Relative); " is 150.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,NumericAndSymbols1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\NumericAndSymbols1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/numericandsymbols1.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,NumericAndSymbols2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\NumericAndSymbols2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/numericandsymbols2.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Urdu,NumericAndSymbols3,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Urdu\NumericAndSymbols3.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/urdu/numericandsymbols3.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,AlphabeticalAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\English\AlphabeticalAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/alphabeticalalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,AlphabeticalConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\English\AlphabeticalConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/alphabeticalconversationalpha1.xaml" + " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,SimplifiedConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\English\SimplifiedConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/simplifiedconversationalpha1.xaml"' System.UriKind.Relative); " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,SimplifiedAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\English\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\English\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\English\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.French,CanadaAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\French\CanadaAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/french/canadaalpha1.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.French,CanadaConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\French\CanadaConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/french/canadaconversationalpha1.xaml"' System.UriKind.Relative); " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.French,FranceAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\French\FranceAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/french/francealpha1.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.French,FranceConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\French\FranceConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/french/franceconversationalpha1.xaml"' System.UriKind.Relative); " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Georgian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Georgian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/georgian/alpha1.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Georgian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Georgian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/georgian/conversationalpha1.xaml"' System.UriKind.Relative); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Georgian,SimplifiedAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Georgian\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/georgian/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Georgian,SimplifiedConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Georgian\SimplifiedConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/georgian/simplifiedconversationalpha1.xaml"' System.UriKind.Relative); " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,AlphabeticalConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\German\AlphabeticalConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/alphabeticalconversationalpha1.xaml"' System.UriKind.Relative); " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,SimplifiedAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\German\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,AlphabeticalAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\German\AlphabeticalAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/alphabeticalalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,SimplifiedConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\German\SimplifiedConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/simplifiedconversationalpha1.xaml"' System.UriKind.Relative); " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\German\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\German\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Japanese,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Japanese\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/japanese/alpha1.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Japanese,Alpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Japanese\Alpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/japanese/alpha2.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Japanese,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Japanese\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/japanese/conversationalpha1.xaml"' System.UriKind.Relative); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Japanese,ConversationAlpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Japanese\ConversationAlpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/japanese/conversationalpha2.xaml"' System.UriKind.Relative); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Japanese,SimplifiedAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Japanese\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/japanese/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Japanese,SimplifiedAlpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Japanese\SimplifiedAlpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/japanese/simplifiedalpha2.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,Alpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Korean\Alpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/alpha2.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Korean\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,ConversationAlpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Korean\ConversationAlpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/conversationalpha2.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Korean\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Polish,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Polish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/polish/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Polish,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Polish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/polish/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Portuguese,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Portuguese\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/portuguese/alpha1.xaml"' System.UriKind.Relative); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Portuguese,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Portuguese\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/portuguese/conversationalpha1.xaml"' System.UriKind.Relative); " is 145.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Serbian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Serbian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/serbian/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Serbian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Serbian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/serbian/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovak,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Slovak\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovak/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovak,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Slovak\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovak/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovenian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Slovenian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovenian/alpha1.xaml"' System.UriKind.Relative); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovenian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Slovenian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovenian/conversationalpha1.xaml"' System.UriKind.Relative); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Croatian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Croatian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/croatian/alpha1.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Croatian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Croatian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/croatian/conversationalpha1.xaml"' System.UriKind.Relative); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,BelgiumAlpha,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Dutch\BelgiumAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/belgiumalpha1.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,NetherlandsAlpha,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Dutch\NetherlandsAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/netherlandsalpha1.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,BelgiumConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Dutch\BelgiumConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/belgiumconversationalpha1.xaml"' System.UriKind.Relative); " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,NetherlandsConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Dutch\NetherlandsConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/netherlandsconversationalpha1.xaml"' System.UriKind.Relative); " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Italian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Italian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/italian/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Italian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Italian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/italian/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Turkish,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Turkish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/turkish/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Turkish,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Turkish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/turkish/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Turkish,SimplifiedAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Turkish\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/turkish/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Turkish,SimplifiedConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Turkish\SimplifiedConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/turkish/simplifiedconversationalpha1.xaml"' System.UriKind.Relative); " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Greek,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Greek\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/greek/alpha1.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Greek,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Greek\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/greek/conversationalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Russian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Russian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/russian/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Russian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Russian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/russian/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Spanish,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Spanish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/spanish/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Spanish,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Spanish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/spanish/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Ukrainian,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Ukrainian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/ukrainian/alpha1.xaml"' System.UriKind.Relative); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Ukrainian,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Ukrainian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/ukrainian/conversationalpha1.xaml"' System.UriKind.Relative); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Management,DictionaryView,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Management\DictionaryView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/management/dictionaryview.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Management,FeaturesView,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Management\FeaturesView.xaml.cs,btnFindCommuniKateTopPageLocation_Click,The length of the statement  "                Filter = "Open Board Format (*.OBF or *.OBZ)|*.obf; *.obz|Open Board Format file (*.OBF)|*.obf|Open Board Format archive (*.OBZ)|*.obz" " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Management,FeaturesView,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Management\FeaturesView.xaml.cs,RefreshAvailablePlugins,The length of the statement  "            // TODO: how should this be done with MVVM properly? we don't have property change notifications for the read-only list of plugins... " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Management,FeaturesView,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Management\FeaturesView.xaml.cs,RefreshAvailablePlugins,The length of the statement  "            ((CollectionViewSource)this.Resources["AvailablePluginsCollectionViewSource"]).Source = PluginEngine.GetAllAvailablePlugins();  " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,LookToScrollOverlayWindow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Windows\LookToScrollOverlayWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/windows/looktoscrolloverlaywindow.xaml"' System.UriKind.Relative); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Windows\MainWindow.xaml.cs,ToggleManualMode,The length of the statement  "            if (MessageBox.Show(Properties.Resources.MANUAL_MODE_MESSAGE' Properties.Resources.MANUAL_MODE' MessageBoxButton.YesNo) == MessageBoxResult.Yes) " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Windows\MainWindow.xaml.cs,Quit,The length of the statement  "            if (MessageBox.Show(Properties.Resources.QUIT_MESSAGE' Properties.Resources.QUIT' MessageBoxButton.YesNo) == MessageBoxResult.Yes) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Windows\MainWindow.xaml.cs,Restart,The length of the statement  "            if (MessageBox.Show(Properties.Resources.REFRESH_MESSAGE' Properties.Resources.RESTART' MessageBoxButton.YesNo) == MessageBoxResult.Yes) " is 136.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Finnish,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Finnish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/finnish/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Finnish,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Finnish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/finnish/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hebrew,Alpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hebrew\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hebrew/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hebrew,Alpha2,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hebrew\Alpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hebrew/alpha2.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hebrew,ConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hebrew\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hebrew/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hebrew,SimplifiedAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hebrew\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hebrew/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Hebrew,SimplifiedConversationAlpha1,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Hebrew\SimplifiedConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/hebrew/simplifiedconversationalpha1.xaml"' System.UriKind.Relative); " is 151.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The conditional expression  "ignoreSingleTrailingSpace                  && input.Length >= 2                  && input[input.Length - 1].ToCharCategory() == CharCategories.Space                  && input[input.Length - 2].ToCharCategory() == CharCategories.LetterOrDigitOrSymbolOrPunctuation"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,InProgressWord,The conditional expression  "!string.IsNullOrWhiteSpace(input)                  && cursorIndex > 0                  && cursorIndex <= input.Length                  && !char.IsWhiteSpace(input[cursorIndex-1])"  is complex.
Complex Conditional,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,PresageInstallationProblemsDetected,The conditional expression  "(osBitness == "64-Bit" && presagePath != @"C:\Program Files (x86)\presage")                      || (osBitness == "32-Bit" && presagePath != @"C:\Program Files\presage")"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The conditional expression  "MultiKeySelectionSupported                                  && keyStateService.KeyEnabledStates[KeyValues.MultiKeySelectionIsOnKey] //It is possible for MultiKeySelectionIsOnKey to be down/locked down even though it is disabled - check for this                                  && keyStateService.KeyDownStates[KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown()                                  && triggerSignal.PointAndKeyValue.KeyValue != null                                  && KeyValues.MultiKeySelectionKeys.Contains(triggerSignal.PointAndKeyValue.KeyValue)                                  && !KeyValues.CombiningKeys.Any(key => keyStateService.KeyDownStates[key].Value.IsDownOrLockedDown())"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The conditional expression  "(triggerSignal.Signal >= 1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextHigh)                      || (triggerSignal.Signal <= -1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextLow)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MyGazePointService.cs,SampleCallback,The conditional expression  "!double.IsNaN(leftX) && leftX > 0                      && !double.IsNaN(leftY) && leftY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MyGazePointService.cs,SampleCallback,The conditional expression  "!double.IsNaN(rightX) && rightX > 0                      && !double.IsNaN(rightY) && rightY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\MyGazePointService.cs,EventCallback,The conditional expression  "pointEvent != null                  && !double.IsNaN(eventData.positionX)                  && eventData.positionX > 0                  && !double.IsNaN(eventData.positionY)                  && eventData.positionY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The conditional expression  "floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessText,The conditional expression  "new StringInfo(lastProcessedText).LengthInTextElements == 1                       && new StringInfo(newText).LengthInTextElements == 1                       && !lastProcessedTextWasSuggestion                       && !(keyStateService.KeyDownStates[KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown() && char.IsLetter(newText.First()))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,AdjustInProgressWord,The conditional expression  "result[index - 1].UnicodeCodePointRange() == UnicodeCodePointRanges.HangulVowel //Previous char is a Hangul vowel                              && (result.Length <= index + 1 //There isn't a char after this one                              || (result.Length > index + 1 && result[index + 1].UnicodeCodePointRange() != UnicodeCodePointRanges.HangulVowel))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,SwapLastTextChangeForSuggestion,The conditional expression  "!Settings.Default.SuggestNextWords || !lastProcessedTextWasSuggestion && !string.IsNullOrEmpty(inProgressWord) && Char.IsLetterOrDigit(inProgressWord.Last())"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,SwapText,The conditional expression  "!string.IsNullOrEmpty(textToSwapOut)                  && !string.IsNullOrEmpty(textToSwapIn)                  && Text != null                  && Text.Length >= textToSwapOut.Length"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,AutoAddSpace,The conditional expression  "Settings.Default.AutoAddSpace                  && Text != null                  && Text.Any()                  && !suppressNextAutoSpace"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,TheEyeTribePointService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\TheEyeTribePointService.cs,OnGazeUpdate,The conditional expression  "GazeManager.Instance.IsCalibrated                  && pointEvent != null                  && !double.IsNaN(data.SmoothedCoordinates.X)                  && !double.IsNaN(data.SmoothedCoordinates.Y)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The conditional expression  "BlankButtonCount == 1 && !BackButtonAdded && Row < CKPageOBF.grid.rows && Column < CKPageOBF.grid.columns"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,TranslateMagnifiedSelectionPoint,The conditional expression  "imagePoint.X >= 0 && imagePoint.X < imageWidth                  && imagePoint.Y >= 0 && imagePoint.Y < imageHeight"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CursorPopup.cs,CalculatePosition,The conditional expression  "IsOpen                  && pointCopy.X >= screenTopLeft.X                  && pointCopy.X <= screenBottomRight.X                  && pointCopy.Y >= screenTopLeft.Y                  && pointCopy.Y <= screenBottomRight.Y"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The conditional expression  "canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\TextBlockScaler.cs,CalculateTextBlockFontSize,The conditional expression  "fontSize > 0                     && IsTextTrimmedAtThisFontSize(fontSize)                     && (MinFontSize == null || fontSize > MinFontSize.Value)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,TraverseAllKeysAndBuildPointToKeyValueMap,The conditional expression  "key.IsVisible                      && PresentationSource.FromVisual(key) != null                      && key.Value != null                      && key.Value.HasContent()"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The conditional expression  "!string.IsNullOrWhiteSpace(windowState)                  || !string.IsNullOrWhiteSpace(position)                  || !string.IsNullOrWhiteSpace(dockSize)                  || !string.IsNullOrWhiteSpace(width)                  || !string.IsNullOrWhiteSpace(height)                  || !string.IsNullOrWhiteSpace(horizontalOffset)                  || !string.IsNullOrWhiteSpace(verticalOffset)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The conditional expression  "!string.IsNullOrWhiteSpace(width)                      && !(double.TryParse(width.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The conditional expression  "!string.IsNullOrWhiteSpace(height)                      && !(double.TryParse(height.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The conditional expression  "!string.IsNullOrWhiteSpace(horizontalOffset)                      && !(double.TryParse(horizontalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\DynamicKeyboard.cs,SetupKeyboardLayout,The conditional expression  "!string.IsNullOrWhiteSpace(verticalOffset)                      && !(double.TryParse(verticalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The conditional expression  "notificationWithServicesAndState == null                      || notificationWithServicesAndState.AudioService == null                      || notificationWithServicesAndState.DictionaryService == null                      || notificationWithServicesAndState.WindowManipulationService == null"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ValueConverters,EnumMapper,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\EnumMapper.cs,Convert,The conditional expression  "value == null || EnumType == null || !EnumType.IsEnum || MappedValues == null"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,ShouldUpdateLookToScroll,The conditional expression  "!keyStateService.KeyDownStates[KeyValues.LookToScrollActiveKey].Value.IsDownOrLockedDown() ||                  keyStateService.KeyDownStates[KeyValues.SleepKey].Value.IsDownOrLockedDown() ||                  IsPointInsideMainWindow(position) ||                  choosingLookToScrollBoundsTarget ||                  !lookToScrollLastUpdate.HasValue"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,SetupInputServiceEventHandlers,The conditional expression  "SelectionMode == SelectionModes.Key && (singleKeyValue != null || (multiKeySelection != null && multiKeySelection.Any()))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The conditional expression  "!string.IsNullOrWhiteSpace(keyboard.WindowState) && Enum.TryParse(keyboard.WindowState' out validWindowState)                  && validWindowState != WindowStates.Docked && validWindowState != WindowStates.Floating && validWindowState != WindowStates.Maximised"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The conditional expression  "!string.IsNullOrWhiteSpace(keyboard.Width) &&                  !(double.TryParse(keyboard.Width.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The conditional expression  "!string.IsNullOrWhiteSpace(keyboard.Height) &&                  !(double.TryParse(keyboard.Height.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The conditional expression  "!string.IsNullOrWhiteSpace(keyboard.HorizontalOffset) &&                  !(double.TryParse(keyboard.HorizontalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,ValidateKeyboard,The conditional expression  "!string.IsNullOrWhiteSpace(keyboard.VerticalOffset) &&                  !(double.TryParse(keyboard.VerticalOffset.Replace("%"' "")' out validNumber) && validNumber >= -9999 && validNumber <= 9999)"  is complex.
Empty Catch Block,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,HandleCorruptSettings,The method has an empty catch block.
Empty Catch Block,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,ProcessChangeKeyboardKeyValue,The method has an empty catch block.
Empty Catch Block,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\ManagementViewModel.cs,Ok,The method has an empty catch block.
Magic Number,JuliusSweetland.OptiKey.Extensions,RectExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\RectExtensions.cs,CalculateCentre,The following statement contains a magic number: return new Point              {                  X = (rect.Left + rect.Right) / 2'                  Y = (rect.Top + rect.Bottom) / 2'              };
Magic Number,JuliusSweetland.OptiKey.Extensions,RectExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\RectExtensions.cs,CalculateCentre,The following statement contains a magic number: return new Point              {                  X = (rect.Left + rect.Right) / 2'                  Y = (rect.Top + rect.Bottom) / 2'              };
Magic Number,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The following statement contains a magic number: ignoreSingleTrailingSpace                  && input.Length >= 2                  && input[input.Length - 1].ToCharCategory() == CharCategories.Space                  && input[input.Length - 2].ToCharCategory() == CharCategories.LetterOrDigitOrSymbolOrPunctuation
Magic Number,JuliusSweetland.OptiKey.Extensions,StringExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The following statement contains a magic number: ignoreSingleTrailingSpace                  && input.Length >= 2                  && input[input.Length - 1].ToCharCategory() == CharCategories.Space                  && input[input.Length - 2].ToCharCategory() == CharCategories.LetterOrDigitOrSymbolOrPunctuation
Magic Number,JuliusSweetland.OptiKey.Models,XmlSuggestionCol,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionCol.xaml.cs,XmlSuggestionCol,The following statement contains a magic number: Loaded += (sender' args) => NumberOfSuggestionsDisplayed = 4;
Magic Number,JuliusSweetland.OptiKey.Models,XmlSuggestionRow,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlSuggestionRow.xaml.cs,XmlSuggestionRow,The following statement contains a magic number: Loaded += (sender' args) => NumberOfSuggestionsDisplayed = 4;
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: int hash = 13;
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 127) ^ (Key != null ? Key.GetHashCode() : 0);
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 127) ^ (Type.GetHashCode());
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 127) ^ (DurationMs.GetHashCode());
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 389) ^ (KeyboardFilename != null ? KeyboardFilename.GetHashCode() : 0);
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 7) ^ BuiltInKeyboard.GetHashCode();
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 13) ^ Replace.GetHashCode();
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: int hash = 13;
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (Name != null ? Name.GetHashCode() : 0);
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ KeyValue.GetHashCode();
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode() : 0);
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: int hash = 13;
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode() : 0);
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (String != null ? String.GetHashCode() : 0);
Magic Number,JuliusSweetland.OptiKey.Native,PInvoke,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Native\PInvoke.cs,GetWindowLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,JuliusSweetland.OptiKey.Services.Audio,SoundPlayerEx,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\Audio\SoundPlayerEx.cs,PlayAsync,The following statement contains a magic number: await Task.Run(() =>                  {                      try                      {                          double lenMs = Sound.GetSoundLength(SoundLocation);                          DateTime stopAt = DateTime.Now.AddMilliseconds(lenMs);                          Log.DebugFormat("Sound ends at {0}."' stopAt);                          this.Play();                          while (DateTime.Now < stopAt)                          {                              ct.ThrowIfCancellationRequested();                              //The delay helps reduce processor usage while "spinning"                              Task.Delay(10).Wait();                          }                      }                      catch (OperationCanceledException)                      {                          base.Stop();                          Log.DebugFormat("Sound manually stoped. Generating a new CancellationTokenSource");                          // Create new CancellationTokenSource                          tokenSource.Dispose();                          tokenSource = new CancellationTokenSource();                          ct = tokenSource.Token;                      }                  }' ct);
Magic Number,JuliusSweetland.OptiKey.Services.Suggestions,NGramAutoComplete,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\Suggestions\NGramAutoComplete.cs,CalculateScore,The following statement contains a magic number: return 2 * numberOfMatches / (numberOfRootNGrams + numberOfEntryNGrams);
Magic Number,JuliusSweetland.OptiKey.Services.Suggestions,PresageSuggestions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\Suggestions\PresageSuggestions.cs,callback_get_past_stream,The following statement contains a magic number: int l = root.Length > 500 ? root.Length - 500 : 0;
Magic Number,JuliusSweetland.OptiKey.Services.Suggestions,PresageSuggestions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\Suggestions\PresageSuggestions.cs,callback_get_past_stream,The following statement contains a magic number: int l = root.Length > 500 ? root.Length - 500 : 0;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,AudioService,The following statement contains a magic number: Bass.BASS_Init(-1' 44100' BASSInit.BASS_DEVICE_DEFAULT' IntPtr.Zero);
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,GetAvailableMaryTTSVoices,The following statement contains a magic number: request.MaximumAutomaticRedirections = 4;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,GetAvailableMaryTTSVoices,The following statement contains a magic number: request.MaximumResponseHeadersLength = 4;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,PlaySound,The following statement contains a magic number: Bass.BASS_ChannelSetAttribute(stream' BASSAttribute.BASS_ATTRIB_VOL' (volume/100f));
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = (maryTTSRate + 10.0f) / 20.0f * 3.0f;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = (maryTTSRate + 10.0f) / 20.0f * 3.0f;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = (maryTTSRate + 10.0f) / 20.0f * 3.0f;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = maryTTSRate < 0.1f ? 0.1f                  : maryTTSRate > 3.0f ? 3.0f : maryTTSRate;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = maryTTSRate < 0.1f ? 0.1f                  : maryTTSRate > 3.0f ? 3.0f : maryTTSRate;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = maryTTSRate < 0.1f ? 0.1f                  : maryTTSRate > 3.0f ? 3.0f : maryTTSRate;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSRate = maryTTSRate < 0.1f ? 0.1f                  : maryTTSRate > 3.0f ? 3.0f : maryTTSRate;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\AudioService.cs,SpeakWithMaryTTS,The following statement contains a magic number: maryTTSVolume = maryTTSVolume / 100.0f * 1.0f;
Magic Number,JuliusSweetland.OptiKey.Services,DictionaryService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\DictionaryService.cs,LoadUserDictionaryFromFile,The following statement contains a magic number: entryWithUsageCount.Length == 2
Magic Number,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: (selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1
Magic Number,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: (selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1
Magic Number,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: (selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1
Magic Number,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: (selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1
Magic Number,JuliusSweetland.OptiKey.Services,IrisbondDuoCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\IrisbondDuoCalibrationService.cs,Calibrate,The following statement contains a magic number: PInvoke.startCalibration(9);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity += increment ? 0.1 : -0.1;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity += increment ? 0.1 : -0.1;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity = opacity.CoerceToLowerLimit(0.1);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newWidth = string.IsNullOrWhiteSpace(inWidth) || !double.TryParse(inWidth.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Width                      : dockThicknessInPx.Width / Graphics.DipScalingFactorX //Scale to dp                  : inWidth.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Width                      : inWidth.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Width                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorX                  : validNumber / Graphics.DipScalingFactorX + screenBoundsInDp.Width;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newWidth = string.IsNullOrWhiteSpace(inWidth) || !double.TryParse(inWidth.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Width                      : dockThicknessInPx.Width / Graphics.DipScalingFactorX //Scale to dp                  : inWidth.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Width                      : inWidth.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Width                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorX                  : validNumber / Graphics.DipScalingFactorX + screenBoundsInDp.Width;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newWidth = string.IsNullOrWhiteSpace(inWidth) || !double.TryParse(inWidth.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Width                      : dockThicknessInPx.Width / Graphics.DipScalingFactorX //Scale to dp                  : inWidth.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Width                      : inWidth.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Width                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorX                  : validNumber / Graphics.DipScalingFactorX + screenBoundsInDp.Width;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newWidth = string.IsNullOrWhiteSpace(inWidth) || !double.TryParse(inWidth.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Width                      : dockThicknessInPx.Width / Graphics.DipScalingFactorX //Scale to dp                  : inWidth.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Width                      : inWidth.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Width                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorX                  : validNumber / Graphics.DipScalingFactorX + screenBoundsInDp.Width;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newHeight = string.IsNullOrWhiteSpace(inHeight) || !double.TryParse(inHeight.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Height                      : dockThicknessInPx.Height / Graphics.DipScalingFactorY //Scale to dp                  : inHeight.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Height                      : inHeight.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Height                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorY                  : validNumber / Graphics.DipScalingFactorY + screenBoundsInDp.Height;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newHeight = string.IsNullOrWhiteSpace(inHeight) || !double.TryParse(inHeight.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Height                      : dockThicknessInPx.Height / Graphics.DipScalingFactorY //Scale to dp                  : inHeight.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Height                      : inHeight.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Height                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorY                  : validNumber / Graphics.DipScalingFactorY + screenBoundsInDp.Height;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newHeight = string.IsNullOrWhiteSpace(inHeight) || !double.TryParse(inHeight.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Height                      : dockThicknessInPx.Height / Graphics.DipScalingFactorY //Scale to dp                  : inHeight.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Height                      : inHeight.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Height                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorY                  : validNumber / Graphics.DipScalingFactorY + screenBoundsInDp.Height;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newHeight = string.IsNullOrWhiteSpace(inHeight) || !double.TryParse(inHeight.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? newWindowState == WindowStates.Floating                      ? getFloatingSizeAndPosition().Height                      : dockThicknessInPx.Height / Graphics.DipScalingFactorY //Scale to dp                  : inHeight.Contains("%") && validNumber > 0                      ? (validNumber / 100d) * screenBoundsInDp.Height                      : inHeight.Contains("%")                          ? (validNumber / 100d + 1) * screenBoundsInDp.Height                          : validNumber > 0                              ? validNumber / Graphics.DipScalingFactorY                  : validNumber / Graphics.DipScalingFactorY + screenBoundsInDp.Height;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var horizontalOffset = string.IsNullOrWhiteSpace(inHorizontalOffset) || !double.TryParse(inHorizontalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? screenBoundsInDp.Left                  : inHorizontalOffset.Contains("%")                      ? validNumber / 100d * screenBoundsInDp.Width                  : validNumber / Graphics.DipScalingFactorX;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var horizontalOffset = string.IsNullOrWhiteSpace(inHorizontalOffset) || !double.TryParse(inHorizontalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? screenBoundsInDp.Left                  : inHorizontalOffset.Contains("%")                      ? validNumber / 100d * screenBoundsInDp.Width                  : validNumber / Graphics.DipScalingFactorX;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var horizontalOffset = string.IsNullOrWhiteSpace(inHorizontalOffset) || !double.TryParse(inHorizontalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? screenBoundsInDp.Left                  : inHorizontalOffset.Contains("%")                      ? validNumber / 100d * screenBoundsInDp.Width                  : validNumber / Graphics.DipScalingFactorX;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var verticalOffset = string.IsNullOrWhiteSpace(inVerticalOffset) || !double.TryParse(inVerticalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? screenBoundsInDp.Top                  : inVerticalOffset.Contains("%")                      ? validNumber / 100d * screenBoundsInDp.Height                  : validNumber / Graphics.DipScalingFactorY;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var verticalOffset = string.IsNullOrWhiteSpace(inVerticalOffset) || !double.TryParse(inVerticalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? screenBoundsInDp.Top                  : inVerticalOffset.Contains("%")                      ? validNumber / 100d * screenBoundsInDp.Height                  : validNumber / Graphics.DipScalingFactorY;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var verticalOffset = string.IsNullOrWhiteSpace(inVerticalOffset) || !double.TryParse(inVerticalOffset.Replace("%"' "")' out validNumber) || validNumber < -9999 || validNumber > 9999                  ? screenBoundsInDp.Top                  : inVerticalOffset.Contains("%")                      ? validNumber / 100d * screenBoundsInDp.Height                  : validNumber / Graphics.DipScalingFactorY;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newFullDockThicknessPercent = (newDockPosition == DockEdges.Top || newDockPosition == DockEdges.Bottom)                      ? (100 * newHeight / screenBoundsInDp.Height) : (100 * newWidth / screenBoundsInDp.Width);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: var newFullDockThicknessPercent = (newDockPosition == DockEdges.Top || newDockPosition == DockEdges.Bottom)                      ? (100 * newHeight / screenBoundsInDp.Height) : (100 * newWidth / screenBoundsInDp.Width);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,OverridePersistedState,The following statement contains a magic number: saveCollapsedDockThicknessAsPercentageOfFullDockThickness(100 * newFullDockThicknessPercent / getFullDockThicknessAsPercentageOfScreen());
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetOpacity,The following statement contains a magic number: opacity = opacity.CoerceToLowerLimit(0.1);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,The following statement contains a magic number: double thicknessAsPercentage = size == DockSizes.Full                      ? getFullDockThicknessAsPercentageOfScreen() / 100                      : (getFullDockThicknessAsPercentageOfScreen() *                         getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,The following statement contains a magic number: double thicknessAsPercentage = size == DockSizes.Full                      ? getFullDockThicknessAsPercentageOfScreen() / 100                      : (getFullDockThicknessAsPercentageOfScreen() *                         getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: var thicknessAsPercentage = (getFullDockThicknessAsPercentageOfScreen() * getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: fullDockThicknessAsPercentageOfScreen = 50;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                      || fullDockThicknessAsPercentageOfScreen >= 100
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: collapsedDockThicknessAsPercentageOfFullDockThickness = 20;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                      || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                            if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)' plus the last decomposed character (so the last character is decomposed and the prefix of the word is recombined if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3All;                      break;                  case FunctionKeys.SimplifiedKeyboardAlphaGroup4All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup5All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup5All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup6All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup6All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup7All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup7All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup8All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup8All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup9All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup9All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup10All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup10All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericAll:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericAll;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardGermanUmlaut:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.GermanUmlaut;                      break;                    case FunctionKeys.SimplifiedKeyboardHome:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.ToggleCaseOfPreviousCharacter:                      {                          var inProgressWord = Text == null ? null : Text.InProgressWord(Text.Length);                          if (inProgressWord != null)                          {                              //Attempt to break-apart/decompose in-progress word using normalisation                              var decomposedInProgressWord = inProgressWord.Decompose();                              if (decomposedInProgressWord != inProgressWord)                              {                                  Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                              }                                //Remove in-progress word from Text                              Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                //Add back the decomposed in-progress word' with the last character (potentially) cased differently (lower->upper or vice versa)' composed again (to recombine if possible)                              var finalCharacter = decomposedInProgressWord.Last();                              var reCasedFinalCharacter = finalCharacter.ToggleCase();                              if (finalCharacter != reCasedFinalCharacter)                              {                                  Log.DebugFormat("Last character of in-progress word has had its case toggled. It will be converted from '{0}' to '{1}'."' finalCharacter' reCasedFinalCharacter);                              }                              var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1)' reCasedFinalCharacter).Compose();                              Text = string.Concat(Text' newInProgressWord);                                //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                              for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                              {                                  PublishKeyPress(FunctionKeys.BackOne);                              }                                foreach (var c in newInProgressWord)                              {                                  PublishKeyPress(c);                              }                                dictionaryService.DecrementEntryUsageCount(inProgressWord); //Decrement the original in-progress word                              dictionaryService.IncrementEntryUsageCount(newInProgressWord); //And increment the new in-progress word                                GenerateSuggestions(false);                              lastProcessedTextWasSuggestion = false;                          }                      }                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                            if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)' plus the last decomposed character (so the last character is decomposed and the prefix of the word is recombined if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3All;                      break;                  case FunctionKeys.SimplifiedKeyboardAlphaGroup4All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup5All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup5All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup6All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup6All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup7All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup7All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup8All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup8All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup9All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup9All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup10All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup10All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericAll:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericAll;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardGermanUmlaut:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.GermanUmlaut;                      break;                    case FunctionKeys.SimplifiedKeyboardHome:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.ToggleCaseOfPreviousCharacter:                      {                          var inProgressWord = Text == null ? null : Text.InProgressWord(Text.Length);                          if (inProgressWord != null)                          {                              //Attempt to break-apart/decompose in-progress word using normalisation                              var decomposedInProgressWord = inProgressWord.Decompose();                              if (decomposedInProgressWord != inProgressWord)                              {                                  Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                              }                                //Remove in-progress word from Text                              Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                //Add back the decomposed in-progress word' with the last character (potentially) cased differently (lower->upper or vice versa)' composed again (to recombine if possible)                              var finalCharacter = decomposedInProgressWord.Last();                              var reCasedFinalCharacter = finalCharacter.ToggleCase();                              if (finalCharacter != reCasedFinalCharacter)                              {                                  Log.DebugFormat("Last character of in-progress word has had its case toggled. It will be converted from '{0}' to '{1}'."' finalCharacter' reCasedFinalCharacter);                              }                              var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1)' reCasedFinalCharacter).Compose();                              Text = string.Concat(Text' newInProgressWord);                                //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                              for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                              {                                  PublishKeyPress(FunctionKeys.BackOne);                              }                                foreach (var c in newInProgressWord)                              {                                  PublishKeyPress(c);                              }                                dictionaryService.DecrementEntryUsageCount(inProgressWord); //Decrement the original in-progress word                              dictionaryService.IncrementEntryUsageCount(newInProgressWord); //And increment the new in-progress word                                GenerateSuggestions(false);                              lastProcessedTextWasSuggestion = false;                          }                      }                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                            if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)' plus the last decomposed character (so the last character is decomposed and the prefix of the word is recombined if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3All;                      break;                  case FunctionKeys.SimplifiedKeyboardAlphaGroup4All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup5All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup5All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup6All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup6All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup7All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup7All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup8All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup8All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup9All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup9All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup10All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup10All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericAll:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericAll;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardGermanUmlaut:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.GermanUmlaut;                      break;                    case FunctionKeys.SimplifiedKeyboardHome:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.ToggleCaseOfPreviousCharacter:                      {                          var inProgressWord = Text == null ? null : Text.InProgressWord(Text.Length);                          if (inProgressWord != null)                          {                              //Attempt to break-apart/decompose in-progress word using normalisation                              var decomposedInProgressWord = inProgressWord.Decompose();                              if (decomposedInProgressWord != inProgressWord)                              {                                  Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                              }                                //Remove in-progress word from Text                              Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                //Add back the decomposed in-progress word' with the last character (potentially) cased differently (lower->upper or vice versa)' composed again (to recombine if possible)                              var finalCharacter = decomposedInProgressWord.Last();                              var reCasedFinalCharacter = finalCharacter.ToggleCase();                              if (finalCharacter != reCasedFinalCharacter)                              {                                  Log.DebugFormat("Last character of in-progress word has had its case toggled. It will be converted from '{0}' to '{1}'."' finalCharacter' reCasedFinalCharacter);                              }                              var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1)' reCasedFinalCharacter).Compose();                              Text = string.Concat(Text' newInProgressWord);                                //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                              for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                              {                                  PublishKeyPress(FunctionKeys.BackOne);                              }                                foreach (var c in newInProgressWord)                              {                                  PublishKeyPress(c);                              }                                dictionaryService.DecrementEntryUsageCount(inProgressWord); //Decrement the original in-progress word                              dictionaryService.IncrementEntryUsageCount(newInProgressWord); //And increment the new in-progress word                                GenerateSuggestions(false);                              lastProcessedTextWasSuggestion = false;                          }                      }                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                            if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)' plus the last decomposed character (so the last character is decomposed and the prefix of the word is recombined if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3All;                      break;                  case FunctionKeys.SimplifiedKeyboardAlphaGroup4All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup5All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup5All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup6All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup6All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup7All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup7All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup8All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup8All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup9All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup9All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup10All:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup10All;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup1SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup1SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup2SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup2SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup3SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup3SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardAlphaGroup4SubGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.AlphaGroup4SubGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericAll:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericAll;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup1:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup1;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup2:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup2;                      break;                    case FunctionKeys.SimplifiedKeyboardNumericGroup3:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.NumericGroup3;                      break;                    case FunctionKeys.SimplifiedKeyboardGermanUmlaut:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.GermanUmlaut;                      break;                    case FunctionKeys.SimplifiedKeyboardHome:                      Settings.Default.SimplifiedKeyboardContext = SimplifiedKeyboardContexts.Home;                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.ToggleCaseOfPreviousCharacter:                      {                          var inProgressWord = Text == null ? null : Text.InProgressWord(Text.Length);                          if (inProgressWord != null)                          {                              //Attempt to break-apart/decompose in-progress word using normalisation                              var decomposedInProgressWord = inProgressWord.Decompose();                              if (decomposedInProgressWord != inProgressWord)                              {                                  Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                              }                                //Remove in-progress word from Text                              Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                //Add back the decomposed in-progress word' with the last character (potentially) cased differently (lower->upper or vice versa)' composed again (to recombine if possible)                              var finalCharacter = decomposedInProgressWord.Last();                              var reCasedFinalCharacter = finalCharacter.ToggleCase();                              if (finalCharacter != reCasedFinalCharacter)                              {                                  Log.DebugFormat("Last character of in-progress word has had its case toggled. It will be converted from '{0}' to '{1}'."' finalCharacter' reCasedFinalCharacter);                              }                              var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1)' reCasedFinalCharacter).Compose();                              Text = string.Concat(Text' newInProgressWord);                                //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                              for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                              {                                  PublishKeyPress(FunctionKeys.BackOne);                              }                                foreach (var c in newInProgressWord)                              {                                  PublishKeyPress(c);                              }                                dictionaryService.DecrementEntryUsageCount(inProgressWord); //Decrement the original in-progress word                              dictionaryService.IncrementEntryUsageCount(newInProgressWord); //And increment the new in-progress word                                GenerateSuggestions(false);                              lastProcessedTextWasSuggestion = false;                          }                      }                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop(                      Math.Ceiling(65535 * (point.X / Graphics.VirtualScreenWidthInPixels))'                      Math.Ceiling(65535 * (point.Y / Graphics.VirtualScreenHeightInPixels)));
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop(                      Math.Ceiling(65535 * (point.X / Graphics.VirtualScreenWidthInPixels))'                      Math.Ceiling(65535 * (point.Y / Graphics.VirtualScreenHeightInPixels)));
Magic Number,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following statement contains a magic number: calRunner.Width = 100;
Magic Number,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following statement contains a magic number: calRunner.Height = 100;
Magic Number,JuliusSweetland.OptiKey.Static,Sound,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: request.MaximumAutomaticRedirections = 4;
Magic Number,JuliusSweetland.OptiKey.Static,Sound,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: request.MaximumResponseHeadersLength = 4;
Magic Number,JuliusSweetland.OptiKey.Static,Sound,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));
Magic Number,JuliusSweetland.OptiKey.Static,Sound,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: int includesTopRow = CKPageOBF.grid.rows >= 5 ? 1 : 0;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3 * includesTopRow);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: int ButtonNo = includesTopRow * 3;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Button {0} uses image {1}."' ButtonNo + 1 - 3 * includesTopRow' image);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Button {0} uses sound {1}."' ButtonNo + 1 - 3 * includesTopRow' sound);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo + 1 - 3 * includesTopRow' path);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Button {0} has vocalization {1}."' ButtonNo + 1 - 3 * includesTopRow' text);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Button {0} has sound {1}."' ButtonNo + 1 - 3 * includesTopRow' sound);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: Log.DebugFormat("Button {0} has action {1}."' ButtonNo + 1 - 3 * includesTopRow' action);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var toastPopupWidthAsPercentage = Settings.Default.ToastNotificationHorizontalFillPercentage / 100d;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var toastPopupHeightAsPercentage = Settings.Default.ToastNotificationVerticalFillPercentage / 100d;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var distanceFromLeftBoundary = ((1d - toastPopupWidthAsPercentage) / 2d) * screenWidth;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var distanceFromTopBoundary = ((1d - toastPopupHeightAsPercentage) / 2d) * screenHeight;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,AnimateTarget,The following statement contains a magic number: var introAnimation = new DoubleAnimation(0' 1' new Duration(TimeSpan.FromSeconds(0.5))' FillBehavior.Stop);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ToastNotificationPopup.cs,AnimateTarget,The following statement contains a magic number: var outroAnimation = new DoubleAnimation(1' 0' new Duration(TimeSpan.FromSeconds(0.5))' FillBehavior.Stop)              {                  BeginTime = TimeSpan.FromSeconds(displayTimeInSeconds)              };
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,OnLoaded,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => window.LocationChanged += h'                   h => window.LocationChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.Debug("Window's LocationChanged event detected.");                      screen = window.GetScreen();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var destinationPercentage = Settings.Default.MagnifyDestinationPercentageOfScreen / 100d;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var distanceFromLeftBoundary = screenTopLeftInWpfCoords.X + ((1d - destinationPercentage) / 2d) * screenWidth;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The following statement contains a magic number: var distanceFromTopBoundary = screenTopLeftInWpfCoords.Y + ((1d - destinationPercentage) / 2d) * screenHeight;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The following statement contains a magic number: pointInWpfCoords.X - (width / 2d) < 0
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The following statement contains a magic number: distanceFromTopBoundary = screenHeight + (height / 2d);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The following statement contains a magic number: pointInWpfCoords.Y + (height / 2d) > screenHeight
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,CaptureScreenshot,The following statement contains a magic number: var magnifySourcePercentage = Settings.Default.MagnifySourcePercentageOfScreen / 100d;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,CaptureScreenshot,The following statement contains a magic number: var captureX = point.X - (captureWidth / 2d);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\MagnifyPopup.cs,CaptureScreenshot,The following statement contains a magic number: var captureY = point.Y - (captureHeight / 2d);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\CursorPopup.cs,OnLoaded,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => window.LocationChanged += h'                   h => window.LocationChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.Debug("Window's LocationChanged event detected.");                      Screen = window.GetScreen();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: SetZIndex(img' -100);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: var rect = new Int32Rect(0' 0' 3' 3);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: var rect = new Int32Rect(0' 0' 3' 3);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: int size = rect.Width * rect.Height * 4;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: wb.WritePixels(rect' pixels' rect.Width * 4' 0);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: const double sl = 0.5;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: const double l = 0.5;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 0] = rgb.B;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 1] = rgb.G;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 2] = rgb.R;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 2] = rgb.R;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 3] = 255;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 3] = 255;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels[i * 4 + 3] = 255;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var range = (Settings.Default.ProgressIndicatorResizeStartProportion - Settings.Default.ProgressIndicatorResizeEndProportion) / 100d;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: sizeFactor = (reducingValue * range) + (Settings.Default.ProgressIndicatorResizeEndProportion / 100d);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var centreX = ActualWidth / 2;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var centreY = ActualHeight / 2;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: angle >= 360
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,ComputeCartesianCoordinate,The following statement contains a magic number: double angleRad = (Math.PI / 180.0) * (angle - 90);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\ProgressIndicator.cs,ComputeCartesianCoordinate,The following statement contains a magic number: double angleRad = (Math.PI / 180.0) * (angle - 90);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,SubscribeToSizeChanges,The following statement contains a magic number: Observable.FromEventPattern<SizeChangedEventHandler' SizeChangedEventArgs>                  (h => SizeChanged += h'                  h => SizeChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(ep =>                  {                      Log.Info($"KeyboardHost SizeChanged event detected from {ep.EventArgs.PreviousSize} to {ep.EventArgs.NewSize}.");                      BuildPointToKeyMap();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowMoves,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => parentWindow.LocationChanged += h'                  h => parentWindow.LocationChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(ep =>                  {                      var window = ep.Sender as Window;                      Log.Info($"Window's LocationChanged event detected. New window left:{window?.Left}' right:{(window?.Left ?? 0) + (window?.Width ?? 0)}' top:{window?.Top}' bottom:{(window?.Top ?? 0) + (window?.Height ?? 0)}.");                      BuildPointToKeyMap();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowStateChanges,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => parentWindow.StateChanged += h'                  h => parentWindow.StateChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.Info($"Window's StateChange event detected. New state: {parentWindow.WindowState}.");                      BuildPointToKeyMap();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,Output,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Output.xaml.cs,Output,The following statement contains a magic number: Loaded += (sender' args) => NumberOfSuggestionsDisplayed = 4;
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,Voice,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\Voice.cs,Voice,The following statement contains a magic number: int displayedVoiceCount = (voices.Count < VoiceKeyCount)                  ? voices.Count // We have enough room to display keys for all the voices as well as a key for "Back".                  : VoiceKeyCount - 2;
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels.Keyboards,Voice,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Keyboards\Voice.cs,RecreateBackAndMoreKeys,The following statement contains a magic number: voiceKeys[VoiceKeyCount - 2] = new VoiceKey                  {                      Text = Resources.MORE'                      KeyValue = KeyValues.MoreKey'                  };
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateCalculateBoarderWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateCalculateBoarderWidth.cs,Convert,The following statement contains a magic number: return (double)8;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateCalculateBoarderWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateCalculateBoarderWidth.cs,Convert,The following statement contains a magic number: values == null || values.Length != 2
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateCalculateBoarderWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateCalculateBoarderWidth.cs,Convert,The following statement contains a magic number: i = 4;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateCalculateBoarderWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateCalculateBoarderWidth.cs,Convert,The following statement contains a magic number: i > 4
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateCalculateBoarderWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateCalculateBoarderWidth.cs,Convert,The following statement contains a magic number: return (double)8;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateCalculateBoarderWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateCalculateBoarderWidth.cs,Convert,The following statement contains a magic number: return (double)8/i;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateTwoColoursToForegroundBrush,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateTwoColoursToForegroundBrush.cs,Convert,The following statement contains a magic number: colourSumBackground = (colourSumBackground * Background.A + (0xFF - Background.A) * 0xFF * 3) / 0xFF;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CommuniKateBackgroundColourToForegroundBrush,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CommuniKateBackgroundColourToForegroundBrush.cs,Convert,The following statement contains a magic number: colourSum = (colourSum * Background.A + (0xFF - Background.A) * 0xFF * 3) / 0xFF;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CalculateScratchpadWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CalculateScratchpadWidth.cs,Convert,The following statement contains a magic number: values == null || values.Length != 4
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CalculateScratchpadWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CalculateScratchpadWidth.cs,Convert,The following statement contains a magic number: bool ckKeyEnabled = (bool)values[2];
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CalculateScratchpadWidth,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\CalculateScratchpadWidth.cs,Convert,The following statement contains a magic number: bool copyAllScratchpadEnabled = (bool)values[3];
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,FontSizeToFitLines,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\FontSizeToFitLines.cs,Convert,The following statement contains a magic number: var fontFamily = (FontFamily)values[2];
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,FontSizeToFitLines,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\FontSizeToFitLines.cs,Convert,The following statement contains a magic number: values != null                   && values.Count() == 3                  && values.All(v => v != DependencyProperty.UnsetValue)
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,MinimiseAndDockPositionToSymbolOrientation,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\MinimiseAndDockPositionToSymbolOrientation.cs,Convert,The following statement contains a magic number: values.Length == 2                  && values.All(v => v != DependencyProperty.UnsetValue)
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,WidthGreaterThanHeight,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\WidthGreaterThanHeight.cs,Convert,The following statement contains a magic number: values.Length == 2                  && values.All(v => v != DependencyProperty.UnsetValue)
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,LengthDividedBySpan,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\LengthDividedBySpan.cs,Convert,The following statement contains a magic number: values != null                   && values.Length == 2                  && values.All(v => v != DependencyProperty.UnsetValue)
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: var suggestionsPerPage = (int) values[2];
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: var suggestionIndex = (int) values[3];
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: values != null                  && values.Count() == 4                  && values.All(v => v != DependencyProperty.UnsetValue)
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,UpdateLookToScrollOverlayProperties,The following statement contains a magic number: var deadzone = new Rect              {                  X = centre.X - hDeadzone'                  Y = centre.Y - vDeadzone'                  Width = hDeadzone * 2'                  Height = vDeadzone * 2'              };
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,UpdateLookToScrollOverlayProperties,The following statement contains a magic number: var deadzone = new Rect              {                  X = centre.X - hDeadzone'                  Y = centre.Y - vDeadzone'                  Width = hDeadzone * 2'                  Height = vDeadzone * 2'              };
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.CommuniKate:                      if (singleKeyValue.String.Contains(":action:"))                      {                          string[] stringSeparators = new string[] { ":action:" };                          foreach (var action in singleKeyValue.String.Split(stringSeparators' StringSplitOptions.None).ToList())                          {                              Log.DebugFormat("Performing CommuniKate action: {0}."' action);                              if (action.StartsWith("board:"))                              {                                  string board = action.Substring(6);                                  switch (board)                                  {                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Alpha.");                                          Keyboard = new Alpha1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Conversation Alpha.");                                          Action conversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationConfirm":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Confirm.");                                          Action conversationConfirmBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationConfirm(conversationConfirmBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationNumericAndSymbols":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Numeric And Symbols.");                                          Action conversationNumericAndSymbolsBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Currencies.");                                          Keyboard = new Currencies1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Diacritics.");                                          Keyboard = new Diacritics1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Menu":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Menu.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Menu(() => Keyboard = new Alpha1());                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Mouse":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Mouse(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Numeric And Symbols.");                                          Keyboard = new NumericAndSymbols1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.PhysicalKeys":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          Keyboard = new PhysicalKeys();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Alpha.");                                          Keyboard = new SimplifiedAlpha(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedConversationAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Conversation Alpha.");                                          Action simplifiedConversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new SimplifiedConversationAlpha(simplifiedConversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.WebBrowsing":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Web Browsing.");                                          Keyboard = new WebBrowsing();                                          break;                                        default:                                          if (string.IsNullOrEmpty(Settings.Default.CommuniKateKeyboardCurrentContext))                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else if (Settings.Default.CommuniKateKeyboardPrevious1Context == board)                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious4Context;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else                                          {                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious1Context;                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardCurrentContext;                                          }                                            Settings.Default.CommuniKateKeyboardCurrentContext = board;                                          Log.InfoFormat("CommuniKate keyboard page changed to {0}."' board);                                          break;                                  }                              }                              else if (action.StartsWith("text:"))                              {                                  keyboardOutputService.ProcessSingleKeyText(action.Substring(5));                              }                              else if (action.StartsWith("speak:"))                              {                                  if (Settings.Default.CommuniKateSpeakSelected)                                  {                                      var speechCommuniKate = audioService.SpeakNewOrInterruptCurrentSpeech(                                          action.Substring(6)'                                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                                          Settings.Default.CommuniKateSpeakSelectedVolume'                                          Settings.Default.CommuniKateSpeakSelectedRate'                                          Settings.Default.SpeechVoice);                                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechCommuniKate ? KeyDownStates.Down : KeyDownStates.Up;                                  }                              }                              else if (action.StartsWith("sound:"))                                  audioService.PlaySound(action.Substring(6)' Settings.Default.CommuniKateSoundVolume);                              else if (action.StartsWith("action:"))                              {                                  string thisAction = action.Substring(7);                                  if (thisAction.StartsWith("+"))                                  {                                      bool changedAutoSpace = false;                                      if (Settings.Default.AutoAddSpace)                                      {                                          Settings.Default.AutoAddSpace = false;                                          changedAutoSpace = true;                                      }                                      foreach (char letter in thisAction.Substring(1))                                          keyboardOutputService.ProcessSingleKeyText(letter.ToString());                                        if (changedAutoSpace)                                          Settings.Default.AutoAddSpace = true;                                  }                                  else if (thisAction.StartsWith(":"))                                      switch (thisAction)                                      {                                          case ":space":                                              keyboardOutputService.ProcessSingleKeyText(" ");                                              break;                                          case ":home":                                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                                              Log.InfoFormat("CommuniKate keyboard page changed to home board.");                                              break;                                          case ":speak":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.Speak);                                              break;                                          case ":clear":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                                              break;                                          case ":deleteword":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackMany);                                              break;                                          case ":backspace":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackOne);                                              break;                                          case ":ext_volume_up":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeUp' 0' 0' 0);                                              break;                                          case ":ext_volume_down":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeDown' 0' 0' 0);                                              break;                                          case ":ext_volume_mute":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeMute' 0' 0' 0);                                              break;                                          case ":ext_media_next":                                              Native.PInvoke.keybd_event((byte)Keys.MediaNextTrack' 0' 0' 0);                                              break;                                          case ":ext_media_previous":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPreviousTrack' 0' 0' 0);                                              break;                                          case ":ext_media_pause":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPlayPause' 0' 0' 0);                                              break;                                          case ":ext_letters":                                              Settings.Default.UsingCommuniKateKeyboardLayout = false;                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationAlpha.");                                                  Action conversationAlphaBackAction = () =>                                                  {                                                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Alpha.");                                                  Keyboard = new Alpha1();                                              }                                              break;                                            case ":ext_numbers":                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationNumericAndSymbols(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Numeric And Symbols.");                                                  Keyboard = new NumericAndSymbols1();                                              }                                              break;                                            case ":ext_mouse":                                              if (mainWindowManipulationService.WindowState != WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new Mouse(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                      Log.Info("Maximising window.");                                                      mainWindowManipulationService.Maximise();                                                  };                                                  Keyboard = new Mouse(BackAction);                                                  Log.Info("Restoring window size.");                                                  mainWindowManipulationService.Restore();                                              }                                              break;                                          default:                                              Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                                              break;                                      }                                  else                                      Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                              }                            }                      }                        break;                    case FunctionKeys.SelectVoice:                      SelectVoice(singleKeyValue.String);                      break;                    case FunctionKeys.Plugin:                      RunPlugin_Legacy(singleKeyValue.String);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.CommuniKate:                      if (singleKeyValue.String.Contains(":action:"))                      {                          string[] stringSeparators = new string[] { ":action:" };                          foreach (var action in singleKeyValue.String.Split(stringSeparators' StringSplitOptions.None).ToList())                          {                              Log.DebugFormat("Performing CommuniKate action: {0}."' action);                              if (action.StartsWith("board:"))                              {                                  string board = action.Substring(6);                                  switch (board)                                  {                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Alpha.");                                          Keyboard = new Alpha1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Conversation Alpha.");                                          Action conversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationConfirm":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Confirm.");                                          Action conversationConfirmBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationConfirm(conversationConfirmBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationNumericAndSymbols":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Numeric And Symbols.");                                          Action conversationNumericAndSymbolsBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Currencies.");                                          Keyboard = new Currencies1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Diacritics.");                                          Keyboard = new Diacritics1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Menu":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Menu.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Menu(() => Keyboard = new Alpha1());                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Mouse":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Mouse(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Numeric And Symbols.");                                          Keyboard = new NumericAndSymbols1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.PhysicalKeys":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          Keyboard = new PhysicalKeys();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Alpha.");                                          Keyboard = new SimplifiedAlpha(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedConversationAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Conversation Alpha.");                                          Action simplifiedConversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new SimplifiedConversationAlpha(simplifiedConversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.WebBrowsing":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Web Browsing.");                                          Keyboard = new WebBrowsing();                                          break;                                        default:                                          if (string.IsNullOrEmpty(Settings.Default.CommuniKateKeyboardCurrentContext))                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else if (Settings.Default.CommuniKateKeyboardPrevious1Context == board)                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious4Context;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else                                          {                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious1Context;                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardCurrentContext;                                          }                                            Settings.Default.CommuniKateKeyboardCurrentContext = board;                                          Log.InfoFormat("CommuniKate keyboard page changed to {0}."' board);                                          break;                                  }                              }                              else if (action.StartsWith("text:"))                              {                                  keyboardOutputService.ProcessSingleKeyText(action.Substring(5));                              }                              else if (action.StartsWith("speak:"))                              {                                  if (Settings.Default.CommuniKateSpeakSelected)                                  {                                      var speechCommuniKate = audioService.SpeakNewOrInterruptCurrentSpeech(                                          action.Substring(6)'                                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                                          Settings.Default.CommuniKateSpeakSelectedVolume'                                          Settings.Default.CommuniKateSpeakSelectedRate'                                          Settings.Default.SpeechVoice);                                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechCommuniKate ? KeyDownStates.Down : KeyDownStates.Up;                                  }                              }                              else if (action.StartsWith("sound:"))                                  audioService.PlaySound(action.Substring(6)' Settings.Default.CommuniKateSoundVolume);                              else if (action.StartsWith("action:"))                              {                                  string thisAction = action.Substring(7);                                  if (thisAction.StartsWith("+"))                                  {                                      bool changedAutoSpace = false;                                      if (Settings.Default.AutoAddSpace)                                      {                                          Settings.Default.AutoAddSpace = false;                                          changedAutoSpace = true;                                      }                                      foreach (char letter in thisAction.Substring(1))                                          keyboardOutputService.ProcessSingleKeyText(letter.ToString());                                        if (changedAutoSpace)                                          Settings.Default.AutoAddSpace = true;                                  }                                  else if (thisAction.StartsWith(":"))                                      switch (thisAction)                                      {                                          case ":space":                                              keyboardOutputService.ProcessSingleKeyText(" ");                                              break;                                          case ":home":                                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                                              Log.InfoFormat("CommuniKate keyboard page changed to home board.");                                              break;                                          case ":speak":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.Speak);                                              break;                                          case ":clear":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                                              break;                                          case ":deleteword":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackMany);                                              break;                                          case ":backspace":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackOne);                                              break;                                          case ":ext_volume_up":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeUp' 0' 0' 0);                                              break;                                          case ":ext_volume_down":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeDown' 0' 0' 0);                                              break;                                          case ":ext_volume_mute":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeMute' 0' 0' 0);                                              break;                                          case ":ext_media_next":                                              Native.PInvoke.keybd_event((byte)Keys.MediaNextTrack' 0' 0' 0);                                              break;                                          case ":ext_media_previous":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPreviousTrack' 0' 0' 0);                                              break;                                          case ":ext_media_pause":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPlayPause' 0' 0' 0);                                              break;                                          case ":ext_letters":                                              Settings.Default.UsingCommuniKateKeyboardLayout = false;                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationAlpha.");                                                  Action conversationAlphaBackAction = () =>                                                  {                                                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Alpha.");                                                  Keyboard = new Alpha1();                                              }                                              break;                                            case ":ext_numbers":                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationNumericAndSymbols(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Numeric And Symbols.");                                                  Keyboard = new NumericAndSymbols1();                                              }                                              break;                                            case ":ext_mouse":                                              if (mainWindowManipulationService.WindowState != WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new Mouse(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                      Log.Info("Maximising window.");                                                      mainWindowManipulationService.Maximise();                                                  };                                                  Keyboard = new Mouse(BackAction);                                                  Log.Info("Restoring window size.");                                                  mainWindowManipulationService.Restore();                                              }                                              break;                                          default:                                              Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                                              break;                                      }                                  else                                      Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                              }                            }                      }                        break;                    case FunctionKeys.SelectVoice:                      SelectVoice(singleKeyValue.String);                      break;                    case FunctionKeys.Plugin:                      RunPlugin_Legacy(singleKeyValue.String);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.CommuniKate:                      if (singleKeyValue.String.Contains(":action:"))                      {                          string[] stringSeparators = new string[] { ":action:" };                          foreach (var action in singleKeyValue.String.Split(stringSeparators' StringSplitOptions.None).ToList())                          {                              Log.DebugFormat("Performing CommuniKate action: {0}."' action);                              if (action.StartsWith("board:"))                              {                                  string board = action.Substring(6);                                  switch (board)                                  {                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Alpha.");                                          Keyboard = new Alpha1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Conversation Alpha.");                                          Action conversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationConfirm":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Confirm.");                                          Action conversationConfirmBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationConfirm(conversationConfirmBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationNumericAndSymbols":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Numeric And Symbols.");                                          Action conversationNumericAndSymbolsBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Currencies.");                                          Keyboard = new Currencies1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Diacritics.");                                          Keyboard = new Diacritics1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Menu":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Menu.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Menu(() => Keyboard = new Alpha1());                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Mouse":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Mouse(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Numeric And Symbols.");                                          Keyboard = new NumericAndSymbols1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.PhysicalKeys":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          Keyboard = new PhysicalKeys();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Alpha.");                                          Keyboard = new SimplifiedAlpha(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedConversationAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Conversation Alpha.");                                          Action simplifiedConversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new SimplifiedConversationAlpha(simplifiedConversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.WebBrowsing":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Web Browsing.");                                          Keyboard = new WebBrowsing();                                          break;                                        default:                                          if (string.IsNullOrEmpty(Settings.Default.CommuniKateKeyboardCurrentContext))                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else if (Settings.Default.CommuniKateKeyboardPrevious1Context == board)                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious4Context;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else                                          {                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious1Context;                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardCurrentContext;                                          }                                            Settings.Default.CommuniKateKeyboardCurrentContext = board;                                          Log.InfoFormat("CommuniKate keyboard page changed to {0}."' board);                                          break;                                  }                              }                              else if (action.StartsWith("text:"))                              {                                  keyboardOutputService.ProcessSingleKeyText(action.Substring(5));                              }                              else if (action.StartsWith("speak:"))                              {                                  if (Settings.Default.CommuniKateSpeakSelected)                                  {                                      var speechCommuniKate = audioService.SpeakNewOrInterruptCurrentSpeech(                                          action.Substring(6)'                                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                                          Settings.Default.CommuniKateSpeakSelectedVolume'                                          Settings.Default.CommuniKateSpeakSelectedRate'                                          Settings.Default.SpeechVoice);                                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechCommuniKate ? KeyDownStates.Down : KeyDownStates.Up;                                  }                              }                              else if (action.StartsWith("sound:"))                                  audioService.PlaySound(action.Substring(6)' Settings.Default.CommuniKateSoundVolume);                              else if (action.StartsWith("action:"))                              {                                  string thisAction = action.Substring(7);                                  if (thisAction.StartsWith("+"))                                  {                                      bool changedAutoSpace = false;                                      if (Settings.Default.AutoAddSpace)                                      {                                          Settings.Default.AutoAddSpace = false;                                          changedAutoSpace = true;                                      }                                      foreach (char letter in thisAction.Substring(1))                                          keyboardOutputService.ProcessSingleKeyText(letter.ToString());                                        if (changedAutoSpace)                                          Settings.Default.AutoAddSpace = true;                                  }                                  else if (thisAction.StartsWith(":"))                                      switch (thisAction)                                      {                                          case ":space":                                              keyboardOutputService.ProcessSingleKeyText(" ");                                              break;                                          case ":home":                                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                                              Log.InfoFormat("CommuniKate keyboard page changed to home board.");                                              break;                                          case ":speak":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.Speak);                                              break;                                          case ":clear":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                                              break;                                          case ":deleteword":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackMany);                                              break;                                          case ":backspace":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackOne);                                              break;                                          case ":ext_volume_up":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeUp' 0' 0' 0);                                              break;                                          case ":ext_volume_down":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeDown' 0' 0' 0);                                              break;                                          case ":ext_volume_mute":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeMute' 0' 0' 0);                                              break;                                          case ":ext_media_next":                                              Native.PInvoke.keybd_event((byte)Keys.MediaNextTrack' 0' 0' 0);                                              break;                                          case ":ext_media_previous":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPreviousTrack' 0' 0' 0);                                              break;                                          case ":ext_media_pause":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPlayPause' 0' 0' 0);                                              break;                                          case ":ext_letters":                                              Settings.Default.UsingCommuniKateKeyboardLayout = false;                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationAlpha.");                                                  Action conversationAlphaBackAction = () =>                                                  {                                                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Alpha.");                                                  Keyboard = new Alpha1();                                              }                                              break;                                            case ":ext_numbers":                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationNumericAndSymbols(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Numeric And Symbols.");                                                  Keyboard = new NumericAndSymbols1();                                              }                                              break;                                            case ":ext_mouse":                                              if (mainWindowManipulationService.WindowState != WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new Mouse(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                      Log.Info("Maximising window.");                                                      mainWindowManipulationService.Maximise();                                                  };                                                  Keyboard = new Mouse(BackAction);                                                  Log.Info("Restoring window size.");                                                  mainWindowManipulationService.Restore();                                              }                                              break;                                          default:                                              Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                                              break;                                      }                                  else                                      Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                              }                            }                      }                        break;                    case FunctionKeys.SelectVoice:                      SelectVoice(singleKeyValue.String);                      break;                    case FunctionKeys.Plugin:                      RunPlugin_Legacy(singleKeyValue.String);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.CommuniKate:                      if (singleKeyValue.String.Contains(":action:"))                      {                          string[] stringSeparators = new string[] { ":action:" };                          foreach (var action in singleKeyValue.String.Split(stringSeparators' StringSplitOptions.None).ToList())                          {                              Log.DebugFormat("Performing CommuniKate action: {0}."' action);                              if (action.StartsWith("board:"))                              {                                  string board = action.Substring(6);                                  switch (board)                                  {                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Alpha.");                                          Keyboard = new Alpha1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Conversation Alpha.");                                          Action conversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationConfirm":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Confirm.");                                          Action conversationConfirmBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationConfirm(conversationConfirmBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationNumericAndSymbols":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Numeric And Symbols.");                                          Action conversationNumericAndSymbolsBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Currencies.");                                          Keyboard = new Currencies1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Diacritics.");                                          Keyboard = new Diacritics1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Menu":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Menu.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Menu(() => Keyboard = new Alpha1());                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Mouse":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Mouse(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Numeric And Symbols.");                                          Keyboard = new NumericAndSymbols1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.PhysicalKeys":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          Keyboard = new PhysicalKeys();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Alpha.");                                          Keyboard = new SimplifiedAlpha(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedConversationAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Conversation Alpha.");                                          Action simplifiedConversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new SimplifiedConversationAlpha(simplifiedConversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.WebBrowsing":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Web Browsing.");                                          Keyboard = new WebBrowsing();                                          break;                                        default:                                          if (string.IsNullOrEmpty(Settings.Default.CommuniKateKeyboardCurrentContext))                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else if (Settings.Default.CommuniKateKeyboardPrevious1Context == board)                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious4Context;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else                                          {                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious1Context;                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardCurrentContext;                                          }                                            Settings.Default.CommuniKateKeyboardCurrentContext = board;                                          Log.InfoFormat("CommuniKate keyboard page changed to {0}."' board);                                          break;                                  }                              }                              else if (action.StartsWith("text:"))                              {                                  keyboardOutputService.ProcessSingleKeyText(action.Substring(5));                              }                              else if (action.StartsWith("speak:"))                              {                                  if (Settings.Default.CommuniKateSpeakSelected)                                  {                                      var speechCommuniKate = audioService.SpeakNewOrInterruptCurrentSpeech(                                          action.Substring(6)'                                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                                          Settings.Default.CommuniKateSpeakSelectedVolume'                                          Settings.Default.CommuniKateSpeakSelectedRate'                                          Settings.Default.SpeechVoice);                                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechCommuniKate ? KeyDownStates.Down : KeyDownStates.Up;                                  }                              }                              else if (action.StartsWith("sound:"))                                  audioService.PlaySound(action.Substring(6)' Settings.Default.CommuniKateSoundVolume);                              else if (action.StartsWith("action:"))                              {                                  string thisAction = action.Substring(7);                                  if (thisAction.StartsWith("+"))                                  {                                      bool changedAutoSpace = false;                                      if (Settings.Default.AutoAddSpace)                                      {                                          Settings.Default.AutoAddSpace = false;                                          changedAutoSpace = true;                                      }                                      foreach (char letter in thisAction.Substring(1))                                          keyboardOutputService.ProcessSingleKeyText(letter.ToString());                                        if (changedAutoSpace)                                          Settings.Default.AutoAddSpace = true;                                  }                                  else if (thisAction.StartsWith(":"))                                      switch (thisAction)                                      {                                          case ":space":                                              keyboardOutputService.ProcessSingleKeyText(" ");                                              break;                                          case ":home":                                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                                              Log.InfoFormat("CommuniKate keyboard page changed to home board.");                                              break;                                          case ":speak":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.Speak);                                              break;                                          case ":clear":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                                              break;                                          case ":deleteword":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackMany);                                              break;                                          case ":backspace":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackOne);                                              break;                                          case ":ext_volume_up":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeUp' 0' 0' 0);                                              break;                                          case ":ext_volume_down":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeDown' 0' 0' 0);                                              break;                                          case ":ext_volume_mute":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeMute' 0' 0' 0);                                              break;                                          case ":ext_media_next":                                              Native.PInvoke.keybd_event((byte)Keys.MediaNextTrack' 0' 0' 0);                                              break;                                          case ":ext_media_previous":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPreviousTrack' 0' 0' 0);                                              break;                                          case ":ext_media_pause":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPlayPause' 0' 0' 0);                                              break;                                          case ":ext_letters":                                              Settings.Default.UsingCommuniKateKeyboardLayout = false;                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationAlpha.");                                                  Action conversationAlphaBackAction = () =>                                                  {                                                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Alpha.");                                                  Keyboard = new Alpha1();                                              }                                              break;                                            case ":ext_numbers":                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationNumericAndSymbols(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Numeric And Symbols.");                                                  Keyboard = new NumericAndSymbols1();                                              }                                              break;                                            case ":ext_mouse":                                              if (mainWindowManipulationService.WindowState != WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new Mouse(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                      Log.Info("Maximising window.");                                                      mainWindowManipulationService.Maximise();                                                  };                                                  Keyboard = new Mouse(BackAction);                                                  Log.Info("Restoring window size.");                                                  mainWindowManipulationService.Restore();                                              }                                              break;                                          default:                                              Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                                              break;                                      }                                  else                                      Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                              }                            }                      }                        break;                    case FunctionKeys.SelectVoice:                      SelectVoice(singleKeyValue.String);                      break;                    case FunctionKeys.Plugin:                      RunPlugin_Legacy(singleKeyValue.String);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleStringAndFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.CommuniKate:                      if (singleKeyValue.String.Contains(":action:"))                      {                          string[] stringSeparators = new string[] { ":action:" };                          foreach (var action in singleKeyValue.String.Split(stringSeparators' StringSplitOptions.None).ToList())                          {                              Log.DebugFormat("Performing CommuniKate action: {0}."' action);                              if (action.StartsWith("board:"))                              {                                  string board = action.Substring(6);                                  switch (board)                                  {                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Alpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Alpha.");                                          Keyboard = new Alpha1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationAlpha2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = false;                                          Log.Info("Changing keyboard back to Conversation Alpha.");                                          Action conversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationConfirm":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Confirm.");                                          Action conversationConfirmBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationConfirm(conversationConfirmBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.ConversationNumericAndSymbols":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Conversation Numeric And Symbols.");                                          Action conversationNumericAndSymbolsBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Currencies2":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Currencies.");                                          Keyboard = new Currencies1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Diacritics3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Diacritics.");                                          Keyboard = new Diacritics1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Menu":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Menu.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Menu(() => Keyboard = new Alpha1());                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.Mouse":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                          }                                          Keyboard = new Mouse(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols1":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols2":                                      case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.NumericAndSymbols3":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Numeric And Symbols.");                                          Keyboard = new NumericAndSymbols1();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.PhysicalKeys":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Mouse.");                                          Keyboard = new PhysicalKeys();                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Alpha.");                                          Keyboard = new SimplifiedAlpha(() => Keyboard = new Menu(() => Keyboard = new Alpha1()));                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.SimplifiedConversationAlpha":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Simplified Conversation Alpha.");                                          Action simplifiedConversationAlphaBackAction = () =>                                          {                                              Log.Info("Restoring window size.");                                              mainWindowManipulationService.Restore();                                              Keyboard = new Menu(() => Keyboard = new Alpha1());                                          };                                          Keyboard = new SimplifiedConversationAlpha(simplifiedConversationAlphaBackAction);                                          break;                                        case "JuliusSweetland.OptiKey.UI.ViewModels.Keyboards.WebBrowsing":                                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                                          Log.Info("Changing keyboard back to Web Browsing.");                                          Keyboard = new WebBrowsing();                                          break;                                        default:                                          if (string.IsNullOrEmpty(Settings.Default.CommuniKateKeyboardCurrentContext))                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateDefaultBoard;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else if (Settings.Default.CommuniKateKeyboardPrevious1Context == board)                                          {                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious4Context;                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateDefaultBoard;                                          }                                          else                                          {                                              Settings.Default.CommuniKateKeyboardPrevious4Context = Settings.Default.CommuniKateKeyboardPrevious3Context;                                              Settings.Default.CommuniKateKeyboardPrevious3Context = Settings.Default.CommuniKateKeyboardPrevious2Context;                                              Settings.Default.CommuniKateKeyboardPrevious2Context = Settings.Default.CommuniKateKeyboardPrevious1Context;                                              Settings.Default.CommuniKateKeyboardPrevious1Context = Settings.Default.CommuniKateKeyboardCurrentContext;                                          }                                            Settings.Default.CommuniKateKeyboardCurrentContext = board;                                          Log.InfoFormat("CommuniKate keyboard page changed to {0}."' board);                                          break;                                  }                              }                              else if (action.StartsWith("text:"))                              {                                  keyboardOutputService.ProcessSingleKeyText(action.Substring(5));                              }                              else if (action.StartsWith("speak:"))                              {                                  if (Settings.Default.CommuniKateSpeakSelected)                                  {                                      var speechCommuniKate = audioService.SpeakNewOrInterruptCurrentSpeech(                                          action.Substring(6)'                                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                                          Settings.Default.CommuniKateSpeakSelectedVolume'                                          Settings.Default.CommuniKateSpeakSelectedRate'                                          Settings.Default.SpeechVoice);                                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechCommuniKate ? KeyDownStates.Down : KeyDownStates.Up;                                  }                              }                              else if (action.StartsWith("sound:"))                                  audioService.PlaySound(action.Substring(6)' Settings.Default.CommuniKateSoundVolume);                              else if (action.StartsWith("action:"))                              {                                  string thisAction = action.Substring(7);                                  if (thisAction.StartsWith("+"))                                  {                                      bool changedAutoSpace = false;                                      if (Settings.Default.AutoAddSpace)                                      {                                          Settings.Default.AutoAddSpace = false;                                          changedAutoSpace = true;                                      }                                      foreach (char letter in thisAction.Substring(1))                                          keyboardOutputService.ProcessSingleKeyText(letter.ToString());                                        if (changedAutoSpace)                                          Settings.Default.AutoAddSpace = true;                                  }                                  else if (thisAction.StartsWith(":"))                                      switch (thisAction)                                      {                                          case ":space":                                              keyboardOutputService.ProcessSingleKeyText(" ");                                              break;                                          case ":home":                                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                                              Log.InfoFormat("CommuniKate keyboard page changed to home board.");                                              break;                                          case ":speak":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.Speak);                                              break;                                          case ":clear":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                                              break;                                          case ":deleteword":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackMany);                                              break;                                          case ":backspace":                                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.BackOne);                                              break;                                          case ":ext_volume_up":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeUp' 0' 0' 0);                                              break;                                          case ":ext_volume_down":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeDown' 0' 0' 0);                                              break;                                          case ":ext_volume_mute":                                              Native.PInvoke.keybd_event((byte)Keys.VolumeMute' 0' 0' 0);                                              break;                                          case ":ext_media_next":                                              Native.PInvoke.keybd_event((byte)Keys.MediaNextTrack' 0' 0' 0);                                              break;                                          case ":ext_media_previous":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPreviousTrack' 0' 0' 0);                                              break;                                          case ":ext_media_pause":                                              Native.PInvoke.keybd_event((byte)Keys.MediaPlayPause' 0' 0' 0);                                              break;                                          case ":ext_letters":                                              Settings.Default.UsingCommuniKateKeyboardLayout = false;                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationAlpha.");                                                  Action conversationAlphaBackAction = () =>                                                  {                                                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Alpha.");                                                  Keyboard = new Alpha1();                                              }                                              break;                                            case ":ext_numbers":                                              if (mainWindowManipulationService.WindowState == WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new ConversationNumericAndSymbols(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Numeric And Symbols.");                                                  Keyboard = new NumericAndSymbols1();                                              }                                              break;                                            case ":ext_mouse":                                              if (mainWindowManipulationService.WindowState != WindowStates.Maximised)                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                  };                                                  Keyboard = new Mouse(BackAction);                                              }                                              else                                              {                                                  Log.Info("Changing keyboard to Mouse.");                                                  Action BackAction = () =>                                                  {                                                      Keyboard = currentKeyboard;                                                      Log.Info("Maximising window.");                                                      mainWindowManipulationService.Maximise();                                                  };                                                  Keyboard = new Mouse(BackAction);                                                  Log.Info("Restoring window size.");                                                  mainWindowManipulationService.Restore();                                              }                                              break;                                          default:                                              Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                                              break;                                      }                                  else                                      Log.InfoFormat("Unsupported CommuniKate action: {0}."' thisAction);                              }                            }                      }                        break;                    case FunctionKeys.SelectVoice:                      SelectVoice(singleKeyValue.String);                      break;                    case FunctionKeys.Plugin:                      RunPlugin_Legacy(singleKeyValue.String);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                          Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                              Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                          }                            InitialiseKeyboard(this.mainWindowManipulationService);                      }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                            var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                            Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                              NotificationTypes.Error'                                              () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      SelectLanguage(Languages.CatalanSpain);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                          Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationCommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = Settings.Default.CommuniKateDefaultBoard;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Settings.Default.CommuniKateKeyboardPrevious1Context = currentKeyboard.ToString();                      Log.Info("Changing keyboard to Conversation CommuniKate.");                      Action conversationAlphaBackAction = () =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = new Menu(() => Keyboard = new Alpha1());                      };                      Keyboard = new ConversationAlpha1(conversationAlphaBackAction);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CopyAllFromScratchpad:                      {                          Log.Info("Copying text from scratchpad to clipboard.");                          string textFromScratchpad = KeyboardOutputService.Text;                            if (!string.IsNullOrEmpty(textFromScratchpad))                          {                              Clipboard.SetText(textFromScratchpad);                          }                      }                      break;                    case FunctionKeys.CroatianCroatia:                      SelectLanguage(Languages.CroatianCroatia);                      break;                  case FunctionKeys.SerbianSerbia:                      SelectLanguage(Languages.SerbianSerbia);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.DynamicKeyboardNext:                      {                          Log.Info("Changing keyboard to next DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                    case FunctionKeys.CzechCzechRepublic:                      SelectLanguage(Languages.CzechCzechRepublic);                      break;                    case FunctionKeys.DanishDenmark:                      SelectLanguage(Languages.DanishDenmark);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      SelectLanguage(Languages.DutchBelgium);                      break;                    case FunctionKeys.DutchNetherlands:                      SelectLanguage(Languages.DutchNetherlands);                      break;                    case FunctionKeys.EnglishCanada:                      SelectLanguage(Languages.EnglishCanada);                      break;                    case FunctionKeys.EnglishUK:                      SelectLanguage(Languages.EnglishUK);                      break;                    case FunctionKeys.EnglishUS:                      SelectLanguage(Languages.EnglishUS);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FinnishFinland:                      SelectLanguage(Languages.FinnishFinland);                      break;                    case FunctionKeys.FrenchCanada:                      SelectLanguage(Languages.FrenchCanada);                      break;                    case FunctionKeys.FrenchFrance:                      SelectLanguage(Languages.FrenchFrance);                      break;                    case FunctionKeys.GeorgianGeorgia:                      SelectLanguage(Languages.GeorgianGeorgia);                      break;                    case FunctionKeys.GermanGermany:                      SelectLanguage(Languages.GermanGermany);                      break;                    case FunctionKeys.GreekGreece:                      SelectLanguage(Languages.GreekGreece);                      break;                    case FunctionKeys.HebrewIsrael:                      SelectLanguage(Languages.HebrewIsrael);                      break;                    case FunctionKeys.HungarianHungary:                      SelectLanguage(Languages.HungarianHungary);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      SelectLanguage(Languages.ItalianItaly);                      break;                    case FunctionKeys.JapaneseJapan:                      SelectLanguage(Languages.JapaneseJapan);                      break;                    case FunctionKeys.KoreanKorea:                      SelectLanguage(Languages.KoreanKorea);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LookToScrollActive:                      ToggleLookToScroll();                      break;                    case FunctionKeys.LookToScrollBounds:                      HandleLookToScrollBoundsKeySelected();                      break;                    case FunctionKeys.LookToScrollIncrement:                      SelectNextLookToScrollIncrement();                      break;                    case FunctionKeys.LookToScrollMode:                      SelectNextLookToScrollMode();                      break;                    case FunctionKeys.LookToScrollSpeed:                      SelectNextLookToScrollSpeed();                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.More:                      ShowMore();                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                    Vector stepVector = fp1 - fp2;                                                  int steps = Settings.Default.MouseDragNumberOfSteps;                                                  stepVector = stepVector / steps;                                                    do                                                  {                                                      fp1.X = fp1.X - stepVector.X;                                                      fp1.Y = fp1.Y - stepVector.Y;                                                      mouseOutputService.MoveTo(fp1);                                                      Thread.Sleep(Settings.Default.MouseDragDelayBetweenEachStep);                                                      steps--;                                                  } while (steps > 0);                                                    mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                          resumeLookToScroll();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                              resumeLookToScroll();                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseScrollToTop:                        var currentPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                      Action<Point?> performScroll = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                              simulateScrollToTop(point.Value);                          }                      };                      performScroll(currentPoint);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseScrollToBottom:                        var currentPointScroll = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                      Action<Point?> performScrollDown = point =>                      {                          if (point != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                              simulateScrollToBottom(point.Value);                          }                      };                      performScrollDown(currentPointScroll);                      ResetAndCleanupAfterMouseAction();                        break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      resumeLookToScroll = SuspendLookToScrollWhileChoosingPointForMouse();                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                          resumeLookToScroll();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                    case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PersianIran:                      SelectLanguage(Languages.PersianIran);                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PolishPoland:                      SelectLanguage(Languages.PolishPoland);                      break;                    case FunctionKeys.PortuguesePortugal:                      SelectLanguage(Languages.PortuguesePortugal);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.Restart:                      keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.REFRESH_MESSAGE'                          () =>                          {                              OptiKeyApp.RestartApp();                              Application.Current.Shutdown();                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RussianRussia:                      SelectLanguage(Languages.RussianRussia);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      SelectLanguage(Languages.SlovakSlovakia);                      break;                    case FunctionKeys.SlovenianSlovenia:                      SelectLanguage(Languages.SlovenianSlovenia);                      break;                    case FunctionKeys.SpanishSpain:                      SelectLanguage(Languages.SpanishSpain);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      SelectLanguage(Languages.TurkishTurkey);                      break;                    case FunctionKeys.UkrainianUkraine:                      SelectLanguage(Languages.UkrainianUkraine);                      break;                    case FunctionKeys.UrduPakistan:                      SelectLanguage(Languages.UrduPakistan);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepList,The following statement contains a magic number: List<string> commandList = singleKeyValue.String.Substring(11).Split('<').ToList();
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepListCommands,The following statement contains a magic number: var loopCount = Int32.Parse(commandList.First().Substring(5));
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,StepListCommands,The following statement contains a magic number: int waitMs = 500;
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,RunDynamicPlugin,The following statement contains a magic number: pluginKey.Name = pluginCommands.First().Substring(7);
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,Load,The following statement contains a magic number: Opacity = (int)(100.0f*Settings.Default.MainWindowOpacity);
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\VisualsViewModel.cs,ApplyChanges,The following statement contains a magic number: Settings.Default.MainWindowOpacity = (double) Opacity / 100.0f;
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SplitAndWrapExceptionInfo,The following statement contains a magic number: var maxLineLength = len / 3.5;
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: AddRowsToGrid(4);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: AddColsToGrid(4);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 0' 1' 1' 2);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 1' 0' 2' 4);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 1' 0' 2' 4);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 3' 3);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 3' 3);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 0' 3' 1' 1);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 3' 0' 1' 1);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 3' 1' 1' 2);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: this.PlaceKeyInPosition(newKey' 3' 1' 1' 2);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The following statement contains a magic number: vLookup = Properties.Resources.ResourceManager.GetString(vText.Substring(10' vText.Length - 11).Trim());
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The following statement contains a magic number: vLookup = Properties.Resources.ResourceManager.GetString(vText.Substring(10' vText.Length - 11).Trim());
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The following statement contains a magic number: vLookup = Properties.Settings.Default[vText.Substring(9' vText.Length - 10).Trim()].ToString();
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,CreateDynamicKey,The following statement contains a magic number: vLookup = Properties.Settings.Default[vText.Substring(9' vText.Length - 10).Trim()].ToString();
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TopGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.OutputPanel = ((JuliusSweetland.OptiKey.UI.Controls.Output)(target));              return;              case 3:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TopGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.OutputPanel = ((JuliusSweetland.OptiKey.UI.Controls.Output)(target));              return;              case 3:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: int maxKeyboardsPerPage = (this.mCols - 2) * this.mRows;
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: var r = i / (this.mCols - 2);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: var c = 1 + (i % (this.mCols - 2));
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: this.AddKey(newKey' 0' 0' 2' 1);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: this.AddKey(newKey' 0' this.mCols - 1' 2' 1);
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: var v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: h *= 6.0;
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: var red = Convert.ToByte(r * 255.0f);
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: var green = Convert.ToByte(g * 255.0f);
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: var blue = Convert.ToByte(b * 255.0f);
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (layout)              {                  case KeyboardLayouts.Default: return Resources.USE_DEFAULT_KEYBOARD_LAYOUT;                  case KeyboardLayouts.Alphabetic: return Resources.USE_ALPHABETICAL_KEYBOARD_LAYOUT;                  case KeyboardLayouts.Communikate: return Resources.USE_COMMUNIKATE_KEYBOARD_LAYOUT;                  case KeyboardLayouts.Simplified: return Resources.USE_SIMPLIFIED_KEYBOARD_LAYOUT;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (pointSource)              {                  case DataStreamProcessingLevels.High: return Resources.HIGH;                  case DataStreamProcessingLevels.Medium: return Resources.MEDIUM;                  case DataStreamProcessingLevels.Low: return Resources.LOW;                  case DataStreamProcessingLevels.None: return Resources.NONE;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (language)              {                  case Languages.CatalanSpain: return Resources.CATALAN_SPAIN;                  case Languages.CroatianCroatia: return Resources.CROATIAN_CROATIA;                  case Languages.CzechCzechRepublic: return Resources.CZECH_CZECH_REPUBLIC;                  case Languages.DanishDenmark: return Resources.DANISH_DENMARK;                  case Languages.DutchBelgium: return Resources.DUTCH_BELGIUM;                  case Languages.DutchNetherlands: return Resources.DUTCH_NETHERLANDS;                  case Languages.EnglishCanada: return Resources.ENGLISH_CANADA;                  case Languages.EnglishUK: return Resources.ENGLISH_UK;                  case Languages.EnglishUS: return Resources.ENGLISH_US;                  case Languages.FinnishFinland: return Resources.FINNISH_FINLAND;                  case Languages.FrenchCanada: return Resources.FRENCH_CANADA;                  case Languages.FrenchFrance: return Resources.FRENCH_FRANCE;                  case Languages.GeorgianGeorgia: return Resources.GEORGIAN_GEORGIA;                  case Languages.GermanGermany: return Resources.GERMAN_GERMANY;                  case Languages.GreekGreece: return Resources.GREEK_GREECE;                  case Languages.HebrewIsrael: return Resources.HEBREW_ISRAEL;                  case Languages.ItalianItaly: return Resources.ITALIAN_ITALY;                  case Languages.JapaneseJapan: return Resources.JAPANESE_JAPAN;                  case Languages.KoreanKorea: return Resources.KOREAN_KOREA;                  case Languages.PersianIran: return Resources.PERSIAN_IRAN;                  case Languages.PolishPoland: return Resources.POLISH_POLAND;                  case Languages.PortuguesePortugal: return Resources.PORTUGUESE_PORTUGAL;                  case Languages.RussianRussia: return Resources.RUSSIAN_RUSSIA;                  case Languages.SerbianSerbia: return Resources.SERBIAN_SERBIA;                  case Languages.SlovakSlovakia: return Resources.SLOVAK_SLOVAKIA;                  case Languages.SlovenianSlovenia: return Resources.SLOVENIAN_SLOVENIA;                  case Languages.SpanishSpain: return Resources.SPANISH_SPAIN;                  case Languages.TurkishTurkey: return Resources.TURKISH_TURKEY;                  case Languages.UkrainianUkraine: return Resources.UKRAINIAN_UKRAINE;                  case Languages.UrduPakistan: return Resources.URDU_PAKISTAN;                  case Languages.HungarianHungary: return Resources.HUNGARIAN_HUNGARY;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToCultureInfo,The following switch statement is missing a default case: switch (language)              {                  case Languages.CatalanSpain: return CultureInfo.GetCultureInfo("ca-ES");                  case Languages.CroatianCroatia: return CultureInfo.GetCultureInfo("hr-HR");                  case Languages.CzechCzechRepublic: return CultureInfo.GetCultureInfo("cs-CZ");                  case Languages.DanishDenmark: return CultureInfo.GetCultureInfo("da-DK");                  case Languages.DutchBelgium: return CultureInfo.GetCultureInfo("nl-BE");                  case Languages.DutchNetherlands: return CultureInfo.GetCultureInfo("nl-NL");                  case Languages.EnglishUS: return CultureInfo.GetCultureInfo("en-US");                  case Languages.EnglishUK: return CultureInfo.GetCultureInfo("en-GB");                  case Languages.EnglishCanada: return CultureInfo.GetCultureInfo("en-CA");                  case Languages.FinnishFinland: return CultureInfo.GetCultureInfo("fi-FI");                  case Languages.FrenchCanada: return CultureInfo.GetCultureInfo("fr-CA");                  case Languages.FrenchFrance: return CultureInfo.GetCultureInfo("fr-FR");                  case Languages.GeorgianGeorgia: return CultureInfo.GetCultureInfo("ka-GE");                  case Languages.GermanGermany: return CultureInfo.GetCultureInfo("de-DE");                  case Languages.GreekGreece: return CultureInfo.GetCultureInfo("el-GR");                  case Languages.HebrewIsrael: return CultureInfo.GetCultureInfo("he-IL");                  case Languages.ItalianItaly: return CultureInfo.GetCultureInfo("it-IT");                  case Languages.JapaneseJapan: return CultureInfo.GetCultureInfo("ja-JP");                  case Languages.KoreanKorea: return CultureInfo.GetCultureInfo("ko-KR");                  case Languages.PersianIran: return CultureInfo.GetCultureInfo("fa-IR");                  case Languages.PolishPoland: return CultureInfo.GetCultureInfo("pl-PL");                  case Languages.PortuguesePortugal: return CultureInfo.GetCultureInfo("pt-PT");                  case Languages.RussianRussia: return CultureInfo.GetCultureInfo("ru-RU");                  case Languages.SerbianSerbia: return CultureInfo.GetCultureInfo("sr-Cyrl-RS");                  case Languages.SlovakSlovakia: return CultureInfo.GetCultureInfo("sk-SK");                  case Languages.SlovenianSlovenia: return CultureInfo.GetCultureInfo("sl-SI");                  case Languages.SpanishSpain: return CultureInfo.GetCultureInfo("es-ES");                  case Languages.TurkishTurkey: return CultureInfo.GetCultureInfo("tr-TR");                  case Languages.UkrainianUkraine: return CultureInfo.GetCultureInfo("uk-UA");                  case Languages.UrduPakistan: return CultureInfo.GetCultureInfo("ur-PK");                  case Languages.HungarianHungary: return CultureInfo.GetCultureInfo("hu-HU");              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (pointSource)              {                  case PointsSources.Alienware17: return Resources.ALIENWARE_17;                  case PointsSources.GazeTracker: return Resources.GAZE_TRACKER;                  case PointsSources.IrisbondDuo: return Resources.IRISBOND_DUO;                  case PointsSources.MousePosition: return Resources.MOUSE_POSITION;                  case PointsSources.SteelseriesSentry: return Resources.STEELSERIES_SENTRY;                  case PointsSources.TheEyeTribe: return Resources.THE_EYE_TRIBE;                  case PointsSources.TobiiEyeTracker4C: return Resources.TOBII_EYE_TRACKER_4C;                  case PointsSources.TobiiEyeX: return Resources.TOBII_EYEX;                  case PointsSources.TobiiRex: return Resources.TOBII_REX;                  case PointsSources.TobiiPcEyeGo: return Resources.TOBII_PCEYE_GO;                  case PointsSources.TobiiPcEyeGoPlus: return Resources.TOBII_PCEYE_GO_PLUS;                  case PointsSources.TobiiPcEyeMini: return Resources.TOBII_PCEYE_MINI;                  case PointsSources.TobiiX2_30: return Resources.TOBII_X2_30;                  case PointsSources.TobiiX2_60: return Resources.TOBII_X2_60;                  case PointsSources.VisualInteractionMyGaze: return Resources.VI_MYGAZE;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToExtendedDescription,The following switch statement is missing a default case: switch (pointSource)              {                  case PointsSources.Alienware17: return Resources.ALIENWARE_17_INFO;                  case PointsSources.GazeTracker: return Resources.GAZE_TRACKER_INFO;                  case PointsSources.IrisbondDuo: return Resources.IRISBOND_DUO_INFO;                  case PointsSources.MousePosition: return Resources.MOUSE_POSITION_INFO;                  case PointsSources.SteelseriesSentry: return "";                  case PointsSources.TheEyeTribe: return "";                  case PointsSources.TobiiEyeTracker4C: return "";                  case PointsSources.TobiiEyeX: return Resources.TOBII_EYEX_INFO;                  case PointsSources.TobiiRex: return Resources.TOBII_ASSISTIVE_INFO;                  case PointsSources.TobiiPcEyeGo: return Resources.TOBII_ASSISTIVE_INFO;                  case PointsSources.TobiiPcEyeGoPlus: return Resources.TOBII_ASSISTIVE_INFO;                  case PointsSources.TobiiPcEyeMini: return Resources.TOBII_ASSISTIVE_INFO;                  case PointsSources.TobiiX2_30: return Resources.TOBII_ASSISTIVE_INFO;                  case PointsSources.TobiiX2_60: return Resources.TOBII_ASSISTIVE_INFO;                  case PointsSources.VisualInteractionMyGaze: return Resources.VI_MYGAZE_INFO;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (triggerSources)              {                  case TriggerSources.Fixations: return Resources.FIXATIONS_DWELL;                  case TriggerSources.KeyboardKeyDownsUps: return Resources.KEYBOARD_KEY;                  case TriggerSources.MouseButtonDownUps: return Resources.MOUSE_BUTTON;              }
Missing Default,JuliusSweetland.OptiKey.Models,XmlScratchpad,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Models\XmlKeyboardModels\XmlScratchpad.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Scratchpad = ((JuliusSweetland.OptiKey.UI.Controls.Scratchpad)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,CreateCalibrationService,The following switch statement is missing a default case: switch (Settings.Default.PointsSource)              {                  case PointsSources.TheEyeTribe:                      return new TheEyeTribeCalibrationService();                    case PointsSources.IrisbondDuo:                      return new IrisbondDuoCalibrationService();                    case PointsSources.Alienware17:                  case PointsSources.SteelseriesSentry:                  case PointsSources.TobiiEyeX:                  case PointsSources.TobiiEyeTracker4C:                  case PointsSources.TobiiRex:                  case PointsSources.TobiiPcEyeGo:                  case PointsSources.TobiiPcEyeGoPlus:                  case PointsSources.TobiiPcEyeMini:                  case PointsSources.TobiiX2_30:                  case PointsSources.TobiiX2_60:                      return new TobiiEyeXCalibrationService();                    case PointsSources.VisualInteractionMyGaze:                      return new MyGazeCalibrationService();              }
Missing Default,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The following switch statement is missing a default case: switch (Settings.Default.KeySelectionTriggerSource)                  {                      case TriggerSources.Fixations:                          keySelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds));                          break;                        case TriggerSources.KeyboardKeyDownsUps:                          keySelectionSb.Append(string.Format(" ({0})"' Settings.Default.KeySelectionTriggerKeyboardKeyDownUpKey));                          break;                        case TriggerSources.MouseButtonDownUps:                          keySelectionSb.Append(string.Format(" ({0})"' Settings.Default.KeySelectionTriggerMouseDownUpButton));                          break;                  }
Missing Default,JuliusSweetland.OptiKey,OptiKeyApp,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\OptiKeyApp.cs,ShowSplashScreen,The following switch statement is missing a default case: switch (Settings.Default.PointSelectionTriggerSource)                  {                      case TriggerSources.Fixations:                          pointSelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds));                          break;                        case TriggerSources.KeyboardKeyDownsUps:                          pointSelectionSb.Append(string.Format(" ({0})"' Settings.Default.PointSelectionTriggerKeyboardKeyDownUpKey));                          break;                        case TriggerSources.MouseButtonDownUps:                          pointSelectionSb.Append(string.Format(" ({0})"' Settings.Default.PointSelectionTriggerMouseDownUpButton));                          break;                  }
Missing Default,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,CreateSelectionProgressSubscription,The following switch statement is missing a default case: switch (mode)              {                  case SelectionModes.Key:                      selectionTriggerSource = keySelectionTriggerSource;                      break;                    case SelectionModes.Point:                      selectionTriggerSource = pointSelectionTriggerSource;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,InputService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\InputService.subscriptions.cs,CreateSelectionSubscriptions,The following switch statement is missing a default case: switch (mode)              {                  case SelectionModes.Key:                      selectionTriggerSource = keySelectionTriggerSource;                      break;                    case SelectionModes.Point:                      selectionTriggerSource = pointSelectionTriggerSource;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (getWindowState())                  {                      case WindowStates.Floating:                          PersistSizeAndPosition();                          break;                        case WindowStates.Docked:                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                          break;                  }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,ApplySavedState,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Docked:                      window.WindowState = System.Windows.WindowState.Normal;                      var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(dockPosition' getDockSize());                      RegisterAppBar();                      SetAppBarSizeAndPosition(dockPosition' dockSizeAndPositionInPx' isInitialising);                      break;                    case WindowStates.Floating:                      window.WindowState = System.Windows.WindowState.Normal;                      window.Dispatcher.BeginInvoke(DispatcherPriority.ApplicationIdle'                          new ApplySizeAndPositionDelegate(ApplyAndPersistSizeAndPosition)' getFloatingSizeAndPosition());                      break;                    case WindowStates.Maximised:                      window.WindowState = System.Windows.WindowState.Maximized;                      PublishSizeAndPositionInitialised();                      break;                    case WindowStates.Minimised:                      window.WindowState = System.Windows.WindowState.Normal;                      var minimisedSizeAndPosition = CalculateMinimisedSizeAndPosition();                      window.Dispatcher.BeginInvoke(DispatcherPriority.ApplicationIdle'                          new ApplySizeAndPositionDelegate(ApplyAndPersistSizeAndPosition)' minimisedSizeAndPosition);                      break;                    case WindowStates.Hidden:                      window.WindowState = System.Windows.WindowState.Minimized;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Docked:                      switch (getDockPosition())                      {                          case DockEdges.Top:                              switch (direction)                              {                                  case MoveToDirections.Bottom:                                  case MoveToDirections.BottomLeft:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Top;                                      switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Bottom:                              switch (direction)                              {                                  case MoveToDirections.Top:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.TopRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;                                      switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Left:                              switch (direction)                              {                                  case MoveToDirections.Right:                                  case MoveToDirections.TopRight:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Left;                                      switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Right:                              switch (direction)                              {                                  case MoveToDirections.Left:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.BottomLeft:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;                                      switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                      }                      break;                    case WindowStates.Floating:                      switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (xAdjustmentAmount > xAdjustmentToLeft)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Left);                                  RegisterAppBar();                              }                              else                              {                                  window.Left -= xAdjustmentToLeft;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= xAdjustmentToLeft;                              break;                            case MoveToDirections.Right:                              if (xAdjustmentAmount > xAdjustmentToRight)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Right);                                  RegisterAppBar();                              }                              else                              {                                  window.Left += xAdjustmentToRight;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += xAdjustmentToRight;                              break;                      }                      switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (yAdjustmentAmount > yAdjustmentToBottom)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Bottom);                                  RegisterAppBar();                              }                              else                              {                                  window.Top += yAdjustmentToBottom;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += yAdjustmentToBottom;                              break;                            case MoveToDirections.Top:                              if (yAdjustmentAmount > yAdjustmentToTop)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Top);                                  RegisterAppBar();                              }                              else                              {                                  window.Top -= yAdjustmentToTop;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= yAdjustmentToTop;                              break;                      }                      adjustment = true;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (getDockPosition())                      {                          case DockEdges.Top:                              switch (direction)                              {                                  case MoveToDirections.Bottom:                                  case MoveToDirections.BottomLeft:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Top;                                      switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Bottom:                              switch (direction)                              {                                  case MoveToDirections.Top:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.TopRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;                                      switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Left:                              switch (direction)                              {                                  case MoveToDirections.Right:                                  case MoveToDirections.TopRight:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Left;                                      switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Right:                              switch (direction)                              {                                  case MoveToDirections.Left:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.BottomLeft:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;                                      switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Bottom:                                  case MoveToDirections.BottomLeft:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Top;                                      switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Top:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.TopRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;                                      switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Right:                                  case MoveToDirections.TopRight:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Left;                                      switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Left:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.BottomLeft:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;                                      switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (xAdjustmentAmount > xAdjustmentToLeft)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Left);                                  RegisterAppBar();                              }                              else                              {                                  window.Left -= xAdjustmentToLeft;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= xAdjustmentToLeft;                              break;                            case MoveToDirections.Right:                              if (xAdjustmentAmount > xAdjustmentToRight)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Right);                                  RegisterAppBar();                              }                              else                              {                                  window.Left += xAdjustmentToRight;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += xAdjustmentToRight;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (yAdjustmentAmount > yAdjustmentToBottom)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Bottom);                                  RegisterAppBar();                              }                              else                              {                                  window.Top += yAdjustmentToBottom;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += yAdjustmentToBottom;                              break;                            case MoveToDirections.Top:                              if (yAdjustmentAmount > yAdjustmentToTop)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Top);                                  RegisterAppBar();                              }                              else                              {                                  window.Top -= yAdjustmentToTop;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= yAdjustmentToTop;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Docked:                      //Jump to (and dock on) a different edge                      var dockPosition = getDockPosition();                      if (direction == MoveToDirections.Top && dockPosition != DockEdges.Top)                      {                          saveDockPosition(DockEdges.Top);                          adjustment = true;                      }                      else if (direction == MoveToDirections.Bottom && dockPosition != DockEdges.Bottom)                      {                          saveDockPosition(DockEdges.Bottom);                          adjustment = true;                      }                      else if (direction == MoveToDirections.Left && dockPosition != DockEdges.Left)                      {                          saveDockPosition(DockEdges.Left);                          adjustment = true;                      }                      else if (direction == MoveToDirections.Right && dockPosition != DockEdges.Right)                      {                          saveDockPosition(DockEdges.Right);                          adjustment = true;                      }                      break;                    case WindowStates.Floating:                      //Jump to edge(s)' or dock against edge if we are already against that edge                      DockEdges? dockToEdge = null;                      switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (distanceToLeftBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Left;                              }                              else                              {                                  window.Left -= distanceToLeftBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= distanceToLeftBoundaryIfFloating;                              break;                            case MoveToDirections.Right:                              if (distanceToRightBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Right;                              }                              else                              {                                  window.Left += distanceToRightBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += distanceToRightBoundaryIfFloating;                              break;                      }                      switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (distanceToBottomBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Bottom;                              }                              else                              {                                  window.Top += distanceToBottomBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += distanceToBottomBoundaryIfFloating;                              break;                            case MoveToDirections.Top:                              if (distanceToTopBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Top;                              }                              else                              {                                  window.Top -= distanceToTopBoundaryIfFloating;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= distanceToTopBoundaryIfFloating;                              break;                      }                        if (dockToEdge != null)                      {                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                      }                        adjustment = true;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (distanceToLeftBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Left;                              }                              else                              {                                  window.Left -= distanceToLeftBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= distanceToLeftBoundaryIfFloating;                              break;                            case MoveToDirections.Right:                              if (distanceToRightBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Right;                              }                              else                              {                                  window.Left += distanceToRightBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += distanceToRightBoundaryIfFloating;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (distanceToBottomBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Bottom;                              }                              else                              {                                  window.Top += distanceToBottomBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += distanceToBottomBoundaryIfFloating;                              break;                            case MoveToDirections.Top:                              if (distanceToTopBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Top;                              }                              else                              {                                  window.Top -= distanceToTopBoundaryIfFloating;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= distanceToTopBoundaryIfFloating;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistDockThickness,The following switch statement is missing a default case: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,PersistSizeAndPosition,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Floating:                      saveFloatingSizeAndPosition(new Rect(window.Left' window.Top' window.ActualWidth' window.ActualHeight));                      break;                    case WindowStates.Docked:                      PersistDockThickness();                      break;                    case WindowStates.Maximised:                  case WindowStates.Minimised:                  case WindowStates.Hidden:                      //Do not save anything                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The following switch statement is missing a default case: switch (dockPosition)              {                  case DockEdges.Top:                      barData.rc.Bottom += barData.rc.Top - (int)Math.Round(sizeAndPosition.Top);                      break;                  case DockEdges.Bottom:                      barData.rc.Top -= (int)Math.Round(sizeAndPosition.Bottom) - barData.rc.Bottom;                      break;                  case DockEdges.Left:                      barData.rc.Right += barData.rc.Left - (int)Math.Round(sizeAndPosition.Left);                      break;                  case DockEdges.Right:                      barData.rc.Left -= (int)Math.Round(sizeAndPosition.Right) - barData.rc.Right;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following switch statement is missing a default case: switch (calibrateArgs.Result)              {                  case CalibrationRunnerResult.Success:                      var message = string.Format(Resources.CALIBRATION_SUCCESS_WITH_ACCURACY'                          calibrateArgs.CalibrationResult.AverageErrorDegree);                      Log.Info(message);                      return message;                    case CalibrationRunnerResult.Abort:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_ABORT_MESSAGE' calibrateArgs.Message));                    case CalibrationRunnerResult.Error:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_ERROR_MESSAGE' calibrateArgs.Message));                    case CalibrationRunnerResult.Failure:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_FAIL_MESSAGE' calibrateArgs.Message));                    case CalibrationRunnerResult.Unknown:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_STOPPED_MESSAGE' calibrateArgs.Message));              }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,Key,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Key.cs,TextChanged,The following switch statement is missing a default case: switch (key.Case == Case.Settings ? Settings.Default.KeyCase : key.Case)                      {                          case Case.Upper:                              value = textInfo.ToUpper(value);                              break;                          case Case.Lower:                              value = textInfo.ToLower(value);                              break;                          case Case.Title:                              //Must be lowercased first because ToTitleCase consider uppercased string as abreviations                              value = textInfo.ToTitleCase(textInfo.ToLower(value));                              break;                      }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,GenerateContent,The following switch statement is missing a default case: switch (Settings.Default.KeyboardAndDictionaryLanguage)                  {                      case Languages.HebrewIsrael:                          newContent = new HebrewViews.Alpha2 { DataContext = Keyboard };                          break;                      case Languages.JapaneseJapan:                          newContent = Settings.Default.UseSimplifiedKeyboardLayout                              ? (object)new JapaneseViews.SimplifiedAlpha2 { DataContext = Keyboard }                              : new JapaneseViews.Alpha2 { DataContext = Keyboard };                          break;                      case Languages.KoreanKorea:                          newContent = new KoreanViews.Alpha2 { DataContext = Keyboard };                          break;                      case Languages.PersianIran:                          newContent = new PersianViews.Alpha2 { DataContext = Keyboard };                          break;                      case Languages.UrduPakistan:                          newContent = new UrduViews.Alpha2 { DataContext = Keyboard };                          break;                  }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\KeyboardHost.cs,GenerateContent,The following switch statement is missing a default case: switch (Settings.Default.KeyboardAndDictionaryLanguage)                  {                      case Languages.JapaneseJapan:                          newContent = new JapaneseViews.ConversationAlpha2 { DataContext = Keyboard };                          break;                      case Languages.KoreanKorea:                          newContent = new KoreanViews.ConversationAlpha2 { DataContext = Keyboard };                          break;                      case Languages.PersianIran:                          newContent = new PersianViews.ConversationAlpha2 { DataContext = Keyboard };                          break;                      case Languages.UrduPakistan:                          newContent = new UrduViews.ConversationAlpha2 { DataContext = Keyboard };                          break;                  }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,Output,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Controls\Output.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.Scratchpad = ((JuliusSweetland.OptiKey.UI.Controls.Scratchpad)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,ChooseLookToScrollBoundsTarget,The following switch statement is missing a default case: switch (Settings.Default.LookToScrollBounds)              {                  case LookToScrollBounds.ScreenPoint:                      ChoosePointLookToScrollBoundsTarget(callback);                      break;                    case LookToScrollBounds.ScreenCentred:                      ChooseScreenLookToScrollBoundsTarget(callback);                              break;                    case LookToScrollBounds.Window:                      ChooseWindowLookToScrollBoundsTarget(callback);                      break;                    case LookToScrollBounds.Subwindow:                      ChooseSubwindowLookToScrollBoundsTarget(callback);                      break;                    case LookToScrollBounds.Custom:                      ChooseCustomLookToScrollBoundsTarget(callback);                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,TakeActionsUponLookToScrollStarted,The following switch statement is missing a default case: switch (lookToScrollBoundsWhenActivated)              {                  case LookToScrollBounds.Window:                  case LookToScrollBounds.Subwindow:                      if (Settings.Default.LookToScrollBringWindowToFrontWhenActivated)                      {                          BringLookToScrollWindowBoundsTargetToFront();                      }                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,ShouldUpdateLookToScroll,The following switch statement is missing a default case: switch (lookToScrollBoundsWhenActivated)              {                  case LookToScrollBounds.Window:                  case LookToScrollBounds.Subwindow:                      if (GetHwndForFrontmostWindowAtPoint(position) != windowLookToScrollBoundsTarget)                      {                          return false;                      }                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,GetCurrentLookToScrollBoundsRect,The following switch statement is missing a default case: switch (lookToScrollBoundsWhenActivated)              {                  case LookToScrollBounds.ScreenPoint:                  case LookToScrollBounds.ScreenCentred:                      bounds = IsMainWindowDocked()                           ? FindLargestGapBetweenScreenAndMainWindow()                           : GetVirtualScreenBoundsInPixels();                      break;                    case LookToScrollBounds.Window:                      bounds = GetWindowBounds(windowLookToScrollBoundsTarget);                        break;                    case LookToScrollBounds.Subwindow:                      bounds = GetSubwindowBoundsOnScreen(windowLookToScrollBoundsTarget' rectLookToScrollBoundsTarget);                      break;                    case LookToScrollBounds.Custom:                      bounds = rectLookToScrollBoundsTarget;                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,CalculateLookToScrollVelocity,The following switch statement is missing a default case: switch (Settings.Default.LookToScrollMode)              {                  case LookToScrollModes.Horizontal:                  case LookToScrollModes.Cross:                  case LookToScrollModes.Free:                      velocity.X = CalculateLookToScrollVelocity(                          current.X'                           centre.X'                          Settings.Default.LookToScrollHorizontalDeadzone'                           baseSpeed'                           acceleration                      );                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,CalculateLookToScrollVelocity,The following switch statement is missing a default case: switch (Settings.Default.LookToScrollMode)              {                  case LookToScrollModes.Vertical:                  case LookToScrollModes.Cross:                  case LookToScrollModes.Free:                      velocity.Y = CalculateLookToScrollVelocity(                          current.Y'                          centre.Y'                          Settings.Default.LookToScrollVerticalDeadzone'                          baseSpeed'                          acceleration                      );                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\MainViewModel.LookToScroll.cs,GetCurrentBaseSpeedAndAcceleration,The following switch statement is missing a default case: switch (Settings.Default.LookToScrollSpeed)              {                  case LookToScrollSpeeds.Slow:                      baseSpeed = Settings.Default.LookToScrollBaseSpeedSlow;                      acceleration = Settings.Default.LookToScrollAccelerationSlow;                      break;                    case LookToScrollSpeeds.Medium:                      baseSpeed = Settings.Default.LookToScrollBaseSpeedMedium;                      acceleration = Settings.Default.LookToScrollAccelerationMedium;                      break;                    case LookToScrollSpeeds.Fast:                      baseSpeed = Settings.Default.LookToScrollBaseSpeedFast;                      acceleration = Settings.Default.LookToScrollAccelerationFast;                      break;              }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,PointingAndSelectingViewModel,The following switch statement is missing a default case: switch (ts)                  {                      case Enums.TriggerSources.Fixations:                          MultiKeySelectionTriggerStopSignal = Enums.TriggerStopSignals.NextHigh;                          break;                        case Enums.TriggerSources.KeyboardKeyDownsUps:                      case Enums.TriggerSources.MouseButtonDownUps:                          MultiKeySelectionTriggerStopSignal = Enums.TriggerStopSignals.NextLow;                          break;                  }
Missing Default,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.TopGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.OutputPanel = ((JuliusSweetland.OptiKey.UI.Controls.Output)(target));              return;              case 3:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,D:\research\architectureSmells\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey.Core\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following switch statement is missing a default case: switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }
