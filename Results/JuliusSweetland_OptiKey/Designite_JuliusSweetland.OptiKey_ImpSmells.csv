Implementation smell,Namespace,Class,File,Method,Description
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The method has 116 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The method has 111 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The method has 186 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The method has 114 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,GenerateContent,The method has 252 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The method has 1059 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,InitialiseKeyboard,The method has 102 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The method has 177 lines of code.
Complex Method,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateCalibrationService,Cyclomatic complexity of the method is 11
Complex Method,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,Cyclomatic complexity of the method is 54
Complex Method,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,Cyclomatic complexity of the method is 18
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToDescription,Cyclomatic complexity of the method is 19
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToCultureInfo,Cyclomatic complexity of the method is 19
Complex Method,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToDescription,Cyclomatic complexity of the method is 13
Complex Method,JuliusSweetland.OptiKey.Extensions,FunctionKeysExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\FunctionKeysExtensions.cs,ToVirtualKeyCode,Cyclomatic complexity of the method is 34
Complex Method,JuliusSweetland.OptiKey.Extensions,KeyValueExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\KeyValueExtensions.cs,ReduceToSequentiallyDistinctLetters,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,Cyclomatic complexity of the method is 9
Complex Method,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,Cyclomatic complexity of the method is 10
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,Cyclomatic complexity of the method is 32
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,Cyclomatic complexity of the method is 9
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,Cyclomatic complexity of the method is 27
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplySavedState,Cyclomatic complexity of the method is 22
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,Cyclomatic complexity of the method is 24
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,Cyclomatic complexity of the method is 24
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,Cyclomatic complexity of the method is 16
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistSizeAndPosition,Cyclomatic complexity of the method is 10
Complex Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,Cyclomatic complexity of the method is 14
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,Cyclomatic complexity of the method is 63
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,Cyclomatic complexity of the method is 16
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,PublishKeyPress,Cyclomatic complexity of the method is 13
Complex Method,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,Cyclomatic complexity of the method is 12
Complex Method,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,TextChanged,Cyclomatic complexity of the method is 11
Complex Method,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,GenerateContent,Cyclomatic complexity of the method is 119
Complex Method,JuliusSweetland.OptiKey.UI.TriggerActions,CalibrateWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\CalibrateWindowAction.cs,Invoke,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,Cyclomatic complexity of the method is 552
Complex Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,InitialiseKeyboard,Cyclomatic complexity of the method is 79
Complex Method,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,Cyclomatic complexity of the method is 31
Long Parameter List,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The method has 6 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The method has 13 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Models,KeyEnabledStates,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyEnabledStates.cs,KeyEnabledStates,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Native,PInvoke,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Native\Common\PInvoke.cs,GetTokenInformation,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,KeyStateService,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,SpeakNewOrInterruptCurrentSpeech,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,Speak,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The method has 6 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ToCleansedUncleansedStrings,The method has 6 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,IAudioService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\IAudioService.cs,SpeakNewOrInterruptCurrentSpeech,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,IDictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\IDictionaryService.cs,MapCaptureToEntries,The method has 6 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,InputService,The method has 7 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The method has 18 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,AppBarPositionChangeCallback,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The method has 8 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The method has 6 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,KeyboardOutputService,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Observables.TriggerSources,KeyFixationSource,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Observables\TriggerSources\KeyFixationSource.cs,KeyFixationSource,The method has 6 parameters.
Long Parameter List,JuliusSweetland.OptiKey.Observables.TriggerSources,PointFixationSource,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Observables\TriggerSources\PointFixationSource.cs,PointFixationSource,The method has 5 parameters.
Long Parameter List,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,MainViewModel,The method has 12 parameters.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The length of the parameter getLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The length of the parameter setLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the parameter charsWithCountWithoutReliableFirstOrLast is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter getFullDockThicknessAsPercentageOfScreen is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter getCollapsedDockThicknessAsPercentageOfFullDockThickness is 56.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter saveFullDockThicknessAsPercentageOfScreen is 41.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter saveCollapsedDockThicknessAsPercentageOfFullDockThickness is 57.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the parameter maxCollapsedDockHeightAdjustment is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the parameter maxCollapsedDockWidthAdjustment is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the parameter fullDockThicknessAsPercentageOfScreen is 37.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the parameter collapsedDockThicknessAsPercentageOfFullDockThickness is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The length of the parameter fullDockThicknessAsPercentageOfScreen is 37.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The length of the parameter collapsedDockThicknessAsPercentageOfFullDockThickness is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter generateAutoCompleteSuggestions is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,CursorBehaviours,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\CursorBehaviours.cs,BeginAnimationOnPointSelectionEventChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,KeyBehaviours,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\KeyBehaviours.cs,BeginAnimationOnKeySelectionEventChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,ScrollViewerBehaviours,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\ScrollViewerBehaviours.cs,AutoScrollToEndOnPropertyOrCollectionChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the parameter screenCoordinatesIndexUpperBound is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,PropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the parameter keySelectionProgressSubscription is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the parameter capturingMultiKeySelectionSubscription is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,TextChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the parameter notificationWithServicesAndState is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationAlpha is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationNumericAndSymbols is 42.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter conversationNumericAndSymbolsBackAction is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,AttachKeyboardSupportsCollapsedDockListener,The length of the parameter resizeDockIfCollapsedDockingNotSupported is 40.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "		IKeyStateService keyStateService = new KeyStateService (suggestionService' capturingStateManager' lastMouseActionStateManager' calibrationService' fireKeySelectionEvent); " is 170.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "		IInputService inputService = CreateInputService (keyStateService' dictionaryService' audioService' calibrationService' capturingStateManager' errorNotifyingServices); " is 166.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "		IKeyboardOutputService keyboardOutputService = new KeyboardOutputService (keyStateService' suggestionService' publishService' dictionaryService' fireKeySelectionEvent); " is 168.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "		mainViewModel = new MainViewModel (audioService' calibrationService' dictionaryService' keyStateService' suggestionService' capturingStateManager' lastMouseActionStateManager' inputService' keyboardOutputService' mouseOutputService' mainWindowManipulationService' errorNotifyingServices); " is 288.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "		//Setup actions to take once main view is loaded (i.e. the view is ready' so hook up the services which kicks everything off) " is 125.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "		//Display splash screen and check for updates (and display message) after the window has been sized and positioned for the 1st time " is 131.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Getting MainWindowPreviousState from settings with value '{0}'"' Settings.Default.MainWindowPreviousState); " is 125.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Getting MainWindowFloatingSizeAndPosition from settings with value '{0}'"' Settings.Default.MainWindowFloatingSizeAndPosition); " is 145.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Getting MainWindowDockPosition from settings with value '{0}'"' Settings.Default.MainWindowDockPosition); " is 123.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Getting MainWindowFullDockThicknessAsPercentageOfScreen from settings with value '{0}'"' Settings.Default.MainWindowFullDockThicknessAsPercentageOfScreen); " is 173.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Getting MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness from settings with value '{0}'"' Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness); " is 205.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Getting MainWindowMinimisedPosition from settings with value '{0}'"' Settings.Default.MainWindowMinimisedPosition); " is 133.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "			Log.DebugFormat ("Storing MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness to settings with value '{0}'"' t); " is 124.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttachUnhandledExceptionHandlers,The length of the statement  "	Current.DispatcherUnhandledException += (sender' args) => Log.Error ("A DispatcherUnhandledException has been encountered..."' args.Exception); " is 143.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttachUnhandledExceptionHandlers,The length of the statement  "	AppDomain.CurrentDomain.UnhandledException += (sender' args) => Log.Error ("An UnhandledException has been encountered..."' args.ExceptionObject as Exception); " is 159.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttachUnhandledExceptionHandlers,The length of the statement  "	TaskScheduler.UnobservedTaskException += (sender' args) => Log.Error ("An UnobservedTaskException has been encountered..."' args.Exception); " is 140.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,HandleCorruptSettings,The length of the statement  "		if (MessageBox.Show (OptiKey.Properties.Resources.CORRUPTED_SETTINGS_MESSAGE' OptiKey.Properties.Resources.CORRUPTED_SETTINGS_TITLE' MessageBoxButton.YesNo' MessageBoxImage.Error) == MessageBoxResult.Yes) { " is 206.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		pointSource = new GazeTrackerSource (Settings.Default.PointTtl' Settings.Default.GazeTrackerUdpPort' new Regex (GazeTrackerUdpRegex)); " is 134.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		throw new ArgumentException ("'PointsSource' settings is missing or not recognised! Please correct and restart OptiKey."); " is 122.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		keySelectionTriggerSource = new KeyFixationSource (Settings.Default.KeySelectionTriggerFixationLockOnTime' Settings.Default.KeySelectionTriggerFixationResumeRequiresLockOn' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime' Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey ? Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues : null' Settings.Default.KeySelectionTriggerIncompleteFixationTtl' pointSource); " is 462.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		keySelectionTriggerSource = new KeyboardKeyDownUpSource (Settings.Default.KeySelectionTriggerKeyboardKeyDownUpKey' pointSource); " is 128.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		keySelectionTriggerSource = new MouseButtonDownUpSource (Settings.Default.KeySelectionTriggerMouseDownUpButton' pointSource); " is 125.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		throw new ArgumentException ("'KeySelectionTriggerSource' setting is missing or not recognised! Please correct and restart OptiKey."); " is 134.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		pointSelectionTriggerSource = new PointFixationSource (Settings.Default.PointSelectionTriggerFixationLockOnTime' Settings.Default.PointSelectionTriggerFixationCompleteTime' Settings.Default.PointSelectionTriggerLockOnRadiusInPixels' Settings.Default.PointSelectionTriggerFixationRadiusInPixels' pointSource); " is 308.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		pointSelectionTriggerSource = new KeyboardKeyDownUpSource (Settings.Default.PointSelectionTriggerKeyboardKeyDownUpKey' pointSource); " is 132.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		pointSelectionTriggerSource = new MouseButtonDownUpSource (Settings.Default.PointSelectionTriggerMouseDownUpButton' pointSource); " is 129.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "		throw new ArgumentException ("'PointSelectionTriggerSource' setting is missing or not recognised! " + "Please correct and restart OptiKey."); " is 141.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "	var inputService = new InputService (keyStateService' dictionaryService' audioService' capturingStateManager' pointSource' keySelectionTriggerSource' pointSelectionTriggerSource); " is 179.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "		message.AppendLine (string.Format (OptiKey.Properties.Resources.KEYBOARD_AND_DICTIONARY_LANGUAGE_DESCRIPTION' Settings.Default.KeyboardAndDictionaryLanguage.ToDescription ())); " is 176.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "		message.AppendLine (string.Format (OptiKey.Properties.Resources.UI_LANGUAGE_DESCRIPTION' Settings.Default.UiLanguage.ToDescription ())); " is 136.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "		message.AppendLine (string.Format (OptiKey.Properties.Resources.POINTING_SOURCE_DESCRIPTION' Settings.Default.PointsSource.ToDescription ())); " is 142.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "			keySelectionSb.Append (string.Format (OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds)); " is 168.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "			pointSelectionSb.Append (string.Format (OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds)); " is 165.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "		mainViewModel.RaiseToastNotification (OptiKey.Properties.Resources.OPTIKEY_DESCRIPTION' message.ToString ()' NotificationTypes.Normal' () => { " is 142.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CheckForUpdates,The length of the statement  "					var tagNameWithoutLetters = new string (latestRelease.TagName.ToCharArray ().Where (c => !char.IsLetter (c)).ToArray ()); " is 121.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CheckForUpdates,The length of the statement  "						Log.InfoFormat ("An update is available. Current version is {0}. Latest version on GitHub repo is {1}"' currentVersion' latestAvailableVersion); " is 144.
Long Statement,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CheckForUpdates,The length of the statement  "						mainViewModel.RaiseToastNotification (OptiKey.Properties.Resources.UPDATE_AVAILABLE' string.Format (OptiKey.Properties.Resources.URL_DOWNLOAD_PROMPT' latestRelease.TagName)' NotificationTypes.Normal' () => { " is 207.
Long Statement,JuliusSweetland.OptiKey.DataFilters,KalmanFilter,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\DataFilters\KalmanFilter.cs,Update,The length of the statement  "	EstimationConfidence = MeasurementNoise * (EstimationConfidence + ProcessNoise) / (MeasurementNoise + EstimationConfidence + ProcessNoise); " is 139.
Long Statement,JuliusSweetland.OptiKey.Extensions,IKeyStateServiceExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\IKeyStateServiceExtensions.cs,ReleaseModifiers,The length of the statement  "	log.InfoFormat ("Releasing modifiers (shift:{0}' ctrl:{1}' win:{2}' alt:{3})"' lastLeftShiftValue' lastLeftCtrlValue' lastLeftWinValue' lastLeftAltValue); " is 154.
Long Statement,JuliusSweetland.OptiKey.Extensions,IKeyStateServiceExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\IKeyStateServiceExtensions.cs,ReleaseModifiers,The length of the statement  "		log.InfoFormat ("Restoring modifiers (shift:{0}' ctrl:{1}' win:{2}' alt:{3})"' lastLeftShiftValue' lastLeftCtrlValue' lastLeftWinValue' lastLeftAltValue); " is 154.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,ToPrintableString,The length of the statement  "	var escapedLiteralString = c.ToString (CultureInfo.InvariantCulture).Replace ("\0"' @"\0").Replace ("\a"' @"\a").Replace ("\b"' @"\b").Replace ("\t"' @"\t").Replace ("\f"' @"\f").Replace ("\n"' @"\n").Replace ("\r"' @"\r"); " is 223.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "	return category == UnicodeCategory.NonSpacingMark //(All combining diacritic characters are non-spacing marks). Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn"(mark' nonspacing).The value is 5. " is 258.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "	|| category == UnicodeCategory.SpacingCombiningMark //Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark' spacing combining). The value is 6. " is 265.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "	//Enclosing mark character' which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark' enclosing). The value is 7. " is 223.
Long Statement,JuliusSweetland.OptiKey.Extensions,KeyValueExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\KeyValueExtensions.cs,ReduceToSequentiallyDistinctLetters,The length of the statement  "			while (index < keyValues.Count && string.Equals (keyValues [index].String' currentLetter' StringComparison.InvariantCultureIgnoreCase)) { " is 137.
Long Statement,JuliusSweetland.OptiKey.Extensions,PointExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\PointExtensions.cs,CalculateCentrePoint,The length of the statement  "	return new Point (Math.Round (points.Average (p => p.X)' MidpointRounding.AwayFromZero)' Math.Round (points.Average (p => p.Y)' MidpointRounding.AwayFromZero)); " is 160.
Long Statement,JuliusSweetland.OptiKey.Extensions,PointExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\PointExtensions.cs,ToKeyValue,The length of the statement  "	Rect? keyRect = pointToKeyValueMap != null ? pointToKeyValueMap.Keys.FirstOrDefault (r => r.Contains (point)) : (Rect?)null; " is 124.
Long Statement,JuliusSweetland.OptiKey.Extensions,PointExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\PointExtensions.cs,ToKeyValue,The length of the statement  "	return keyRect != null && pointToKeyValueMap.ContainsKey (keyRect.Value) ? pointToKeyValueMap [keyRect.Value] : (KeyValue?)null; " is 128.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,ExtractWordsAndLines,The length of the statement  "	var words = text.Split (' '' '\t'' '\n'' ''').Select (s => s.CleanupPossibleDictionaryEntry ()).Where (sanitisedMatch => sanitisedMatch != null).ToList (); " is 155.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,ExtractWordsAndLines,The length of the statement  "	var lines = text.Split ('\n').Select (line => line.CleanupPossibleDictionaryEntry ()).Where (sanitisedMatch => sanitisedMatch != null).ToList (); " is 145.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "		//(All combining diacritic characters are non-spacing marks). Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn"(mark' nonspacing).The value is 5. " is 208.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "		//Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark' spacing combining). The value is 6. " is 213.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "			//Enclosing mark character' which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark' enclosing). The value is 7. " is 223.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,FirstCharToUpper,The length of the statement  "	return string.Concat (input.First ().ToString ().ToUpper (Settings.Default.KeyboardAndDictionaryLanguage.ToCultureInfo ())' input.Substring (1)); " is 145.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The length of the statement  "	if (ignoreSingleTrailingSpace && input.Length >= 2 && input [input.Length - 1].ToCharCategory () == CharCategories.Space && input [input.Length - 2].ToCharCategory () == CharCategories.LetterOrDigitOrSymbolOrPunctuation) { " is 222.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The length of the statement  "	Log.DebugFormat ("CountBackToLastCharCategoryBoundary called with '{0}' - boundary calculated as {1} characters from end."' input' count); " is 138.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,InProgressWord,The length of the statement  "	if (!string.IsNullOrWhiteSpace (input) && cursorIndex > 0 && cursorIndex <= input.Length && !char.IsWhiteSpace (input [cursorIndex - 1]))//Character before cursor position is not whitespace' i.e. at least 1 letter of the word is before the cursor position " is 255.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,PublishLivePointsOnly,The length of the statement  "	var usefulSource = source.FilterOutStaleOnArrival (pointTtl).Select (x => new Timestamped<Point?> (x.Value' x.Timestamp)); " is 122.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,PublishLivePointsOnly,The length of the statement  "	return usefulSource.Merge (staleSource).StartWith (new Timestamped<Point?> (null' DateTimeOffset.Now.ToUniversalTime ())); " is 122.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,FilterOutStaleOnArrival,The length of the statement  "			Log.Warn (string.Format ("Point received which was stale on arrival. Timestamp of point:{0}ms old (TTL is {1}ms). Discarding it."' ageOfPoint.TotalMilliseconds' pointTtl.TotalMilliseconds)); " is 190.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,Dump,The length of the statement  "	source.Subscribe (i => Console.WriteLine ("{0}-->{1}"' name' i)' ex => Console.WriteLine ("{0} failed-->{1}"' name' ex.Message)' () => Console.WriteLine ("{0} completed"' name)); " is 178.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,OnPropertyChanges,The length of the statement  "		return Observable.FromEventPattern<PropertyChangedEventHandler' PropertyChangedEventArgs> (handler => handler.Invoke' h => source.PropertyChanged += h' h => source.PropertyChanged -= h).Where (e => e.EventArgs.PropertyName == propertyName).Select (e => propertySelector (source)).Subscribe (o); " is 294.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,OnAnyPropertyChanges,The length of the statement  "	return Observable.FromEventPattern<PropertyChangedEventHandler' PropertyChangedEventArgs> (handler => handler.Invoke' h => source.PropertyChanged += h' h => source.PropertyChanged -= h).Select (_ => source); " is 207.
Long Statement,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,RestoreState,The length of the statement  "	Log.InfoFormat ("Restoring KeyboardOutputService state for SimulateKeyStrokes={0}. Text:'{1}'' LastTextChange:'{2}'' LastTextChangeWasSuggestion:'{3}'' SuppressNextAutoSpace:'{4}'' ShiftStateSetAutomatically:'{5}'' Suggestions:'{6}'"' simulateKeyStrokes' text' lastTextChange' lastTextChangeWasSuggestion' suppressNextAutoSpace' shiftStateSetAutomatically' suggestions.ToString ("(null)")); " is 390.
Long Statement,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,Equals,The length of the statement  "	return (Name == kvats.Name) && (KeyValue == kvats.KeyValue) && (TimeSpanTotalMilliseconds == kvats.TimeSpanTotalMilliseconds); " is 126.
Long Statement,JuliusSweetland.OptiKey.Models,KeyEnabledStates,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyEnabledStates.cs,SuggestionKeyIsValid,The length of the statement  "	return suggestionService.Suggestions != null && suggestionService.Suggestions.Any () && suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage * suggestionService.SuggestionsPerPage + index); " is 209.
Long Statement,JuliusSweetland.OptiKey.Services.AutoComplete,BasicAutoComplete,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AutoComplete\BasicAutoComplete.cs,GetSuggestions,The length of the statement  "			return entriesForAutoComplete.Where (kvp => kvp.Key.StartsWith (simplifiedRoot' StringComparison.Ordinal)).SelectMany (kvp => kvp.Value).Where (de => de.Entry.Length >= root.Length).Distinct ()// Phrases are stored in entriesForAutoComplete with multiple hashes (one the full version " is 283.
Long Statement,JuliusSweetland.OptiKey.Services.AutoComplete,NGramAutoComplete,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AutoComplete\NGramAutoComplete.cs,GetSuggestions,The length of the statement  "	}).OrderByDescending (x => x.Score).ThenByDescending (x => x.MetaData.DictionaryEntry.UsageCount).Select (x => x.MetaData.DictionaryEntry.Entry); " is 145.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ProgressKeyDownState,The length of the statement  "	if (KeyValues.KeysWhichCanBePressedDown.Contains (keyValue) && KeyDownStates [keyValue].Value == Enums.KeyDownStates.Up) { " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ProgressKeyDownState,The length of the statement  "	} else if (KeyValues.KeysWhichCanBeLockedDown.Contains (keyValue) && !KeyValues.KeysWhichCanBePressedDown.Contains (keyValue) && KeyDownStates [keyValue].Value == Enums.KeyDownStates.Up) { " is 188.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ProgressKeyDownState,The length of the statement  "	} else if (KeyValues.KeysWhichCanBeLockedDown.Contains (keyValue) && KeyDownStates [keyValue].Value == Enums.KeyDownStates.Down) { " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ProgressKeyDownState,The length of the statement  "		Log.DebugFormat ("Changing key down state of '{0}' key from {1} to UP."' keyValue' KeyDownStates [keyValue].Value == Enums.KeyDownStates.Down ? "DOWN" : "LOCKED DOWN"); " is 168.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,InitialiseKeyDownStates,The length of the statement  "	KeyDownStates [KeyValues.MouseMagnifierKey].Value = Settings.Default.MouseMagnifierLockedDown ? Enums.KeyDownStates.LockedDown : Enums.KeyDownStates.Up; " is 152.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,InitialiseKeyDownStates,The length of the statement  "	KeyDownStates [KeyValues.LeftShiftKey].Value = Settings.Default.ForceCapsLock ? Enums.KeyDownStates.LockedDown : Enums.KeyDownStates.Up; " is 136.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,SetMultiKeySelectionKeyStateFromSetting,The length of the statement  "	KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value = Settings.Default.MultiKeySelectionEnabled && ((SimulateKeyStrokes && Settings.Default.MultiKeySelectionLockedDownWhenSimulatingKeyStrokes) || (!SimulateKeyStrokes && Settings.Default.MultiKeySelectionLockedDownWhenNotSimulatingKeyStrokes)) ? Enums.KeyDownStates.LockedDown : Enums.KeyDownStates.Up; " is 357.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,The length of the statement  "			Log.Info ("No stored KeyStateService state to restore for SimulateKeyStrokes=true. Defaulting Multi-Key Selection key state."); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,The length of the statement  "			Log.Info ("No stored KeyStateService state to restore for SimulateKeyStrokes=false.  Defaulting Multi-Key Selection key state & releasing all publish only keys."); " is 163.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,AddKeyDownStatesChangeHandlers,The length of the statement  "	KeyDownStates [KeyValues.MouseMagnifierKey].OnPropertyChanges (s => s.Value).Subscribe (value => Settings.Default.MouseMagnifierLockedDown = KeyDownStates [KeyValues.MouseMagnifierKey].Value == Enums.KeyDownStates.LockedDown); " is 226.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,AddKeyDownStatesChangeHandlers,The length of the statement  "			Settings.Default.MultiKeySelectionLockedDownWhenSimulatingKeyStrokes = KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value == Enums.KeyDownStates.LockedDown; " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,AddKeyDownStatesChangeHandlers,The length of the statement  "			Settings.Default.MultiKeySelectionLockedDownWhenNotSimulatingKeyStrokes = KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value == Enums.KeyDownStates.LockedDown; " is 165.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,AddKeyDownStatesChangeHandlers,The length of the statement  "	KeyValues.KeysWhichPreventTextCaptureIfDownOrLocked.ForEach (kv => KeyDownStates [kv].OnPropertyChanges (s => s.Value).Subscribe (value => CalculateMultiKeySelectionSupported ())); " is 180.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,CalculateMultiKeySelectionSupported,The length of the statement  "	if (KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown () && KeyValues.KeysWhichPreventTextCaptureIfDownOrLocked.Any (kv => KeyDownStates [kv].Value.IsDownOrLockedDown ())) { " is 199.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,CalculateMultiKeySelectionSupported,The length of the statement  "		//Automatically turn multi-key capture back on again when appropriate if it is currently locked down (if it is just down then let it go) " is 136.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,CalculateMultiKeySelectionSupported,The length of the statement  "		turnOnMultiKeySelectionWhenKeysWhichPreventTextCaptureAreReleased = KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value == Enums.KeyDownStates.LockedDown; " is 159.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,CalculateMultiKeySelectionSupported,The length of the statement  "	} else if (turnOnMultiKeySelectionWhenKeysWhichPreventTextCaptureAreReleased && !KeyValues.KeysWhichPreventTextCaptureIfDownOrLocked.Any (kv => KeyDownStates [kv].Value.IsDownOrLockedDown ()) && Settings.Default.MultiKeySelectionEnabled) { " is 239.
Long Statement,JuliusSweetland.OptiKey.Services,AudioService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,GetAvailableVoices,The length of the statement  "	var availableVoices = new SpeechSynthesizer ().GetInstalledVoices ().Where (v => v.Enabled).Select (v => v.VoiceInfo.Name).ToList (); " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,AudioService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,Speak,The length of the statement  "			var customException = new ApplicationException (string.Format (Resources.UNABLE_TO_SET_VOICE_WARNING' voiceToUse' voice == null ? Resources.VOICE_COMES_FROM_SETTINGS : null)' exception); " is 186.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadDictionary,The length of the statement  "	Log.InfoFormat ("LoadDictionary called. Keyboard language setting is '{0}'."' Settings.Default.KeyboardAndDictionaryLanguage); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadDictionary,The length of the statement  "			var originalDictionaryPath = Path.GetFullPath (string.Format (@"{0}{1}{2}"' OriginalDictionariesSubPath' Settings.Default.KeyboardAndDictionaryLanguage' DictionaryFileType)); " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,GetUserDictionaryPath,The length of the statement  "	var applicationDataPath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' ApplicationDataSubPath); " is 135.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ExistsInDictionary,The length of the statement  "		var exists = entries.SelectMany (pair => pair.Value)//Expand out all values in the dictionary and all values in the sorted lists " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ExistsInDictionary,The length of the statement  "		.Select (dictionaryEntryWithUsageCount => dictionaryEntryWithUsageCount.Entry).Any (dictionaryEntry => !string.IsNullOrWhiteSpace (dictionaryEntry) && dictionaryEntry.Trim ().Equals (entryToFind.Trim ())); " is 205.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ExistsInDictionary,The length of the statement  "		Log.Debug (exists ? string.Format ("'{0}' exists in the dictionary"' entryToFind) : string.Format ("'{0}' does not exist in the dictionary"' entryToFind)); " is 155.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,AddEntryToDictionary,The length of the statement  "	if (entries != null && !string.IsNullOrWhiteSpace (entry) && (loadedFromDictionaryFile || !ExistsInDictionary (entry))) { " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,AddEntryToDictionary,The length of the statement  "				Log.DebugFormat ("Adding new (not loaded from dictionary file) entry '{0}' to in-memory dictionary with hash '{1}'"' entry' hash); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,GetAllEntries,The length of the statement  "		var enumerator = entries.SelectMany (entry => entry.Value).OrderBy (entryWithUsageCount => entryWithUsageCount.Entry).GetEnumerator (); " is 135.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "	Log.DebugFormat ("PerformIncrementOrDecrementOfEntryUsageCount called with entry '{0}' and isIncrement={1}"' text' isIncrement); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "				var matchesWhichAreNotAllCaps = entries [hash].Where (dictionaryEntry => string.Equals (dictionaryEntry.Entry' text' StringComparison.InvariantCultureIgnoreCase) && !dictionaryEntry.Entry.All (char.IsUpper)); " is 208.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "				var allInvariantMatches = entries [hash].Where (dictionaryEntry => string.Equals (dictionaryEntry.Entry' text' StringComparison.InvariantCultureIgnoreCase)); " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "						Log.Warn (string.Format ("An attempt was made to decrement the usage count of entry '{0}'' but the usage count was zero so no action was taken."' match.Entry)); " is 160.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		Log.DebugFormat ("Mapping capture to dictionary entries with {0} timestamped points/key values"' timestampedPointAndKeyValues != null ? timestampedPointAndKeyValues.Count : 0); " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		var points = timestampedPointAndKeyValues == null ? new List<Point> () : timestampedPointAndKeyValues.Select (tp => tp.Value.Point).ToList (); " is 142.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		var charsWithCount = timestampedPointAndKeyValues != null ? timestampedPointAndKeyValues.Where (tp => tp.Value.StringIsLetter).Select (tp => tp.Value.String).ToCharListWithCounts () : new List<Tuple<char' char' int>> (); " is 220.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "			if (index == charsWithCount.Count - 1 && reliableLastCharCleansed != null && cwc.Item1 == reliableLastCharCleansed.Value) " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		int thresholdCount = charsWithCountWithoutReliableFirstOrLast.Any () ? Math.Max ((int)Math.Floor (charsWithCountWithoutReliableFirstOrLast.Average (cwc => cwc.Item3))' minCount) //Coerce threshold up to minimum count from settings " is 230.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		var filteredStrings = ToCleansedUncleansedStrings (charsWithCount' thresholdCount' reliableFirstCharCleansed' reliableFirstCharUncleansed' reliableLastCharCleansed' reliableLastCharUncleansed); " is 193.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		GetHashes ().AsParallel ().WithCancellation (cancellationTokenSource.Token).Where (hash => reliableFirstCharCleansed == null || hash.First () == reliableFirstCharCleansed.Value).Where (hash => reliableLastCharCleansed == null || hash.Last () == reliableLastCharCleansed.Value).Select (hash => { " is 294.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		}).OrderByDescending (x => x.SimilarityToMeanFilteredString).ThenByDescending (x => x.HashLastLetter == x.CaptureLastLetter)//Matching last letter - assume some reliability " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		.SelectMany (x => GetEntries (x.Hash)).Take (Settings.Default.MaxDictionaryMatchesOrSuggestions).ToList ().ForEach (matches.Add); " is 129.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "		return new Tuple<List<Point>' FunctionKeys?' string' List<string>> (points' null' null' matches.Any () ? matches : null); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ToCleansedUncleansedStrings,The length of the statement  "	var charsAboveThresold = charsWithCount.Where (cwc => (double)cwc.Item3 >= threshold).Select (cwc => new Tuple<char' char> (cwc.Item1' cwc.Item2)).ToArray (); " is 158.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ToCleansedUncleansedStrings,The length of the statement  "	if (firstCharCleansed != null && (!charsAboveThresold.Any () || charsAboveThresold.First ().Item1 != firstCharCleansed.Value)) { " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,GetEntries,The length of the statement  "		var enumerator = entries [hash].OrderByDescending (entryWithUsageCount => entryWithUsageCount.UsageCount).Select (entryWithUsageCount => entryWithUsageCount.Entry).GetEnumerator (); " is 181.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,CreateAutoComplete,The length of the statement  "		return new NGramAutoComplete (Settings.Default.NGramAutoCompleteGramCount' Settings.Default.NGramAutoCompleteLeadingSpaceCount' Settings.Default.NGramAutoCompleteTrailingSpaceCount); " is 182.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreatePointsPerSecondSubscription,The length of the statement  "	pointsPerSecondSubscription = pointSource.Sequence.Where (tp => tp.Value != null)//Filter out stale indicators - we only want 'live'/useful points in our count " is 159.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateCurrentPositionSubscription,The length of the statement  "	currentPositionSubscription = pointSource.Sequence.Where (tp => tp.Value != null).Select (tp => new Tuple<Point' KeyValue?> (tp.Value.Value.Point' SelectionMode == SelectionModes.Key ? tp.Value.Value.KeyValue : null)).DistinctUntilChanged ().ObserveOnDispatcher ()//Subscribe on UI thread " is 288.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateSelectionProgressSubscription,The length of the statement  "		selectionProgressSubscription = selectionTriggerSource.Sequence.Where (ts => ts.Progress != null).DistinctUntilChanged ().ObserveOnDispatcher ().Subscribe (ts => { " is 163.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateSelectionSubscriptions,The length of the statement  "		selectionTriggerSubscription = selectionTriggerSource.Sequence.ObserveOnDispatcher ().Subscribe (ProcessSelectionTrigger); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "				if (triggerSignal.PointAndKeyValue.Value.KeyValue != null && (keyStateService.KeyEnabledStates == null || keyStateService.KeyEnabledStates [triggerSignal.PointAndKeyValue.Value.KeyValue.Value])) { " is 196.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "					if (MultiKeySelectionSupported && keyStateService.KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown () && triggerSignal.PointAndKeyValue.Value.KeyValue != null && KeyValues.MultiKeySelectionKeys.Contains (triggerSignal.PointAndKeyValue.Value.KeyValue.Value) && !KeyValues.CombiningKeys.Any (key => keyStateService.KeyDownStates [key].Value.IsDownOrLockedDown ()))//Do not start if any combining ("dead") keys are down " is 443.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "						Log.Debug ("Multi-key selection is currently enabled and the key on which the trigger occurred is a letter. Publishing the selection and beginning a new multi-key selection capture."); " is 184.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "						multiKeySelectionSubscription = CreateMultiKeySelectionSubscription ().ObserveOnDispatcher ().Subscribe (async pointsAndKeyValues => await ProcessMultiKeySelectionResult (pointsAndKeyValues' triggerSignal)' (exception => { " is 222.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "						}' triggerSignal.PointAndKeyValue.Value.KeyValue.Value.FunctionKey' triggerSignal.PointAndKeyValue.Value.KeyValue.Value.String' null)); " is 135.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "			Log.Error ("TriggerSignal.Signal==1' but TriggerSignal.PointAndKeyValue is null. " + "Discarding trigger as point source is down' or producing stale points. " + "Publishing error instead."); " is 190.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "		if ((triggerSignal.Signal >= 1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextHigh) || (triggerSignal.Signal <= -1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextLow)) { " is 237.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "			if (!(selectionTriggerSource is IFixationTriggerSource) || (triggerSignal.PointAndKeyValue != null && triggerSignal.PointAndKeyValue.Value.StringIsLetter)) { " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateMultiKeySelectionSubscription,The length of the statement  "		var intervalSubscription = Observable.Interval (Settings.Default.MultiKeySelectionMaxDuration).Where (_ => disposed == false).Subscribe (i => observer.OnError (new TimeoutException ("Multi-key capture has exceeded the maximum duration"))); " is 239.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateMultiKeySelectionSubscription,The length of the statement  "		.Select (tp => new Timestamped<PointAndKeyValue> (tp.Value.Value' tp.Timestamp)).TakeWhile (tp => stopMultiKeySelectionTriggerSignal == null).ToList ().Subscribe (points => { " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			var sequenceThreshold = (int)Math.Round (((double)pointsAndKeyValues.Count / (double)timeSpan.TotalMilliseconds) * Settings.Default.MultiKeySelectionFixationMinDwellTime.TotalMilliseconds); " is 189.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			Log.DebugFormat ("Multi-key selection capture lasted {0}ms. Minimum dwell time is {1}ms' or {2} points."' timeSpan.TotalMilliseconds' Settings.Default.MultiKeySelectionFixationMinDwellTime.TotalMilliseconds' sequenceThreshold); " is 227.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			string reliableFirstLetter = startMultiKeySelectionTriggerSignal != null && startMultiKeySelectionTriggerSignal.Value.PointAndKeyValue != null && startMultiKeySelectionTriggerSignal.Value.PointAndKeyValue.Value.StringIsLetter ? startMultiKeySelectionTriggerSignal.Value.PointAndKeyValue.Value.String : null; " is 307.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			Log.DebugFormat ("First letter ('{0}') of multi-key selection capture {1} reliable."' reliableFirstLetter' reliableFirstLetter != null ? "IS" : "IS NOT"); " is 154.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			string reliableLastLetter = selectionTriggerSource is IFixationTriggerSource && stopMultiKeySelectionTriggerSignal != null && stopMultiKeySelectionTriggerSignal.Value.PointAndKeyValue != null && stopMultiKeySelectionTriggerSignal.Value.PointAndKeyValue.Value.StringIsLetter ? stopMultiKeySelectionTriggerSignal.Value.PointAndKeyValue.Value.String : null; " is 354.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			Log.DebugFormat ("Last letter ('{0}') of multi-key selection capture {1} reliable."' reliableLastLetter' reliableLastLetter != null ? "IS" : "IS NOT"); " is 151.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			//Why am I wrapping this call in a Task.Run? Internally the MapCaptureToEntries method uses PLINQ which also blocks the UI thread - this frees it up. " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "			//This cannot be done inside the MapCaptureToEntries method as the method takes a ref param' which cannot be used inside an anonymous delegate or lambda. " is 153.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "				result = dictionaryService.MapCaptureToEntries (pointsAndKeyValues.ToList ()' sequenceThreshold' reliableFirstLetter' reliableLastLetter' ref mapToDictionaryMatchesCancellationTokenSource' exception => PublishError (this' exception)); " is 234.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishCurrentPosition,The length of the statement  "		Log.DebugFormat ("Publishing CurrentPosition event with Point:{0} KeyValue:{1}"' currentPosition.Item1' currentPosition.Item2); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionResult,The length of the statement  "		Log.DebugFormat ("Publishing Selection Result event with {0} point(s)' FunctionKey:'{1}'' String:'{2}'' Best match '{3}'' Suggestion count:{4}"' selectionResult.Item1 != null ? selectionResult.Item1.Count : (int?)null' selectionResult.Item2' selectionResult.Item3.ToPrintableString ()' selectionResult.Item4 != null && selectionResult.Item4.Any () ? selectionResult.Item4.First () : null' selectionResult.Item4 != null ? selectionResult.Item4.Count : (int?)null); " is 463.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndLeftClick,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and left clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndLeftDoubleClick,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and double left clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndMiddleClick,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and middle clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndRightClick,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and right clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelUp,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and scrolling up by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 147.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelDown,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and scrolling down by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelLeft,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and scrolling left by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelRight,The length of the statement  "	Log.DebugFormat ("Moving cursor to point '{0}' and scrolling right by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 150.
Long Statement,JuliusSweetland.OptiKey.Services,MyGazePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,SampleCallback,The length of the statement  "			pointEvent (this' new Timestamped<Point> (new Point (x.Value' y.Value)' new DateTimeOffset (DateTime.UtcNow).ToUniversalTime ())); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,MyGazePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,EventCallback,The length of the statement  "	if (pointEvent != null && !double.IsNaN (eventData.positionX) && eventData.positionX > 0 && !double.IsNaN (eventData.positionY) && eventData.positionY > 0) { " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,MyGazePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,EventCallback,The length of the statement  "		pointEvent (this' new Timestamped<Point> (new Point (eventData.positionX' eventData.positionY)' new DateTimeOffset (DateTime.UtcNow).ToUniversalTime ())); " is 154.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "	var yAdjustmentToBottom = distanceToBottomBoundary < 0 ? distanceToBottomBoundary : (amountInPx / Graphics.DipScalingFactorY).CoerceToUpperLimit (distanceToBottomBoundary); " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "	var yAdjustmentToTop = distanceToTopBoundary < 0 ? distanceToTopBoundary : (amountInPx / Graphics.DipScalingFactorY).CoerceToUpperLimit (distanceToTopBoundary); " is 160.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "	var xAdjustmentToLeft = distanceToLeftBoundary < 0 ? distanceToLeftBoundary : (amountInPx / Graphics.DipScalingFactorX).CoerceToUpperLimit (distanceToLeftBoundary); " is 164.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "	var xAdjustmentToRight = distanceToRightBoundary < 0 ? distanceToRightBoundary : (amountInPx / Graphics.DipScalingFactorX).CoerceToUpperLimit (distanceToRightBoundary); " is 168.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "		if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) { " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "				saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ()); " is 178.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "		} else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) { " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ()); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "		} else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) { " is 178.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ()); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "		} else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) { " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ()); " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	var distanceToBottomBoundaryIfFloating = screenBoundsInDp.Bottom - (floatingSizeAndPosition.Top + floatingSizeAndPosition.Height); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	var distanceToRightBoundaryIfFloating = screenBoundsInDp.Right - (floatingSizeAndPosition.Left + floatingSizeAndPosition.Width); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "		adjustment = Move (direction' amountInPx.Value' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating' windowState' floatingSizeAndPosition); " is 224.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "		adjustment = MoveToEdge (direction' windowState' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating); " is 187.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Restore,The length of the statement  "	if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height); " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width); " is 131.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height)); " is 229.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width)); " is 226.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) { " is 179.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100); " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ()); " is 180.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) { " is 180.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ()); " is 177.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) { " is 184.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ()); " is 177.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "		} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) { " is 182.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100); " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "				saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ()); " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplyAndPersistSizeAndPosition,The length of the statement  "	Log.InfoFormat ("ApplyAndPersistSizeAndPosition called with rect.Top:{0}' rect.Bottom:{1}' rect.Left:{2}' rect.Right:{3}"' rect.Top' rect.Bottom' rect.Left' rect.Right); " is 169.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplySavedState,The length of the statement  "		window.Dispatcher.BeginInvoke (DispatcherPriority.ApplicationIdle' new ApplySizeAndPositionDelegate (ApplyAndPersistSizeAndPosition)' getFloatingSizeAndPosition ()); " is 165.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplySavedState,The length of the statement  "		window.Dispatcher.BeginInvoke (DispatcherPriority.ApplicationIdle' new ApplySizeAndPositionDelegate (ApplyAndPersistSizeAndPosition)' minimisedSizeAndPosition); " is 160.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,The length of the statement  "	var thicknessAsPercentage = size == DockSizes.Full ? getFullDockThicknessAsPercentageOfScreen () / 100 : (getFullDockThicknessAsPercentageOfScreen () * getCollapsedDockThicknessAsPercentageOfFullDockThickness ()) / 10000; " is 221.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The length of the statement  "	var thicknessAsPercentage = (getFullDockThicknessAsPercentageOfScreen () * getCollapsedDockThicknessAsPercentageOfFullDockThickness ()) / 10000; " is 144.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "	if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) { " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "		if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) { " is 142.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "			Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen); " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "		double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness (); " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "		if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) { " is 192.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "			Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness); " is 147.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "		if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) { " is 504.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "			Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height); " is 338.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "			floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3)); " is 209.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	Log.InfoFormat ("Move called with direction:{0}' amountInPx:{1}' distanceToTopBoundaryIfFloating:{2}' distanceToBottomBoundaryIfFloating:{3}' distanceToLeftBoundaryIfFloating:{4}' distanceToRightBoundaryIfFloating: {5}' windowState:{6}' floatingSizeAndPosition.Top:{7}' floatingSizeAndPosition.Bottom:{8}' floatingSizeAndPosition.Left:{9}' floatingSizeAndPosition.Right:{10}"' direction' amountInPx' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating' windowState' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right); " is 673.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	var yAdjustmentToBottom = distanceToBottomBoundaryIfFloating < 0 ? distanceToBottomBoundaryIfFloating : yAdjustmentAmount.CoerceToUpperLimit (distanceToBottomBoundaryIfFloating); " is 178.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	var yAdjustmentToTop = distanceToTopBoundaryIfFloating < 0 ? distanceToTopBoundaryIfFloating : yAdjustmentAmount.CoerceToUpperLimit (distanceToTopBoundaryIfFloating); " is 166.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	var xAdjustmentToLeft = distanceToLeftBoundaryIfFloating < 0 ? distanceToLeftBoundaryIfFloating : xAdjustmentAmount.CoerceToUpperLimit (distanceToLeftBoundaryIfFloating); " is 170.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "	var xAdjustmentToRight = distanceToRightBoundaryIfFloating < 0 ? distanceToRightBoundaryIfFloating : xAdjustmentAmount.CoerceToUpperLimit (distanceToRightBoundaryIfFloating); " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the statement  "	Log.InfoFormat ("MoveToEdge called with direction:{0}' windowState:{1}' distanceToTopBoundaryIfFloating:{2}' distanceToBottomBoundaryIfFloating:{3}' distanceToLeftBoundaryIfFloating:{4}' distanceToRightBoundaryIfFloating: {5}"' direction' windowState' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating); " is 390.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The length of the statement  "		var fullDockThicknessAsPercentageOfScreen = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? (window.ActualHeight / screenBoundsInDp.Height) * 100 : (window.ActualWidth / screenBoundsInDp.Width) * 100; " is 220.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The length of the statement  "		var collapsedDockThicknessAsPercentageOfFullDockThickness = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen ()) * 10000 : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen ()) * 10000; " is 336.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PreventWindowActivation,The length of the statement  "		PInvoke.SetWindowLong (windowHandle' GWL_EXSTYLE' (int)PInvoke.GetWindowLong (windowHandle' GWL_EXSTYLE) | WS_EX_NOACTIVATE | WS_EX_APPWINDOW); " is 143.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("SetAppBarSizeAndPosition called with dockPosition:{0}' sizeAndPosition.Top:{1}' sizeAndPosition.Bottom:{2}' sizeAndPosition.Left:{3}' sizeAndPosition.Right:{4}"' dockPosition' sizeAndPosition.Top' sizeAndPosition.Bottom' sizeAndPosition.Left' sizeAndPosition.Right); " is 283.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("Screen bounds in px - Top:{0}' Left:{1}' Width:{2}' Height:{3}"' screenBoundsInPx.Top' screenBoundsInPx.Left' screenBoundsInPx.Width' screenBoundsInPx.Height); " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("QueryPos returned barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' barData.rc.Top' barData.rc.Bottom' barData.rc.Left' barData.rc.Right); " is 192.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("Rect values adjusted (to compensate for other app bars) to barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' barData.rc.Top' barData.rc.Bottom' barData.rc.Left' barData.rc.Right); " is 233.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("SetPos returned barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' barData.rc.Top' barData.rc.Bottom' barData.rc.Left' barData.rc.Right); " is 190.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("finalDockLeftInDp:{0}' finalDockTopInDp:{1}' finalDockWidthInDp:{2}' finalDockHeightInDp:{3}"' finalDockLeftInDp' finalDockTopInDp' finalDockWidthInDp' finalDockHeightInDp); " is 190.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	Log.InfoFormat ("Screen bounds in dp - Top:{0}' Left:{1}' Width:{2}' Height:{3}"' screenBoundsInDp.Top' screenBoundsInDp.Left' screenBoundsInDp.Width' screenBoundsInDp.Height); " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "	if (finalDockLeftInDp < 0 || finalDockTopInDp < 0 || finalDockWidthInDp <= 0 || finalDockHeightInDp <= 0 || (finalDockLeftInDp + finalDockWidthInDp) > screenBoundsInDp.Right || (finalDockTopInDp + finalDockHeightInDp) > screenBoundsInDp.Bottom) { " is 246.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "		PublishError (this' new ApplicationException ("There was a problem positioning OptiKey - reverting to floating position")); " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "		//as WPF will send a resize after a new appbar is added. We need to apply the received size & position after this happens. " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "		window.Dispatcher.BeginInvoke (DispatcherPriority.ApplicationIdle' new ApplySizeAndPositionDelegate (ApplyAndPersistSizeAndPosition)' rect); " is 140.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "			} else if (!string.IsNullOrEmpty (lastTextChange) && lastTextChange.Length == 1 && !char.IsWhiteSpace (lastTextChange [0])) { " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessMultiKeyTextAndSuggestions,The length of the statement  "	Log.DebugFormat ("Processing {0} captured multi-key selection results"' captureAndSuggestions != null ? captureAndSuggestions.Count : 0); " is 137.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessMultiKeyTextAndSuggestions,The length of the statement  "	StoreSuggestions (ModifySuggestions (captureAndSuggestions.Count > 1 ? captureAndSuggestions.Skip (1).ToList () : null)); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "	} else if (lastTextChange.Length == 1 && captureText.Length == 1 && !lastTextChangeWasSuggestion && !(keyStateService.KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown () && char.IsLetter (captureText.First ()))) { " is 240.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "		//and the current capture is not a multi-key selection of a single letter (as we also want to inject the space for this scenario). " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "		Log.Debug ("Suppressing auto space before this capture as the user appears to be typing one char at a time. Also the last text change was not a suggestion' and the current capture is not a single letter captured with multi-key selection enabled."); " is 248.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "		Log.Debug ("Suppressing auto space before this capture as it follows a single character which is not a letter' or a closing or mid-sentence punctuation mark."); " is 160.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "				if (!string.IsNullOrEmpty (modifiedCaptureText) && suggestionService.Suggestions != null && suggestionService.Suggestions.Contains (modifiedCaptureText)) { " is 155.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "		PublishKeyPress (modifiedCaptureText != null && modifiedCaptureText.Length == captureText.Length ? modifiedCaptureText [index] : captureText [index]); " is 150.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,AutoPressShiftIfAppropriate,The length of the statement  "	if (Settings.Default.AutoCapitalise && Text.NextCharacterWouldBeStartOfNewSentence () && keyStateService.KeyDownStates [KeyValues.LeftShiftKey].Value == KeyDownStates.Up) { " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ReactToSuppressAutoCapitaliseIntelligentlyChanges,The length of the statement  "	Settings.Default.OnPropertyChanges (s => s.SuppressAutoCapitaliseIntelligently).Subscribe (_ => ReactToSuppressAutoCapitaliseIntelligentlyChanges ()); " is 150.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SuppressOrReinstateAutoCapitalisation,The length of the statement  "	if (Settings.Default.AutoCapitalise && Settings.Default.SuppressAutoCapitaliseIntelligently && shiftStateSetAutomatically) { " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SimulateKeyStrokesHasChanged,The length of the statement  "		var lastState = new KeyboardOutputServiceState (currentStateKey' () => text' s => Text = s' //Set property (not field) to trigger bindings " is 138.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SimulateKeyStrokesHasChanged,The length of the statement  "		() => lastTextChange' s => lastTextChange = s' () => lastTextChangeWasSuggestion' b => lastTextChangeWasSuggestion = b' () => suppressNextAutoSpace' b => suppressNextAutoSpace = b' () => shiftStateSetAutomatically' b => shiftStateSetAutomatically = b' () => suggestionService.Suggestions' s => suggestionService.Suggestions = s); " is 329.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SimulateKeyStrokesHasChanged,The length of the statement  "		Log.InfoFormat ("No stored KeyboardOutputService state to restore for SimulateKeyStrokes={0} - defaulting state."' newStateKey); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SimulateKeyStrokesHasChanged,The length of the statement  "		KeyValues.KeysWhichCanBePressedOrLockedDown.Where (key => keyStateService.KeyDownStates [key].Value.IsDownOrLockedDown () && key.FunctionKey != null).Select (key => key.FunctionKey.Value.ToVirtualKeyCode ()).Where (virtualKeyCode => virtualKeyCode != null).ToList ().ForEach (virtualKeyCode => publishService.KeyDown (virtualKeyCode.Value)); " is 341.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ReactToPublishableKeyDownStateChanges,The length of the statement  "	foreach (var key in KeyValues.KeysWhichCanBePressedOrLockedDown.Where (k => k.FunctionKey != null && k.FunctionKey.Value.ToVirtualKeyCode () != null)) { " is 152.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,GenerateAutoCompleteSuggestions,The length of the statement  "	if (lastTextChange == null || lastTextChange.Length == 1)//Don't generate auto complete words if the last input was a multi key capture " is 135.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,GenerateAutoCompleteSuggestions,The length of the statement  "				var suggestions = dictionaryService.GetAutoCompleteSuggestions (inProgressWord).Take (Settings.Default.MaxDictionaryMatchesOrSuggestions).ToList (); " is 148.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,GenerateAutoCompleteSuggestions,The length of the statement  "				Log.DebugFormat ("{0} suggestions generated (possibly capped to {1} by MaxDictionaryMatchesOrSuggestions setting)"' suggestions.Count ()' Settings.Default.MaxDictionaryMatchesOrSuggestions); " is 190.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,GenerateAutoCompleteSuggestions,The length of the statement  "							suggestionChars [index] = char.ToUpper (suggestion [index]' Settings.Default.KeyboardAndDictionaryLanguage.ToCultureInfo ()); " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,GenerateAutoCompleteSuggestions,The length of the statement  "				}).Distinct ()//Changing the casing can result in multiple identical entries (e.g. "am" and "AM" both could become "am") " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,PublishKeyPress,The length of the statement  "			Log.InfoFormat ("Publishing '{0}' => as virtual key code {1} (using hard coded mapping)"' character.ToPrintableString ()' virtualKeyCode); " is 138.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,PublishKeyPress,The length of the statement  "			Log.InfoFormat ("Publishing '{0}' => as virtual key code {1}(0x{1:X}){2}{3}{4} (using VkKeyScanEx with keyboard layout:{5})"' character.ToPrintableString ()' vkCode' shift ? "+SHIFT" : null' ctrl ? "+CTRL" : null' alt ? "+ALT" : null' keyboardCulture); " is 252.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,PublishKeyPress,The length of the statement  "			Log.InfoFormat ("No virtual key code found for '{0}' so publishing as text (keyboard:{1})"' character.ToPrintableString ()' keyboardCulture); " is 141.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SwapText,The length of the statement  "	if (!string.IsNullOrEmpty (textToSwapOut) && !string.IsNullOrEmpty (textToSwapIn) && Text != null && Text.Length >= textToSwapOut.Length) { " is 139.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ModifyText,The length of the statement  "	if (KeyValues.KeysWhichPreventTextCaptureIfDownOrLocked.Any (kv => keyStateService.KeyDownStates [kv].Value.IsDownOrLockedDown ())) { " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ModifyText,The length of the statement  "		Log.DebugFormat ("A key which prevents text capture is down - modifying '{0}' to null."' textToModify.ToPrintableString ()); " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,PublishService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The length of the statement  "		inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop (Math.Ceiling (65535 * (point.X / virtualScreenWidthInPixels))' Math.Ceiling (65535 * (point.Y / virtualScreenHeightInPixels))); " is 185.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The length of the statement  "		//Setting the owner preserves the z-order of the parent and child windows if the focus is shifted away from the child window (otherwise the child popup will be hidden) " is 167.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The length of the statement  "	var resultTask = Observable.FromEventPattern<CalibrationRunnerEventArgs> (eh => calRunner.OnResult += eh' eh => calRunner.OnResult -= eh).FirstAsync ().Select (i => i.EventArgs).ToTask (); " is 188.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The length of the statement  "		var message = string.Format (Resources.CALIBRATION_SUCCESS_WITH_ACCURACY' calibrateArgs.CalibrationResult.AverageErrorDegree); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribePointService.cs,OnGazeUpdate,The length of the statement  "	if (GazeManager.Instance.IsCalibrated && pointEvent != null && !double.IsNaN (data.SmoothedCoordinates.X) && !double.IsNaN (data.SmoothedCoordinates.Y)) { " is 154.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribePointService.cs,OnGazeUpdate,The length of the statement  "		pointEvent (this' new Timestamped<Point> (new Point (data.SmoothedCoordinates.X' data.SmoothedCoordinates.Y)' new DateTimeOffset (DateTime.Parse (data.TimeStampString)).ToUniversalTime ())); " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the statement  "		textBox.OnPropertyChanges<double> (FrameworkElement.ActualWidthProperty).Subscribe (_ => PositionCaret (textBox' caretElement)); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the statement  "		textBox.OnPropertyChanges<double> (FrameworkElement.ActualHeightProperty).Subscribe (_ => PositionCaret (textBox' caretElement)); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The length of the statement  "	var screenTopLeftInWpfCoords = window.GetTransformFromDevice ().Transform (new Point (screen.Bounds.Left' screen.Bounds.Top)); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The length of the statement  "	var screenBottomRightInWpfCoords = window.GetTransformFromDevice ().Transform (new Point (screen.Bounds.Right' screen.Bounds.Bottom)); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,AnimateTarget,The length of the statement  "	var displayTimeInSeconds = Convert.ToInt32 (Math.Ceiling ((double)(text != null ? text.Length : 0) * (double)Settings.Default.ToastNotificationSecondsPerCharacter)); " is 165.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,OnLoaded,The length of the statement  "	Observable.FromEventPattern<EventHandler' EventArgs> (h => window.LocationChanged += h' h => window.LocationChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => { " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The length of the statement  "	var screenTopLeftInWpfCoords = window.GetTransformFromDevice ().Transform (new Point (screen.Bounds.Left' screen.Bounds.Top)); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The length of the statement  "	var screenBottomRightInWpfCoords = window.GetTransformFromDevice ().Transform (new Point (screen.Bounds.Right' screen.Bounds.Bottom)); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,CaptureScreenshot,The length of the statement  "		graphic.CopyFromScreen (new System.Drawing.Point (Convert.ToInt32 (sourceArea.X)' Convert.ToInt32 (sourceArea.Y))' System.Drawing.Point.Empty' new System.Drawing.Size (Convert.ToInt32 (sourceArea.Width)' Convert.ToInt32 (sourceArea.Height))); " is 242.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,OnLoaded,The length of the statement  "	mainViewModel.OnPropertyChanges (vm => vm.CurrentPositionPoint).Where (cpp => IsOpen && SelectionProgress == 0)//Only set Point if popup is open and there isn't a current fixation in progress " is 191.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,OnLoaded,The length of the statement  "	Observable.FromEventPattern<EventHandler' EventArgs> (h => window.LocationChanged += h' h => window.LocationChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => { " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "	if (IsOpen && pointCopy.X >= screenTopLeft.X && pointCopy.X <= screenBottomRight.X && pointCopy.Y >= screenTopLeft.Y && pointCopy.Y <= screenBottomRight.Y) { " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "		if (dpiPoint.X + Width > screenBottomRightInWpfCoords.X)//Width is set explicitly on the Popup from the Setting value. Cannot use ActualWidth as it will be 0 (Popup itself is not part of the visual tree) " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "		if (dpiPoint.Y + Height > screenBottomRightInWpfCoords.Y)//Width is set explicitly on the Popup from the Setting value. Cannot use ActualWidth as it will be 0 (Popup itself is not part of the visual tree) " is 204.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "		CursorPointPosition = cursorPointsToTop && cursorPointsToLeft ? CursorPointPositions.ToTopLeft : cursorPointsToTop && !cursorPointsToLeft ? CursorPointPositions.ToTopRight : !cursorPointsToTop && cursorPointsToLeft ? CursorPointPositions.ToBottomLeft : CursorPointPositions.ToBottomRight; " is 288.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "					//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "					rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2; " is 169.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "					rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2; " is 170.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "	var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360; " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "	if (Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.Shrink && Settings.Default.ProgressIndicatorResizeStartProportion > Settings.Default.ProgressIndicatorResizeEndProportion) { " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "		var range = (Settings.Default.ProgressIndicatorResizeStartProportion - Settings.Default.ProgressIndicatorResizeEndProportion) / 100d; " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "	} else if (Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.Grow && Settings.Default.ProgressIndicatorResizeStartProportion < Settings.Default.ProgressIndicatorResizeEndProportion) { " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "		var range = (Settings.Default.ProgressIndicatorResizeEndProportion - Settings.Default.ProgressIndicatorResizeStartProportion) / 100d; " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var keyStateSubscription = keyStateService.KeyDownStates [Value].OnPropertyChanges (kds => kds.Value).Subscribe (value => KeyDownState = value); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var keySelectionProgressSubscription = keyStateService.KeySelectionProgress [Value].OnPropertyChanges (ksp => ksp.Value).Subscribe (value => { " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var keyEnabledSubscription = keyStateService.KeyEnabledStates.OnAnyPropertyChanges ().Subscribe (_ => calculateIsEnabled ()); " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var currentPositionSubscription = mainViewModel.OnPropertyChanges (vm => vm.CurrentPositionKey).Subscribe (calculateIsCurrent); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	//Display shift down text (upper case text) if shift is locked down' or down (but NOT when we are capturing a multi key selection) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	Action<KeyDownStates' bool> calculateDisplayShiftDownText = (shiftDownState' capturingMultiKeySelection) => DisplayShiftDownText = shiftDownState == KeyDownStates.LockedDown || (shiftDownState == KeyDownStates.Down && !capturingMultiKeySelection); " is 247.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var capturingMultiKeySelectionSubscription = capturingStateManager.OnPropertyChanges (csm => csm.CapturingMultiKeySelection).Subscribe (value => calculateDisplayShiftDownText (keyStateService.KeyDownStates [KeyValues.LeftShiftKey].Value' value)); " is 246.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var leftShiftKeyStateSubscription = keyStateService.KeyDownStates [KeyValues.LeftShiftKey].OnPropertyChanges (sds => sds.Value).Subscribe (value => calculateDisplayShiftDownText (value' capturingStateManager.CapturingMultiKeySelection)); " is 237.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	calculateDisplayShiftDownText (keyStateService.KeyDownStates [KeyValues.LeftShiftKey].Value' capturingStateManager.CapturingMultiKeySelection); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "	var keySelectionSubscription = Observable.FromEventPattern<KeyValue> (handler => mainViewModel.KeySelection += handler' handler => mainViewModel.KeySelection -= handler).Subscribe (pattern => { " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,AttachTextBlockScalerHandlers,The length of the statement  "	Observable.FromEventPattern<SizeChangedEventHandler' SizeChangedEventArgs> (h => SizeChanged += h' h => SizeChanged -= h).Throttle (TimeSpan.FromMilliseconds (ResizeThrottleInMs)).SubscribeOnDispatcher ().ObserveOnDispatcher ().Subscribe (_ => CalculateTextBlockFontSize ()); " is 275.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,AttachTextBlockHandlers,The length of the statement  "		var textBlockException = new XamlException ("TextBlockScaler cannot find a TextBlock in its collection of child elements"); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,AttachTextBlockHandlers,The length of the statement  "	if (textBlock.IsLoaded)//Loaded event is fired from the root down; we may be here before the child TextBlock has loaded' so check " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,SetupTextBlockHandlers,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (TextBlock.TextProperty' typeof(TextBlock)).AddValueChanged (textBlock' (_' __) => CalculateTextBlockFontSize ()); " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,SetupTextBlockHandlers,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (TextBlock.FontFamilyProperty' typeof(TextBlock)).AddValueChanged (textBlock' (_' __) => CalculateTextBlockFontSize ()); " is 162.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,SetupTextBlockHandlers,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (TextBlock.FontStyleProperty' typeof(TextBlock)).AddValueChanged (textBlock' (_' __) => CalculateTextBlockFontSize ()); " is 161.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,SetupTextBlockHandlers,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (TextBlock.FontWeightProperty' typeof(TextBlock)).AddValueChanged (textBlock' (_' __) => CalculateTextBlockFontSize ()); " is 162.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,SetupTextBlockHandlers,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (TextBlock.FontStretchProperty' typeof(TextBlock)).AddValueChanged (textBlock' (_' __) => CalculateTextBlockFontSize ()); " is 163.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,SetupTextBlockHandlers,The length of the statement  "	DependencyPropertyDescriptor.FromProperty (FlowDirectionProperty' typeof(TextBlock)).AddValueChanged (textBlock' (_' __) => CalculateTextBlockFontSize ()); " is 155.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,CalculateTextBlockFontSize,The length of the statement  "	while (fontSize > 0 && IsTextTrimmedAtThisFontSize (fontSize) && (MinFontSize == null || fontSize > MinFontSize.Value)) { " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,IsTextTrimmedAtThisFontSize,The length of the statement  "	var formattedText = new FormattedText (textBlock.Text' Thread.CurrentThread.CurrentCulture' textBlock.FlowDirection' typeface' fontSize' new SolidColorBrush (Colors.Black)) { " is 174.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,GenerateContent,The length of the statement  "	Log.DebugFormat ("GenerateContent called. Keyboard language is '{0}' and Keyboard type is '{1}'"' Settings.Default.KeyboardAndDictionaryLanguage' Keyboard != null ? Keyboard.GetType () : null); " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,TraverseAllKeysAndBuildPointToKeyValueMap,The length of the statement  "		if (key.IsVisible && PresentationSource.FromVisual (key) != null && (key.Value.FunctionKey != null || key.Value.String != null)) { " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToSizeChanges,The length of the statement  "	Observable.FromEventPattern<SizeChangedEventHandler' SizeChangedEventArgs> (h => SizeChanged += h' h => SizeChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => { " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowMoves,The length of the statement  "	Observable.FromEventPattern<EventHandler' EventArgs> (h => parentWindow.LocationChanged += h' h => parentWindow.LocationChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => { " is 212.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,CalibrateWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\CalibrateWindowAction.cs,Invoke,The length of the statement  "		Log.Error ("CalibrateWindowAction was invoked' but the CalibrationService (dependency property) is not set. Calibration is not possible."); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,ConfirmationWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\ConfirmationWindowAction.cs,Invoke,The length of the statement  "		childWindow.Owner = AssociatedObject != null ? AssociatedObject as Window ?? VisualAndLogicalTreeHelper.FindVisualParent<Window> (AssociatedObject) : childWindow.Owner; " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "		if (notificationWithServicesAndState == null || notificationWithServicesAndState.AudioService == null || notificationWithServicesAndState.DictionaryService == null) { " is 166.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "		var childWindow = new ManagementWindow (notificationWithServicesAndState.AudioService' notificationWithServicesAndState.DictionaryService); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "		var parentWindow = AssociatedObject != null ? AssociatedObject as Window ?? VisualAndLogicalTreeHelper.FindVisualParent<Window> (AssociatedObject) : null; " is 154.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "			//Setting the owner preserves the z-order of the parent and child windows when the focus is shifted back to the parent (otherwise the child popup will be hidden) " is 161.
Long Statement,JuliusSweetland.OptiKey.UI.ValueConverters,IntToSingularPluralStringFormatter,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\IntToSingularPluralStringFormatter.cs,Convert,The length of the statement  "	return valueAsInt == 1 || splitParams.Length == 1 ? string.Format (splitParams [0]' value) : string.Format (splitParams [1]' value); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ValueConverters,MinimiseAndDockPositionToSymbolOrientation,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\MinimiseAndDockPositionToSymbolOrientation.cs,Convert,The length of the statement  "		switch (minimisedPosition == MinimisedEdges.SameAsDockedPosition ? dockPosition.ToMinimisedEdge () : minimisedPosition) { " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupInputServiceEventHandlers,The length of the statement  "		if (keyStateService.KeyDownStates [KeyValues.MouseMagneticCursorKey].Value.IsDownOrLockedDown () && !keyStateService.KeyDownStates [KeyValues.SleepKey].Value.IsDownOrLockedDown ()) { " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupInputServiceEventHandlers,The length of the statement  "				keyStateService.KeySelectionProgress [progress.Item1.Value.KeyValue.Value] = new NotifyingProxy<double> (progress.Item2); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupInputServiceEventHandlers,The length of the statement  "		var singleKeyValue = tuple.Item2 != null || tuple.Item3 != null ? new KeyValue (tuple.Item2' tuple.Item3) : (KeyValue?)null; " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupInputServiceEventHandlers,The length of the statement  "		if (SelectionMode == SelectionModes.Key && (singleKeyValue != null || (multiKeySelection != null && multiKeySelection.Any ()))) { " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,KeySelectionResult,The length of the statement  "		Log.InfoFormat ("KeySelectionResult received with string value '{0}' and function key values '{1}'"' singleKeyValue.Value.String.ToPrintableString ()' singleKeyValue.Value.FunctionKey); " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "			var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION; " is 171.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "						RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ()); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "						RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ()); " is 251.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => { " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => { " is 145.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "			if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) { " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "			} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) { " is 137.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) { " is 166.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "		//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupFinalClickAction,The length of the statement  "		if (!suppressMagnification && keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) { " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleServiceError,The length of the statement  "	Log.Error ("Error event received from service. Raising ErrorNotificationRequest and playing ErrorSoundFile (from settings)"' exception); " is 136.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleServiceError,The length of the statement  "	RaiseToastNotification (Resources.CRASH_TITLE' exception.Message' NotificationTypes.Error' () => inputService.RequestResume ()); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,AddTextToDictionary,The length of the statement  "			RaiseToastNotification (Resources.NOTHING_NEW' Resources.NO_NEW_ENTRIES_IN_SCRATCHPAD' NotificationTypes.Normal' () => { " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,PromptToAddCandidatesToDictionary,The length of the statement  "		var prompt = candidate.Contains (' ') ? string.Format (Resources.ADD_PHRASE_TO_DICTIONARY_CONFIRMATION_MESSAGE' candidate' candidate.NormaliseAndRemoveRepeatingCharactersAndHandlePhrases (log: true)) : string.Format (Resources.ADD_WORD_TO_DICTIONARY_CONFIRMATION_MESSAGE' candidate); " is 283.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,PromptToAddCandidatesToDictionary,The length of the statement  "		var similarEntries = dictionaryService.GetAllEntries ().Where (de => string.Equals (de.Entry' candidate' StringComparison.InvariantCultureIgnoreCase)).Select (de => de.Entry).ToList (); " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,PromptToAddCandidatesToDictionary,The length of the statement  "			string similarEntriesPrompt = string.Format (Resources.SIMILAR_DICTIONARY_ENTRIES_EXIST' string.Join ("' "' similarEntries.Select (se => string.Format ("'{0}'"' se)))); " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,PromptToAddCandidatesToDictionary,The length of the statement  "		Action nextAction = candidates.Count > 1 ? (Action)(() => PromptToAddCandidatesToDictionary (candidates.Skip (1).ToList ()' originalKeyboard)) : (Action)(() => Keyboard = originalKeyboard); " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,PromptToAddCandidatesToDictionary,The length of the statement  "			RaiseToastNotification (Resources.ADDED' string.Format (Resources.ENTRY_ADDED_TO_DICTIONARY' candidate)' NotificationTypes.Normal' () => { " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,AttachScratchpadEnabledListener,The length of the statement  "	Action calculateScratchpadIsDisabled = () => ScratchpadIsDisabled = KeyValues.KeysWhichPreventTextCaptureIfDownOrLocked.Any (kv => keyStateService.KeyDownStates [kv].Value.IsDownOrLockedDown ()); " is 195.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,AttachScratchpadEnabledListener,The length of the statement  "	KeyValues.KeysWhichPreventTextCaptureIfDownOrLocked.ForEach (kv => keyStateService.KeyDownStates [kv].OnPropertyChanges (s => s.Value).Subscribe (value => calculateScratchpadIsDisabled ())); " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,AttachKeyboardSupportsCollapsedDockListener,The length of the statement  "		if (!collapsedDockingSupported && Settings.Default.MainWindowState == WindowStates.Docked && Settings.Default.MainWindowDockSize == DockSizes.Collapsed) { " is 154.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,DictionaryViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\DictionaryViewModel.cs,Load,The length of the statement  "	Entries = allDictionaryEntries != null ? new ObservableCollection<DictionaryEntryAndState> (allDictionaryEntries.Select (e => new DictionaryEntryAndState { " is 155.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "	KeySelectionTriggerFixationDefaultCompleteTimeInMs = Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds; " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "	KeySelectionTriggerFixationCompleteTimesByIndividualKey = Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "	KeySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups = FromSetting (Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues); " is 145.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "	KeySelectionTriggerIncompleteFixationTtlInMs = Settings.Default.KeySelectionTriggerIncompleteFixationTtl.TotalMilliseconds; " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "	PointSelectionTriggerFixationLockOnTimeInMs = Settings.Default.PointSelectionTriggerFixationLockOnTime.TotalMilliseconds; " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "	PointSelectionTriggerFixationCompleteTimeInMs = Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds; " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.KeySelectionTriggerFixationLockOnTime = TimeSpan.FromMilliseconds (KeySelectionTriggerFixationLockOnTimeInMs); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime = TimeSpan.FromMilliseconds (KeySelectionTriggerFixationDefaultCompleteTimeInMs); " is 145.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey = KeySelectionTriggerFixationCompleteTimesByIndividualKey; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues = ToSetting (KeySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.KeySelectionTriggerIncompleteFixationTtl = TimeSpan.FromMilliseconds (KeySelectionTriggerIncompleteFixationTtlInMs); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.PointSelectionTriggerFixationLockOnTime = TimeSpan.FromMilliseconds (PointSelectionTriggerFixationLockOnTimeInMs); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.PointSelectionTriggerFixationCompleteTime = TimeSpan.FromMilliseconds (PointSelectionTriggerFixationCompleteTimeInMs); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.MultiKeySelectionFixationMinDwellTime = TimeSpan.FromMilliseconds (MultiKeySelectionFixationMinDwellTimeInMs); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ALPHA' KeyValues.AlphaKeyboardKey' dictionary.ContainsKey (KeyValues.AlphaKeyboardKey) ? dictionary [KeyValues.AlphaKeyboardKey] : (TimeSpan?)null)' " is 183.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.BACK' KeyValues.BackFromKeyboardKey' dictionary.ContainsKey (KeyValues.BackFromKeyboardKey) ? dictionary [KeyValues.BackFromKeyboardKey] : (TimeSpan?)null)' " is 191.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CONVERSATION_ALPHA' KeyValues.ConversationAlphaKeyboardKey' dictionary.ContainsKey (KeyValues.ConversationAlphaKeyboardKey) ? dictionary [KeyValues.ConversationAlphaKeyboardKey] : (TimeSpan?)null)' " is 232.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CONVERSATION_NUMERIC_AND_SYMBOLS' KeyValues.ConversationNumericAndSymbolsKeyboardKey' dictionary.ContainsKey (KeyValues.ConversationNumericAndSymbolsKeyboardKey) ? dictionary [KeyValues.ConversationNumericAndSymbolsKeyboardKey] : (TimeSpan?)null)' " is 282.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CURRENCIES_1' KeyValues.Currencies1KeyboardKey' dictionary.ContainsKey (KeyValues.Currencies1KeyboardKey) ? dictionary [KeyValues.Currencies1KeyboardKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CURRENCIES_2' KeyValues.Currencies2KeyboardKey' dictionary.ContainsKey (KeyValues.Currencies2KeyboardKey) ? dictionary [KeyValues.Currencies2KeyboardKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DIACRITICS_1' KeyValues.Diacritic1KeyboardKey' dictionary.ContainsKey (KeyValues.Diacritic1KeyboardKey) ? dictionary [KeyValues.Diacritic1KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DIACRITICS_2' KeyValues.Diacritic2KeyboardKey' dictionary.ContainsKey (KeyValues.Diacritic2KeyboardKey) ? dictionary [KeyValues.Diacritic2KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DIACRITICS_3' KeyValues.Diacritic3KeyboardKey' dictionary.ContainsKey (KeyValues.Diacritic3KeyboardKey) ? dictionary [KeyValues.Diacritic3KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LANGUAGE_UPPER_CASE' KeyValues.LanguageKeyboardKey' dictionary.ContainsKey (KeyValues.LanguageKeyboardKey) ? dictionary [KeyValues.LanguageKeyboardKey] : (TimeSpan?)null)' " is 206.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MENU' KeyValues.MenuKeyboardKey' dictionary.ContainsKey (KeyValues.MenuKeyboardKey) ? dictionary [KeyValues.MenuKeyboardKey] : (TimeSpan?)null)' " is 179.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOUSE' KeyValues.MouseKeyboardKey' dictionary.ContainsKey (KeyValues.MouseKeyboardKey) ? dictionary [KeyValues.MouseKeyboardKey] : (TimeSpan?)null)' " is 183.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.NUMBERS_SYMBOLS_1' KeyValues.NumericAndSymbols1KeyboardKey' dictionary.ContainsKey (KeyValues.NumericAndSymbols1KeyboardKey) ? dictionary [KeyValues.NumericAndSymbols1KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.NUMBERS_SYMBOLS_2' KeyValues.NumericAndSymbols2KeyboardKey' dictionary.ContainsKey (KeyValues.NumericAndSymbols2KeyboardKey) ? dictionary [KeyValues.NumericAndSymbols2KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.NUMBERS_SYMBOLS_3' KeyValues.NumericAndSymbols3KeyboardKey' dictionary.ContainsKey (KeyValues.NumericAndSymbols3KeyboardKey) ? dictionary [KeyValues.NumericAndSymbols3KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.PHYSICAL_KEYS' KeyValues.PhysicalKeysKeyboardKey' dictionary.ContainsKey (KeyValues.PhysicalKeysKeyboardKey) ? dictionary [KeyValues.PhysicalKeysKeyboardKey] : (TimeSpan?)null)' " is 212.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SIZE_AND_POSITION' KeyValues.SizeAndPositionKeyboardKey' dictionary.ContainsKey (KeyValues.SizeAndPositionKeyboardKey) ? dictionary [KeyValues.SizeAndPositionKeyboardKey] : (TimeSpan?)null)' " is 225.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.COLLAPSE_DOCK' KeyValues.CollapseDockKey' dictionary.ContainsKey (KeyValues.CollapseDockKey) ? dictionary [KeyValues.CollapseDockKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_DOCK' KeyValues.ExpandDockKey' dictionary.ContainsKey (KeyValues.ExpandDockKey) ? dictionary [KeyValues.ExpandDockKey] : (TimeSpan?)null)' " is 180.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CATALAN_SPAIN' KeyValues.CatalanSpainKey' dictionary.ContainsKey (KeyValues.CatalanSpainKey) ? dictionary [KeyValues.CatalanSpainKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CROATIAN_CROATIA' KeyValues.CroatianCroatiaKey' dictionary.ContainsKey (KeyValues.CroatianCroatiaKey) ? dictionary [KeyValues.CroatianCroatiaKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CZECH_CZECH_REPUBLIC' KeyValues.CzechCzechRepublicKey' dictionary.ContainsKey (KeyValues.CzechCzechRepublicKey) ? dictionary [KeyValues.CzechCzechRepublicKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DANISH_DENMARK' KeyValues.DanishDenmarkKey' dictionary.ContainsKey (KeyValues.DanishDenmarkKey) ? dictionary [KeyValues.DanishDenmarkKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DUTCH_BELGIUM' KeyValues.DutchBelgiumKey' dictionary.ContainsKey (KeyValues.DutchBelgiumKey) ? dictionary [KeyValues.DutchBelgiumKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DUTCH_NETHERLANDS' KeyValues.DutchNetherlandsKey' dictionary.ContainsKey (KeyValues.DutchNetherlandsKey) ? dictionary [KeyValues.DutchNetherlandsKey] : (TimeSpan?)null)' " is 204.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ENGLISH_CANADA' KeyValues.EnglishCanadaKey' dictionary.ContainsKey (KeyValues.EnglishCanadaKey) ? dictionary [KeyValues.EnglishCanadaKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ENGLISH_UK' KeyValues.EnglishUKKey' dictionary.ContainsKey (KeyValues.EnglishUKKey) ? dictionary [KeyValues.EnglishUKKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ENGLISH_US' KeyValues.EnglishUSKey' dictionary.ContainsKey (KeyValues.EnglishUSKey) ? dictionary [KeyValues.EnglishUSKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.FRENCH_FRANCE' KeyValues.FrenchFranceKey' dictionary.ContainsKey (KeyValues.FrenchFranceKey) ? dictionary [KeyValues.FrenchFranceKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.GERMAN_GERMANY' KeyValues.GermanGermanyKey' dictionary.ContainsKey (KeyValues.GermanGermanyKey) ? dictionary [KeyValues.GermanGermanyKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.GREEK_GREECE' KeyValues.GreekGreeceKey' dictionary.ContainsKey (KeyValues.GreekGreeceKey) ? dictionary [KeyValues.GreekGreeceKey] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ITALIAN_ITALY' KeyValues.ItalianItalyKey' dictionary.ContainsKey (KeyValues.ItalianItalyKey) ? dictionary [KeyValues.ItalianItalyKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.PORTUGUESE_PORTUGAL' KeyValues.PortuguesePortugalKey' dictionary.ContainsKey (KeyValues.PortuguesePortugalKey) ? dictionary [KeyValues.PortuguesePortugalKey] : (TimeSpan?)null)' " is 212.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.RUSSIAN_RUSSIA' KeyValues.RussianRussiaKey' dictionary.ContainsKey (KeyValues.RussianRussiaKey) ? dictionary [KeyValues.RussianRussiaKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SLOVAK_SLOVAKIA' KeyValues.SlovakSlovakiaKey' dictionary.ContainsKey (KeyValues.SlovakSlovakiaKey) ? dictionary [KeyValues.SlovakSlovakiaKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SLOVENIAN_SLOVENIA' KeyValues.SlovenianSloveniaKey' dictionary.ContainsKey (KeyValues.SlovenianSloveniaKey) ? dictionary [KeyValues.SlovenianSloveniaKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SPANISH_SPAIN' KeyValues.SpanishSpainKey' dictionary.ContainsKey (KeyValues.SpanishSpainKey) ? dictionary [KeyValues.SpanishSpainKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.TURKISH_TURKEY' KeyValues.TurkishTurkeyKey' dictionary.ContainsKey (KeyValues.TurkishTurkeyKey) ? dictionary [KeyValues.TurkishTurkeyKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ADD_TO_DICTIONARY' KeyValues.AddToDictionaryKey' dictionary.ContainsKey (KeyValues.AddToDictionaryKey) ? dictionary [KeyValues.AddToDictionaryKey] : (TimeSpan?)null)' " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.BACK_WORD' KeyValues.BackManyKey' dictionary.ContainsKey (KeyValues.BackManyKey) ? dictionary [KeyValues.BackManyKey] : (TimeSpan?)null)' " is 172.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.BACK_ONE' KeyValues.BackOneKey' dictionary.ContainsKey (KeyValues.BackOneKey) ? dictionary [KeyValues.BackOneKey] : (TimeSpan?)null)' " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.RE_CALIBRATE' KeyValues.CalibrateKey' dictionary.ContainsKey (KeyValues.CalibrateKey) ? dictionary [KeyValues.CalibrateKey] : (TimeSpan?)null)' " is 178.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CLEAR' KeyValues.ClearScratchpadKey' dictionary.ContainsKey (KeyValues.ClearScratchpadKey) ? dictionary [KeyValues.ClearScratchpadKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DECREASE_OPACITY' KeyValues.DecreaseOpacityKey' dictionary.ContainsKey (KeyValues.DecreaseOpacityKey) ? dictionary [KeyValues.DecreaseOpacityKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.INCREASE_OPACITY' KeyValues.IncreaseOpacityKey' dictionary.ContainsKey (KeyValues.IncreaseOpacityKey) ? dictionary [KeyValues.IncreaseOpacityKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MINIMISE' KeyValues.MinimiseKey' dictionary.ContainsKey (KeyValues.MinimiseKey) ? dictionary [KeyValues.MinimiseKey] : (TimeSpan?)null)' " is 171.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MULTI_KEY_SELECTION_UPPER_CASE' KeyValues.MultiKeySelectionIsOnKey' dictionary.ContainsKey (KeyValues.MultiKeySelectionIsOnKey) ? dictionary [KeyValues.MultiKeySelectionIsOnKey] : (TimeSpan?)null)' " is 232.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.NO' KeyValues.NoQuestionResultKey' dictionary.ContainsKey (KeyValues.NoQuestionResultKey) ? dictionary [KeyValues.NoQuestionResultKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.QUIT' KeyValues.QuitKey' dictionary.ContainsKey (KeyValues.QuitKey) ? dictionary [KeyValues.QuitKey] : (TimeSpan?)null)' " is 155.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SLEEP' KeyValues.SleepKey' dictionary.ContainsKey (KeyValues.SleepKey) ? dictionary [KeyValues.SleepKey] : (TimeSpan?)null)' " is 159.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SPEAK' KeyValues.SpeakKey' dictionary.ContainsKey (KeyValues.SpeakKey) ? dictionary [KeyValues.SpeakKey] : (TimeSpan?)null)' " is 159.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.YES' KeyValues.YesQuestionResultKey' dictionary.ContainsKey (KeyValues.YesQuestionResultKey) ? dictionary [KeyValues.YesQuestionResultKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ALT' KeyValues.LeftAltKey' dictionary.ContainsKey (KeyValues.LeftAltKey) ? dictionary [KeyValues.LeftAltKey] : (TimeSpan?)null)' " is 163.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CTRL' KeyValues.LeftCtrlKey' dictionary.ContainsKey (KeyValues.LeftCtrlKey) ? dictionary [KeyValues.LeftCtrlKey] : (TimeSpan?)null)' " is 167.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHIFT' KeyValues.LeftShiftKey' dictionary.ContainsKey (KeyValues.LeftShiftKey) ? dictionary [KeyValues.LeftShiftKey] : (TimeSpan?)null)' " is 171.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.WIN' KeyValues.LeftWinKey' dictionary.ContainsKey (KeyValues.LeftWinKey) ? dictionary [KeyValues.LeftWinKey] : (TimeSpan?)null)' " is 163.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LEFT_CLICK' KeyValues.MouseLeftClickKey' dictionary.ContainsKey (KeyValues.MouseLeftClickKey) ? dictionary [KeyValues.MouseLeftClickKey] : (TimeSpan?)null)' " is 191.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LEFT_DOUBLE_CLICK' KeyValues.MouseLeftDoubleClickKey' dictionary.ContainsKey (KeyValues.MouseLeftDoubleClickKey) ? dictionary [KeyValues.MouseLeftDoubleClickKey] : (TimeSpan?)null)' " is 216.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LEFT_DOWN_UP' KeyValues.MouseLeftDownUpKey' dictionary.ContainsKey (KeyValues.MouseLeftDownUpKey) ? dictionary [KeyValues.MouseLeftDownUpKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MAGNETIC_CURSOR' KeyValues.MouseMagneticCursorKey' dictionary.ContainsKey (KeyValues.MouseMagneticCursorKey) ? dictionary [KeyValues.MouseMagneticCursorKey] : (TimeSpan?)null)' " is 211.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MIDDLE_CLICK' KeyValues.MouseMiddleClickKey' dictionary.ContainsKey (KeyValues.MouseMiddleClickKey) ? dictionary [KeyValues.MouseMiddleClickKey] : (TimeSpan?)null)' " is 199.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MIDDLE_DOWN_UP' KeyValues.MouseMiddleDownUpKey' dictionary.ContainsKey (KeyValues.MouseMiddleDownUpKey) ? dictionary [KeyValues.MouseMiddleDownUpKey] : (TimeSpan?)null)' " is 204.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_AMOUNT_IN_PIXEL' KeyValues.MouseMoveAmountInPixelsKey' dictionary.ContainsKey (KeyValues.MouseMoveAmountInPixelsKey) ? dictionary [KeyValues.MouseMoveAmountInPixelsKey] : (TimeSpan?)null)' " is 228.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_DOWN' KeyValues.MouseMoveToBottomKey' dictionary.ContainsKey (KeyValues.MouseMoveToBottomKey) ? dictionary [KeyValues.MouseMoveToBottomKey] : (TimeSpan?)null)' " is 199.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_TO' KeyValues.MouseMoveToKey' dictionary.ContainsKey (KeyValues.MouseMoveToKey) ? dictionary [KeyValues.MouseMoveToKey] : (TimeSpan?)null)' " is 179.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_LEFT' KeyValues.MouseMoveToLeftKey' dictionary.ContainsKey (KeyValues.MouseMoveToLeftKey) ? dictionary [KeyValues.MouseMoveToLeftKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_RIGHT' KeyValues.MouseMoveToRightKey' dictionary.ContainsKey (KeyValues.MouseMoveToRightKey) ? dictionary [KeyValues.MouseMoveToRightKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_UP' KeyValues.MouseMoveToTopKey' dictionary.ContainsKey (KeyValues.MouseMoveToTopKey) ? dictionary [KeyValues.MouseMoveToTopKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.RIGHT_CLICK' KeyValues.MouseRightClickKey' dictionary.ContainsKey (KeyValues.MouseRightClickKey) ? dictionary [KeyValues.MouseRightClickKey] : (TimeSpan?)null)' " is 195.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.RIGHT_DOWN_UP' KeyValues.MouseRightDownUpKey' dictionary.ContainsKey (KeyValues.MouseRightDownUpKey) ? dictionary [KeyValues.MouseRightDownUpKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CLICK_AND_DRAG' KeyValues.MouseDragKey' dictionary.ContainsKey (KeyValues.MouseDragKey) ? dictionary [KeyValues.MouseDragKey] : (TimeSpan?)null)' " is 180.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LEFT_CLICK' KeyValues.MouseMoveAndLeftClickKey' dictionary.ContainsKey (KeyValues.MouseMoveAndLeftClickKey) ? dictionary [KeyValues.MouseMoveAndLeftClickKey] : (TimeSpan?)null)' " is 212.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LEFT_DOUBLE_CLICK' KeyValues.MouseMoveAndLeftDoubleClickKey' dictionary.ContainsKey (KeyValues.MouseMoveAndLeftDoubleClickKey) ? dictionary [KeyValues.MouseMoveAndLeftDoubleClickKey] : (TimeSpan?)null)' " is 237.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MIDDLE_CLICK' KeyValues.MouseMoveAndMiddleClickKey' dictionary.ContainsKey (KeyValues.MouseMoveAndMiddleClickKey) ? dictionary [KeyValues.MouseMoveAndMiddleClickKey] : (TimeSpan?)null)' " is 220.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.RIGHT_CLICK' KeyValues.MouseMoveAndRightClickKey' dictionary.ContainsKey (KeyValues.MouseMoveAndRightClickKey) ? dictionary [KeyValues.MouseMoveAndRightClickKey] : (TimeSpan?)null)' " is 216.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SCROLL_DOWN' KeyValues.MouseMoveAndScrollToBottomKey' dictionary.ContainsKey (KeyValues.MouseMoveAndScrollToBottomKey) ? dictionary [KeyValues.MouseMoveAndScrollToBottomKey] : (TimeSpan?)null)' " is 228.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SCROLL_LEFT' KeyValues.MouseMoveAndScrollToLeftKey' dictionary.ContainsKey (KeyValues.MouseMoveAndScrollToLeftKey) ? dictionary [KeyValues.MouseMoveAndScrollToLeftKey] : (TimeSpan?)null)' " is 222.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SCROLL_RIGHT' KeyValues.MouseMoveAndScrollToRightKey' dictionary.ContainsKey (KeyValues.MouseMoveAndScrollToRightKey) ? dictionary [KeyValues.MouseMoveAndScrollToRightKey] : (TimeSpan?)null)' " is 226.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SCROLL_UP' KeyValues.MouseMoveAndScrollToTopKey' dictionary.ContainsKey (KeyValues.MouseMoveAndScrollToTopKey) ? dictionary [KeyValues.MouseMoveAndScrollToTopKey] : (TimeSpan?)null)' " is 217.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SCROLL_AMOUNT_IN_CLICKS' KeyValues.MouseScrollAmountInClicksKey' dictionary.ContainsKey (KeyValues.MouseScrollAmountInClicksKey) ? dictionary [KeyValues.MouseScrollAmountInClicksKey] : (TimeSpan?)null)' " is 237.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MAGNIFIER' KeyValues.MouseMagnifierKey' dictionary.ContainsKey (KeyValues.MouseMagnifierKey) ? dictionary [KeyValues.MouseMagnifierKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.REPEAT_LAST' KeyValues.RepeatLastMouseActionKey' dictionary.ContainsKey (KeyValues.RepeatLastMouseActionKey) ? dictionary [KeyValues.RepeatLastMouseActionKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_DOWN_AND_LEFT' KeyValues.ExpandToBottomAndLeftKey' dictionary.ContainsKey (KeyValues.ExpandToBottomAndLeftKey) ? dictionary [KeyValues.ExpandToBottomAndLeftKey] : (TimeSpan?)null)' " is 222.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_DOWN_AND_RIGHT' KeyValues.ExpandToBottomAndRightKey' dictionary.ContainsKey (KeyValues.ExpandToBottomAndRightKey) ? dictionary [KeyValues.ExpandToBottomAndRightKey] : (TimeSpan?)null)' " is 226.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_DOWN' KeyValues.ExpandToBottomKey' dictionary.ContainsKey (KeyValues.ExpandToBottomKey) ? dictionary [KeyValues.ExpandToBottomKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_LEFT' KeyValues.ExpandToLeftKey' dictionary.ContainsKey (KeyValues.ExpandToLeftKey) ? dictionary [KeyValues.ExpandToLeftKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_RIGHT' KeyValues.ExpandToRightKey' dictionary.ContainsKey (KeyValues.ExpandToRightKey) ? dictionary [KeyValues.ExpandToRightKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_UP_AND_LEFT' KeyValues.ExpandToTopAndLeftKey' dictionary.ContainsKey (KeyValues.ExpandToTopAndLeftKey) ? dictionary [KeyValues.ExpandToTopAndLeftKey] : (TimeSpan?)null)' " is 211.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_UP_AND_RIGHT' KeyValues.ExpandToTopAndRightKey' dictionary.ContainsKey (KeyValues.ExpandToTopAndRightKey) ? dictionary [KeyValues.ExpandToTopAndRightKey] : (TimeSpan?)null)' " is 215.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.EXPAND_UP' KeyValues.ExpandToTopKey' dictionary.ContainsKey (KeyValues.ExpandToTopKey) ? dictionary [KeyValues.ExpandToTopKey] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ADJUST_AMOUNT_IN_PIXELS' KeyValues.MoveAndResizeAdjustmentAmountKey' dictionary.ContainsKey (KeyValues.MoveAndResizeAdjustmentAmountKey) ? dictionary [KeyValues.MoveAndResizeAdjustmentAmountKey] : (TimeSpan?)null)' " is 249.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_DOWN_AND_LEFT' KeyValues.MoveToBottomAndLeftBoundariesKey' dictionary.ContainsKey (KeyValues.MoveToBottomAndLeftBoundariesKey) ? dictionary [KeyValues.MoveToBottomAndLeftBoundariesKey] : (TimeSpan?)null)' " is 244.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_DOWN_AND_LEFT' KeyValues.MoveToBottomAndLeftKey' dictionary.ContainsKey (KeyValues.MoveToBottomAndLeftKey) ? dictionary [KeyValues.MoveToBottomAndLeftKey] : (TimeSpan?)null)' " is 214.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_DOWN_AND_RIGHT' KeyValues.MoveToBottomAndRightBoundariesKey' dictionary.ContainsKey (KeyValues.MoveToBottomAndRightBoundariesKey) ? dictionary [KeyValues.MoveToBottomAndRightBoundariesKey] : (TimeSpan?)null)' " is 248.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_DOWN_AND_RIGHT' KeyValues.MoveToBottomAndRightKey' dictionary.ContainsKey (KeyValues.MoveToBottomAndRightKey) ? dictionary [KeyValues.MoveToBottomAndRightKey] : (TimeSpan?)null)' " is 218.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_DOWN' KeyValues.MoveToBottomBoundaryKey' dictionary.ContainsKey (KeyValues.MoveToBottomBoundaryKey) ? dictionary [KeyValues.MoveToBottomBoundaryKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_DOWN' KeyValues.MoveToBottomKey' dictionary.ContainsKey (KeyValues.MoveToBottomKey) ? dictionary [KeyValues.MoveToBottomKey] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_LEFT' KeyValues.MoveToLeftBoundaryKey' dictionary.ContainsKey (KeyValues.MoveToLeftBoundaryKey) ? dictionary [KeyValues.MoveToLeftBoundaryKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_LEFT' KeyValues.MoveToLeftKey' dictionary.ContainsKey (KeyValues.MoveToLeftKey) ? dictionary [KeyValues.MoveToLeftKey] : (TimeSpan?)null)' " is 178.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_RIGHT' KeyValues.MoveToRightBoundaryKey' dictionary.ContainsKey (KeyValues.MoveToRightBoundaryKey) ? dictionary [KeyValues.MoveToRightBoundaryKey] : (TimeSpan?)null)' " is 206.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_RIGHT' KeyValues.MoveToRightKey' dictionary.ContainsKey (KeyValues.MoveToRightKey) ? dictionary [KeyValues.MoveToRightKey] : (TimeSpan?)null)' " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_UP_AND_LEFT' KeyValues.MoveToTopAndLeftBoundariesKey' dictionary.ContainsKey (KeyValues.MoveToTopAndLeftBoundariesKey) ? dictionary [KeyValues.MoveToTopAndLeftBoundariesKey] : (TimeSpan?)null)' " is 233.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_UP_AND_LEFT' KeyValues.MoveToTopAndLeftKey' dictionary.ContainsKey (KeyValues.MoveToTopAndLeftKey) ? dictionary [KeyValues.MoveToTopAndLeftKey] : (TimeSpan?)null)' " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_UP_AND_RIGHT' KeyValues.MoveToTopAndRightBoundariesKey' dictionary.ContainsKey (KeyValues.MoveToTopAndRightBoundariesKey) ? dictionary [KeyValues.MoveToTopAndRightBoundariesKey] : (TimeSpan?)null)' " is 237.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_UP_AND_RIGHT' KeyValues.MoveToTopAndRightKey' dictionary.ContainsKey (KeyValues.MoveToTopAndRightKey) ? dictionary [KeyValues.MoveToTopAndRightKey] : (TimeSpan?)null)' " is 207.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.JUMP_UP' KeyValues.MoveToTopBoundaryKey' dictionary.ContainsKey (KeyValues.MoveToTopBoundaryKey) ? dictionary [KeyValues.MoveToTopBoundaryKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.MOVE_UP' KeyValues.MoveToTopKey' dictionary.ContainsKey (KeyValues.MoveToTopKey) ? dictionary [KeyValues.MoveToTopKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_UP_AND_RIGHT' KeyValues.ShrinkFromBottomAndLeftKey' dictionary.ContainsKey (KeyValues.ShrinkFromBottomAndLeftKey) ? dictionary [KeyValues.ShrinkFromBottomAndLeftKey] : (TimeSpan?)null)' " is 227.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_UP_AND_LEFT' KeyValues.ShrinkFromBottomAndRightKey' dictionary.ContainsKey (KeyValues.ShrinkFromBottomAndRightKey) ? dictionary [KeyValues.ShrinkFromBottomAndRightKey] : (TimeSpan?)null)' " is 229.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_UP' KeyValues.ShrinkFromBottomKey' dictionary.ContainsKey (KeyValues.ShrinkFromBottomKey) ? dictionary [KeyValues.ShrinkFromBottomKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_RIGHT' KeyValues.ShrinkFromLeftKey' dictionary.ContainsKey (KeyValues.ShrinkFromLeftKey) ? dictionary [KeyValues.ShrinkFromLeftKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_LEFT' KeyValues.ShrinkFromRightKey' dictionary.ContainsKey (KeyValues.ShrinkFromRightKey) ? dictionary [KeyValues.ShrinkFromRightKey] : (TimeSpan?)null)' " is 195.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_DOWN_AND_RIGHT' KeyValues.ShrinkFromTopAndLeftKey' dictionary.ContainsKey (KeyValues.ShrinkFromTopAndLeftKey) ? dictionary [KeyValues.ShrinkFromTopAndLeftKey] : (TimeSpan?)null)' " is 220.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_DOWN_AND_LEFT' KeyValues.ShrinkFromTopAndRightKey' dictionary.ContainsKey (KeyValues.ShrinkFromTopAndRightKey) ? dictionary [KeyValues.ShrinkFromTopAndRightKey] : (TimeSpan?)null)' " is 222.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SHRINK_DOWN' KeyValues.ShrinkFromTopKey' dictionary.ContainsKey (KeyValues.ShrinkFromTopKey) ? dictionary [KeyValues.ShrinkFromTopKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DOWN_ARROW' KeyValues.ArrowDownKey' dictionary.ContainsKey (KeyValues.ArrowDownKey) ? dictionary [KeyValues.ArrowDownKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.LEFT_ARROW' KeyValues.ArrowLeftKey' dictionary.ContainsKey (KeyValues.ArrowLeftKey) ? dictionary [KeyValues.ArrowLeftKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.RIGHT_ARROW' KeyValues.ArrowRightKey' dictionary.ContainsKey (KeyValues.ArrowRightKey) ? dictionary [KeyValues.ArrowRightKey] : (TimeSpan?)null)' " is 180.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.UP_ARROW' KeyValues.ArrowUpKey' dictionary.ContainsKey (KeyValues.ArrowUpKey) ? dictionary [KeyValues.ArrowUpKey] : (TimeSpan?)null)' " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.BREAK' KeyValues.BreakKey' dictionary.ContainsKey (KeyValues.BreakKey) ? dictionary [KeyValues.BreakKey] : (TimeSpan?)null)' " is 159.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.DEL' KeyValues.DeleteKey' dictionary.ContainsKey (KeyValues.DeleteKey) ? dictionary [KeyValues.DeleteKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.END' KeyValues.EndKey' dictionary.ContainsKey (KeyValues.EndKey) ? dictionary [KeyValues.EndKey] : (TimeSpan?)null)' " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.ESC' KeyValues.EscapeKey' dictionary.ContainsKey (KeyValues.EscapeKey) ? dictionary [KeyValues.EscapeKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F10' KeyValues.F10Key' dictionary.ContainsKey (KeyValues.F10Key) ? dictionary [KeyValues.F10Key] : (TimeSpan?)null)' " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F11' KeyValues.F11Key' dictionary.ContainsKey (KeyValues.F11Key) ? dictionary [KeyValues.F11Key] : (TimeSpan?)null)' " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F12' KeyValues.F12Key' dictionary.ContainsKey (KeyValues.F12Key) ? dictionary [KeyValues.F12Key] : (TimeSpan?)null)' " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F1' KeyValues.F1Key' dictionary.ContainsKey (KeyValues.F1Key) ? dictionary [KeyValues.F1Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F2' KeyValues.F2Key' dictionary.ContainsKey (KeyValues.F2Key) ? dictionary [KeyValues.F2Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F3' KeyValues.F3Key' dictionary.ContainsKey (KeyValues.F3Key) ? dictionary [KeyValues.F3Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F4' KeyValues.F4Key' dictionary.ContainsKey (KeyValues.F4Key) ? dictionary [KeyValues.F4Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F5' KeyValues.F5Key' dictionary.ContainsKey (KeyValues.F5Key) ? dictionary [KeyValues.F5Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F6' KeyValues.F6Key' dictionary.ContainsKey (KeyValues.F6Key) ? dictionary [KeyValues.F6Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F7' KeyValues.F7Key' dictionary.ContainsKey (KeyValues.F7Key) ? dictionary [KeyValues.F7Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F8' KeyValues.F8Key' dictionary.ContainsKey (KeyValues.F8Key) ? dictionary [KeyValues.F8Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.F9' KeyValues.F9Key' dictionary.ContainsKey (KeyValues.F9Key) ? dictionary [KeyValues.F9Key] : (TimeSpan?)null)' " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.HOME' KeyValues.HomeKey' dictionary.ContainsKey (KeyValues.HomeKey) ? dictionary [KeyValues.HomeKey] : (TimeSpan?)null)' " is 155.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.INS' KeyValues.InsertKey' dictionary.ContainsKey (KeyValues.InsertKey) ? dictionary [KeyValues.InsertKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.CONTEXTUAL_MENU_KEY' KeyValues.MenuKey' dictionary.ContainsKey (KeyValues.MenuKey) ? dictionary [KeyValues.MenuKey] : (TimeSpan?)null)' " is 170.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.NUM_LK' KeyValues.NumberLockKey' dictionary.ContainsKey (KeyValues.NumberLockKey) ? dictionary [KeyValues.NumberLockKey] : (TimeSpan?)null)' " is 175.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.PG_DN' KeyValues.PgDnKey' dictionary.ContainsKey (KeyValues.PgDnKey) ? dictionary [KeyValues.PgDnKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.PG_UP' KeyValues.PgUpKey' dictionary.ContainsKey (KeyValues.PgUpKey) ? dictionary [KeyValues.PgUpKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.PRNT_SCR' KeyValues.PrintScreenKey' dictionary.ContainsKey (KeyValues.PrintScreenKey) ? dictionary [KeyValues.PrintScreenKey] : (TimeSpan?)null)' " is 180.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SCRN_LK' KeyValues.ScrollLockKey' dictionary.ContainsKey (KeyValues.ScrollLockKey) ? dictionary [KeyValues.ScrollLockKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.NEXT' KeyValues.NextSuggestionsKey' dictionary.ContainsKey (KeyValues.NextSuggestionsKey) ? dictionary [KeyValues.NextSuggestionsKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.PREV' KeyValues.PreviousSuggestionsKey' dictionary.ContainsKey (KeyValues.PreviousSuggestionsKey) ? dictionary [KeyValues.PreviousSuggestionsKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SUGGESTION_1' KeyValues.Suggestion1Key' dictionary.ContainsKey (KeyValues.Suggestion1Key) ? dictionary [KeyValues.Suggestion1Key] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SUGGESTION_2' KeyValues.Suggestion2Key' dictionary.ContainsKey (KeyValues.Suggestion2Key) ? dictionary [KeyValues.Suggestion2Key] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SUGGESTION_3' KeyValues.Suggestion3Key' dictionary.ContainsKey (KeyValues.Suggestion3Key) ? dictionary [KeyValues.Suggestion3Key] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SUGGESTION_4' KeyValues.Suggestion4Key' dictionary.ContainsKey (KeyValues.Suggestion4Key) ? dictionary [KeyValues.Suggestion4Key] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SUGGESTION_5' KeyValues.Suggestion5Key' dictionary.ContainsKey (KeyValues.Suggestion5Key) ? dictionary [KeyValues.Suggestion5Key] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "			new KeyValueAndTimeSpan (Resources.SUGGESTION_6' KeyValues.Suggestion6Key' dictionary.ContainsKey (KeyValues.Suggestion6Key) ? dictionary [KeyValues.Suggestion6Key] : (TimeSpan?)null)' " is 184.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ToSetting,The length of the statement  "	groups.SelectMany (g => g.KeyValueAndTimeSpans).Where (kvats => kvats.TimeSpanTotalMilliseconds != null).ToList ().ForEach (kvats => dictionary.Add (kvats.KeyValue' TimeSpan.FromMilliseconds (kvats.TimeSpanTotalMilliseconds.Value))); " is 233.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,Load,The length of the statement  "	MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness = Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness; " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,ApplyChanges,The length of the statement  "	Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness = MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness; " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\MainWindow.xaml.cs,RequestManagementWindow,The length of the statement  "	var modalManagementWindow = WindowManipulationService != null && WindowManipulationService.WindowState == WindowStates.Maximised; " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\MainWindow.xaml.cs,ToggleManualMode,The length of the statement  "		mainViewModel.RaiseToastNotification (Properties.Resources.MANUAL_MODE_CHANGED' changingToManualMode ? Properties.Resources.MANUAL_MODE_ENABLED : Properties.Resources.MANUAL_MODE_DISABLED' NotificationTypes.Normal' () => inputService.RequestResume ()); " is 252.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\MainWindow.xaml.cs,Quit,The length of the statement  "	if (MessageBox.Show (Properties.Resources.QUIT_MESSAGE' Properties.Resources.QUIT' MessageBoxButton.YesNo) == MessageBoxResult.Yes) { " is 133.
Complex Conditional,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The conditional expression  "ignoreSingleTrailingSpace && input.Length >= 2 && input [input.Length - 1].ToCharCategory () == CharCategories.Space && input [input.Length - 2].ToCharCategory () == CharCategories.LetterOrDigitOrSymbolOrPunctuation"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,InProgressWord,The conditional expression  "!string.IsNullOrWhiteSpace (input) && cursorIndex > 0 && cursorIndex <= input.Length && !char.IsWhiteSpace (input [cursorIndex - 1])"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,AddEntryToDictionary,The conditional expression  "entries != null && !string.IsNullOrWhiteSpace (entry) && (loadedFromDictionaryFile || !ExistsInDictionary (entry))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The conditional expression  "MultiKeySelectionSupported && keyStateService.KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown () && triggerSignal.PointAndKeyValue.Value.KeyValue != null && KeyValues.MultiKeySelectionKeys.Contains (triggerSignal.PointAndKeyValue.Value.KeyValue.Value) && !KeyValues.CombiningKeys.Any (key => keyStateService.KeyDownStates [key].Value.IsDownOrLockedDown ())"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The conditional expression  "(triggerSignal.Signal >= 1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextHigh) || (triggerSignal.Signal <= -1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextLow)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The conditional expression  "result.Item2 == null && result.Item3 == null && (result.Item4 == null || !result.Item4.Any ())"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,SampleCallback,The conditional expression  "!double.IsNaN (leftX) && leftX > 0 && !double.IsNaN (leftY) && leftY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,SampleCallback,The conditional expression  "!double.IsNaN (rightX) && rightX > 0 && !double.IsNaN (rightY) && rightY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,EventCallback,The conditional expression  "pointEvent != null && !double.IsNaN (eventData.positionX) && eventData.positionX > 0 && !double.IsNaN (eventData.positionY) && eventData.positionY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The conditional expression  "floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The conditional expression  "finalDockLeftInDp < 0 || finalDockTopInDp < 0 || finalDockWidthInDp <= 0 || finalDockHeightInDp <= 0 || (finalDockLeftInDp + finalDockWidthInDp) > screenBoundsInDp.Right || (finalDockTopInDp + finalDockHeightInDp) > screenBoundsInDp.Bottom"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The conditional expression  "lastTextChange.Length == 1 && captureText.Length == 1 && !lastTextChangeWasSuggestion && !(keyStateService.KeyDownStates [KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown () && char.IsLetter (captureText.First ()))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SwapText,The conditional expression  "!string.IsNullOrEmpty (textToSwapOut) && !string.IsNullOrEmpty (textToSwapIn) && Text != null && Text.Length >= textToSwapOut.Length"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,AutoAddSpace,The conditional expression  "Settings.Default.AutoAddSpace && Text != null && Text.Any () && !suppressNextAutoSpace"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,TheEyeTribePointService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribePointService.cs,OnGazeUpdate,The conditional expression  "GazeManager.Instance.IsCalibrated && pointEvent != null && !double.IsNaN (data.SmoothedCoordinates.X) && !double.IsNaN (data.SmoothedCoordinates.Y)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,TranslateMagnifiedSelectionPoint,The conditional expression  "imagePoint.X >= 0 && imagePoint.X < imageWidth && imagePoint.Y >= 0 && imagePoint.Y < imageHeight"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The conditional expression  "IsOpen && pointCopy.X >= screenTopLeft.X && pointCopy.X <= screenBottomRight.X && pointCopy.Y >= screenTopLeft.Y && pointCopy.Y <= screenBottomRight.Y"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The conditional expression  "canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,TraverseAllKeysAndBuildPointToKeyValueMap,The conditional expression  "key.IsVisible && PresentationSource.FromVisual (key) != null && (key.Value.FunctionKey != null || key.Value.String != null)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupInputServiceEventHandlers,The conditional expression  "SelectionMode == SelectionModes.Key && (singleKeyValue != null || (multiKeySelection != null && multiKeySelection.Any ()))"  is complex.
Empty Catch Block,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,HandleCorruptSettings,The method has an empty catch block.
Empty Catch Block,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\ManagementViewModel.cs,Ok,The method has an empty catch block.
Magic Number,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The following statement contains a magic number: if (ignoreSingleTrailingSpace && input.Length >= 2 && input [input.Length - 1].ToCharCategory () == CharCategories.Space && input [input.Length - 2].ToCharCategory () == CharCategories.LetterOrDigitOrSymbolOrPunctuation) {  	count = 1;  }  
Magic Number,JuliusSweetland.OptiKey.Extensions,StringExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The following statement contains a magic number: if (ignoreSingleTrailingSpace && input.Length >= 2 && input [input.Length - 1].ToCharCategory () == CharCategories.Space && input [input.Length - 2].ToCharCategory () == CharCategories.LetterOrDigitOrSymbolOrPunctuation) {  	count = 1;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hash = (hash * 397) ^ KeyValue.GetHashCode ();  	//Struct so not nullable  	hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hash = (hash * 397) ^ KeyValue.GetHashCode ();  	//Struct so not nullable  	hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hash = (hash * 397) ^ KeyValue.GetHashCode ();  	//Struct so not nullable  	hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (Name != null ? Name.GetHashCode () : 0);  	hash = (hash * 397) ^ KeyValue.GetHashCode ();  	//Struct so not nullable  	hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (Name != null ? Name.GetHashCode () : 0);  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ KeyValue.GetHashCode ();  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode () : 0);  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode () : 0);  	hash = (hash * 397) ^ (String != null ? String.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode () : 0);  	hash = (hash * 397) ^ (String != null ? String.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 13;  	hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode () : 0);  	hash = (hash * 397) ^ (String != null ? String.GetHashCode () : 0);  	return hash;  }  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode () : 0);  
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 397) ^ (String != null ? String.GetHashCode () : 0);  
Magic Number,JuliusSweetland.OptiKey.Native,PInvoke,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Native\Common\PInvoke.cs,GetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4) {  	return GetWindowLong32 (hWnd' nIndex);  }  
Magic Number,JuliusSweetland.OptiKey.Services.AutoComplete,NGramAutoComplete,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AutoComplete\NGramAutoComplete.cs,CalculateScore,The following statement contains a magic number: return 2 * numberOfMatches / (numberOfRootNGrams + numberOfEntryNGrams);  
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,AudioService,The following statement contains a magic number: Bass.BASS_Init (-1' 44100' BASSInit.BASS_DEVICE_DEFAULT' IntPtr.Zero);  
Magic Number,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadUserDictionaryFromFile,The following statement contains a magic number: using (var reader = File.OpenText (filePath)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		if (!string.IsNullOrWhiteSpace (line)) {  			var entryWithUsageCount = line.Trim ().Split ('|');  			if (entryWithUsageCount.Length == 2) {  				var entry = entryWithUsageCount [0];  				var usageCount = int.Parse (entryWithUsageCount [1]);  				AddEntryToDictionary (entry' loadedFromDictionaryFile: true' usageCount: usageCount);  			}  		}  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadUserDictionaryFromFile,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	if (!string.IsNullOrWhiteSpace (line)) {  		var entryWithUsageCount = line.Trim ().Split ('|');  		if (entryWithUsageCount.Length == 2) {  			var entry = entryWithUsageCount [0];  			var usageCount = int.Parse (entryWithUsageCount [1]);  			AddEntryToDictionary (entry' loadedFromDictionaryFile: true' usageCount: usageCount);  		}  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadUserDictionaryFromFile,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace (line)) {  	var entryWithUsageCount = line.Trim ().Split ('|');  	if (entryWithUsageCount.Length == 2) {  		var entry = entryWithUsageCount [0];  		var usageCount = int.Parse (entryWithUsageCount [1]);  		AddEntryToDictionary (entry' loadedFromDictionaryFile: true' usageCount: usageCount);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,DictionaryService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadUserDictionaryFromFile,The following statement contains a magic number: if (entryWithUsageCount.Length == 2) {  	var entry = entryWithUsageCount [0];  	var usageCount = int.Parse (entryWithUsageCount [1]);  	AddEntryToDictionary (entry' loadedFromDictionaryFile: true' usageCount: usageCount);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null) {  	if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  		Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  	}  	selectionProgressEvent (this' selectionProgress);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null) {  	if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  		Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  	}  	selectionProgressEvent (this' selectionProgress);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null) {  	if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  		Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  	}  	selectionProgressEvent (this' selectionProgress);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null) {  	if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  		Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  	}  	selectionProgressEvent (this' selectionProgress);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  	Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  	Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  	Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  }  
Magic Number,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1) {  	Log.DebugFormat ("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	switch (direction) //Handle vertical adjustment  	{  	case ExpandToDirections.Bottom:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.BottomRight:  		window.Height += yAdjustmentToBottom;  		break;  	case ExpandToDirections.Top:  	case ExpandToDirections.TopLeft:  	case ExpandToDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		window.Height += yAdjustmentToTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	switch (direction) //Handle horizontal adjustment  	{  	case ExpandToDirections.Left:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		window.Width += xAdjustmentToLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ExpandToDirections.Right:  	case ExpandToDirections.BottomRight:  	case ExpandToDirections.TopRight:  		window.Width += xAdjustmentToRight;  		break;  	}  	//Recalculate distance to boundaries and check if we are now aligned with 3 edges  	distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);  	distanceToTopBoundary = window.Top - screenBoundsInDp.Top;  	distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;  	distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);  	DockEdges? dockToEdge = null;  	if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Top;  	} else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Bottom;  	} else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Left;  	} else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Right;  	}  	if (dockToEdge != null) {  		//We are aligned with 3 edges and currently floating' so switch to docked mode  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (dockToEdge.Value);  		RegisterAppBar ();  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	} else {  		PersistSizeAndPosition ();  	}  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	switch (direction) //Handle vertical adjustment  	{  	case ExpandToDirections.Bottom:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.BottomRight:  		window.Height += yAdjustmentToBottom;  		break;  	case ExpandToDirections.Top:  	case ExpandToDirections.TopLeft:  	case ExpandToDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		window.Height += yAdjustmentToTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	switch (direction) //Handle horizontal adjustment  	{  	case ExpandToDirections.Left:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		window.Width += xAdjustmentToLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ExpandToDirections.Right:  	case ExpandToDirections.BottomRight:  	case ExpandToDirections.TopRight:  		window.Width += xAdjustmentToRight;  		break;  	}  	//Recalculate distance to boundaries and check if we are now aligned with 3 edges  	distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);  	distanceToTopBoundary = window.Top - screenBoundsInDp.Top;  	distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;  	distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);  	DockEdges? dockToEdge = null;  	if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Top;  	} else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Bottom;  	} else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Left;  	} else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Right;  	}  	if (dockToEdge != null) {  		//We are aligned with 3 edges and currently floating' so switch to docked mode  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (dockToEdge.Value);  		RegisterAppBar ();  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	} else {  		PersistSizeAndPosition ();  	}  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	switch (direction) //Handle vertical adjustment  	{  	case ExpandToDirections.Bottom:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.BottomRight:  		window.Height += yAdjustmentToBottom;  		break;  	case ExpandToDirections.Top:  	case ExpandToDirections.TopLeft:  	case ExpandToDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		window.Height += yAdjustmentToTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	switch (direction) //Handle horizontal adjustment  	{  	case ExpandToDirections.Left:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		window.Width += xAdjustmentToLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ExpandToDirections.Right:  	case ExpandToDirections.BottomRight:  	case ExpandToDirections.TopRight:  		window.Width += xAdjustmentToRight;  		break;  	}  	//Recalculate distance to boundaries and check if we are now aligned with 3 edges  	distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);  	distanceToTopBoundary = window.Top - screenBoundsInDp.Top;  	distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;  	distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);  	DockEdges? dockToEdge = null;  	if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Top;  	} else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Bottom;  	} else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Left;  	} else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Right;  	}  	if (dockToEdge != null) {  		//We are aligned with 3 edges and currently floating' so switch to docked mode  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (dockToEdge.Value);  		RegisterAppBar ();  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	} else {  		PersistSizeAndPosition ();  	}  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	switch (direction) //Handle vertical adjustment  	{  	case ExpandToDirections.Bottom:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.BottomRight:  		window.Height += yAdjustmentToBottom;  		break;  	case ExpandToDirections.Top:  	case ExpandToDirections.TopLeft:  	case ExpandToDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		window.Height += yAdjustmentToTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	switch (direction) //Handle horizontal adjustment  	{  	case ExpandToDirections.Left:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		window.Width += xAdjustmentToLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ExpandToDirections.Right:  	case ExpandToDirections.BottomRight:  	case ExpandToDirections.TopRight:  		window.Width += xAdjustmentToRight;  		break;  	}  	//Recalculate distance to boundaries and check if we are now aligned with 3 edges  	distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);  	distanceToTopBoundary = window.Top - screenBoundsInDp.Top;  	distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;  	distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);  	DockEdges? dockToEdge = null;  	if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Top;  	} else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Bottom;  	} else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Left;  	} else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Right;  	}  	if (dockToEdge != null) {  		//We are aligned with 3 edges and currently floating' so switch to docked mode  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (dockToEdge.Value);  		RegisterAppBar ();  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	} else {  		PersistSizeAndPosition ();  	}  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  } else {  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  } else {  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  } else {  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  	} else {  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  } else {  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity += increment ? 0.1 : -0.1;  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity += increment ? 0.1 : -0.1;  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity = opacity.CoerceToLowerLimit (0.1);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetOpacity,The following statement contains a magic number: opacity = opacity.CoerceToLowerLimit (0.1);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  } else {  	yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  	if (dockSize == DockSizes.Full) {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  	} else {  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  } else {  	yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  } else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  } else {  	xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  	if (dockSize == DockSizes.Full) {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  		saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  	} else {  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  	}  	adjustment = true;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: if (dockSize == DockSizes.Full) {  	xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  	saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  } else {  	xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition ().ToMinimisedEdge () : minimisedEdge) {  case MinimisedEdges.Top:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Top;  	break;  case MinimisedEdges.Bottom:  	if (screenBoundsInDp.Height > screenBoundsInDp.Width) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is taller than it is wide  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  	y = screenBoundsInDp.Bottom - height;  	break;  case MinimisedEdges.Left:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Left;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  default:  	//case DockEdges.Right:  	if (screenBoundsInDp.Width > screenBoundsInDp.Height) {  		//Ensure the minimise button's long edge is against the docked edge'  		//so swap width and height if aspect ratio is wider than it is high  		var temp = width;  		width = height;  		height = temp;  	}  	x = screenBoundsInDp.Right - width;  	y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) {  	//Coerce state  	var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen ();  	if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  		Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  		fullDockThicknessAsPercentageOfScreen = 50;  		saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	}  	double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness ();  	if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  		Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  		collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  		saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	}  	Rect floatingSizeAndPosition = getFloatingSizeAndPosition ();  	if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  		//Default to two-thirds of the screen's width and height' positioned centrally  		Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  		floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  		saveFloatingSizeAndPosition (floatingSizeAndPosition);  	}  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  	Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  	fullDockThicknessAsPercentageOfScreen = 50;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN || fullDockThicknessAsPercentageOfScreen >= 100) {  	Log.WarnFormat ("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);  	fullDockThicknessAsPercentageOfScreen = 50;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: fullDockThicknessAsPercentageOfScreen = 50;  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  	Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  	collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100) {  	Log.WarnFormat ("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);  	collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: collapsedDockThicknessAsPercentageOfFullDockThickness = 20;  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (floatingSizeAndPosition == default(Rect) || floatingSizeAndPosition.Left < screenBoundsInDp.Left || floatingSizeAndPosition.Right > screenBoundsInDp.Right || floatingSizeAndPosition.Top < screenBoundsInDp.Top || floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom || floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) || floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))) {  	//Default to two-thirds of the screen's width and height' positioned centrally  	Log.WarnFormat ("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);  	floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  	saveFloatingSizeAndPosition (floatingSizeAndPosition);  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: floatingSizeAndPosition = new Rect (screenBoundsInDp.Left + screenBoundsInDp.Width / 6' screenBoundsInDp.Top + screenBoundsInDp.Height / 6' 2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize ()) {  case DockSizes.Full:  	var fullDockThicknessAsPercentageOfScreen = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? (window.ActualHeight / screenBoundsInDp.Height) * 100 : (window.ActualWidth / screenBoundsInDp.Width) * 100;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	break;  case DockSizes.Collapsed:  	var collapsedDockThicknessAsPercentageOfFullDockThickness = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen ()) * 10000 : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen ()) * 10000;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize ()) {  case DockSizes.Full:  	var fullDockThicknessAsPercentageOfScreen = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? (window.ActualHeight / screenBoundsInDp.Height) * 100 : (window.ActualWidth / screenBoundsInDp.Width) * 100;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	break;  case DockSizes.Collapsed:  	var collapsedDockThicknessAsPercentageOfFullDockThickness = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen ()) * 10000 : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen ()) * 10000;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize ()) {  case DockSizes.Full:  	var fullDockThicknessAsPercentageOfScreen = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? (window.ActualHeight / screenBoundsInDp.Height) * 100 : (window.ActualWidth / screenBoundsInDp.Width) * 100;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	break;  case DockSizes.Collapsed:  	var collapsedDockThicknessAsPercentageOfFullDockThickness = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen ()) * 10000 : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen ()) * 10000;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize ()) {  case DockSizes.Full:  	var fullDockThicknessAsPercentageOfScreen = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? (window.ActualHeight / screenBoundsInDp.Height) * 100 : (window.ActualWidth / screenBoundsInDp.Width) * 100;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	break;  case DockSizes.Collapsed:  	var collapsedDockThicknessAsPercentageOfFullDockThickness = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen ()) * 10000 : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen ()) * 10000;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey) {  case FunctionKeys.BackMany:  	if (!string.IsNullOrEmpty (Text)) {  		var backManyCount = Text.CountBackToLastCharCategoryBoundary ();  		dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backManyCount' backManyCount).Trim ());  		var textAfterBackMany = Text.Substring (0' Text.Length - backManyCount);  		var textChangedByBackMany = Text != textAfterBackMany;  		Text = textAfterBackMany;  		if (backManyCount == 0)  			backManyCount = 1;  		//Always publish at least one backspace  		for (int i = 0; i < backManyCount; i++) {  			PublishKeyPress (FunctionKeys.BackOne);  			ReleaseUnlockedKeys ();  		}  		if (textChangedByBackMany || string.IsNullOrEmpty (Text)) {  			AutoPressShiftIfAppropriate ();  		}  		StoreLastTextChange (null);  		GenerateAutoCompleteSuggestions ();  		Log.Debug ("Suppressing next auto space.");  		suppressNextAutoSpace = true;  	} else {  		//Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'  		PublishKeyPress (FunctionKeys.BackOne);  	}  	break;  case FunctionKeys.BackOne:  	var backOneCount = string.IsNullOrEmpty (lastTextChange) ? 1 //Default to removing one character if no lastTextChange  	: lastTextChange.Length;  	var textChangedByBackOne = false;  	if (!string.IsNullOrEmpty (Text)) {  		if (Text.Length < backOneCount) {  			backOneCount = Text.Length;  			//Coallesce backCount if somehow the Text length is less  		}  		var textAfterBackOne = Text.Substring (0' Text.Length - backOneCount);  		textChangedByBackOne = Text != textAfterBackOne;  		if (backOneCount > 1) {  			//Removing more than one character - only decrement removed string  			dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backOneCount' backOneCount).Trim ());  		} else if (!string.IsNullOrEmpty (lastTextChange) && lastTextChange.Length == 1 && !char.IsWhiteSpace (lastTextChange [0])) {  			dictionaryService.DecrementEntryUsageCount (Text.InProgressWord (Text.Length));  			//We are removing a non-whitespace character - decrement the in progress word  			dictionaryService.IncrementEntryUsageCount (textAfterBackOne.InProgressWord (Text.Length));  			//And increment the in progress word that is left after the removal  		}  		Text = textAfterBackOne;  	}  	for (int i = 0; i < backOneCount; i++) {  		PublishKeyPress (FunctionKeys.BackOne);  		ReleaseUnlockedKeys ();  	}  	if (textChangedByBackOne || string.IsNullOrEmpty (Text)) {  		AutoPressShiftIfAppropriate ();  	}  	StoreLastTextChange (null);  	GenerateAutoCompleteSuggestions ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.ClearScratchpad:  	Text = null;  	StoreLastTextChange (null);  	ClearSuggestions ();  	AutoPressShiftIfAppropriate ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.Suggestion1:  	SwapLastTextChangeForSuggestion (0);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion2:  	SwapLastTextChangeForSuggestion (1);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion3:  	SwapLastTextChangeForSuggestion (2);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion4:  	SwapLastTextChangeForSuggestion (3);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion5:  	SwapLastTextChangeForSuggestion (4);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion6:  	SwapLastTextChangeForSuggestion (5);  	lastTextChangeWasSuggestion = true;  	break;  default:  	if (functionKey.ToVirtualKeyCode () != null) {  		//Key corresponds to physical keyboard key  		GenerateAutoCompleteSuggestions ();  		//If the key cannot be pressed or locked down (these are handled in   		//ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys  		var keyValue = new KeyValue (functionKey);  		if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains (keyValue)) {  			PublishKeyPress (functionKey);  			ReleaseUnlockedKeys ();  		}  	}  	if (functionKey == FunctionKeys.LeftShift) {  		shiftStateSetAutomatically = false;  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey) {  case FunctionKeys.BackMany:  	if (!string.IsNullOrEmpty (Text)) {  		var backManyCount = Text.CountBackToLastCharCategoryBoundary ();  		dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backManyCount' backManyCount).Trim ());  		var textAfterBackMany = Text.Substring (0' Text.Length - backManyCount);  		var textChangedByBackMany = Text != textAfterBackMany;  		Text = textAfterBackMany;  		if (backManyCount == 0)  			backManyCount = 1;  		//Always publish at least one backspace  		for (int i = 0; i < backManyCount; i++) {  			PublishKeyPress (FunctionKeys.BackOne);  			ReleaseUnlockedKeys ();  		}  		if (textChangedByBackMany || string.IsNullOrEmpty (Text)) {  			AutoPressShiftIfAppropriate ();  		}  		StoreLastTextChange (null);  		GenerateAutoCompleteSuggestions ();  		Log.Debug ("Suppressing next auto space.");  		suppressNextAutoSpace = true;  	} else {  		//Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'  		PublishKeyPress (FunctionKeys.BackOne);  	}  	break;  case FunctionKeys.BackOne:  	var backOneCount = string.IsNullOrEmpty (lastTextChange) ? 1 //Default to removing one character if no lastTextChange  	: lastTextChange.Length;  	var textChangedByBackOne = false;  	if (!string.IsNullOrEmpty (Text)) {  		if (Text.Length < backOneCount) {  			backOneCount = Text.Length;  			//Coallesce backCount if somehow the Text length is less  		}  		var textAfterBackOne = Text.Substring (0' Text.Length - backOneCount);  		textChangedByBackOne = Text != textAfterBackOne;  		if (backOneCount > 1) {  			//Removing more than one character - only decrement removed string  			dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backOneCount' backOneCount).Trim ());  		} else if (!string.IsNullOrEmpty (lastTextChange) && lastTextChange.Length == 1 && !char.IsWhiteSpace (lastTextChange [0])) {  			dictionaryService.DecrementEntryUsageCount (Text.InProgressWord (Text.Length));  			//We are removing a non-whitespace character - decrement the in progress word  			dictionaryService.IncrementEntryUsageCount (textAfterBackOne.InProgressWord (Text.Length));  			//And increment the in progress word that is left after the removal  		}  		Text = textAfterBackOne;  	}  	for (int i = 0; i < backOneCount; i++) {  		PublishKeyPress (FunctionKeys.BackOne);  		ReleaseUnlockedKeys ();  	}  	if (textChangedByBackOne || string.IsNullOrEmpty (Text)) {  		AutoPressShiftIfAppropriate ();  	}  	StoreLastTextChange (null);  	GenerateAutoCompleteSuggestions ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.ClearScratchpad:  	Text = null;  	StoreLastTextChange (null);  	ClearSuggestions ();  	AutoPressShiftIfAppropriate ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.Suggestion1:  	SwapLastTextChangeForSuggestion (0);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion2:  	SwapLastTextChangeForSuggestion (1);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion3:  	SwapLastTextChangeForSuggestion (2);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion4:  	SwapLastTextChangeForSuggestion (3);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion5:  	SwapLastTextChangeForSuggestion (4);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion6:  	SwapLastTextChangeForSuggestion (5);  	lastTextChangeWasSuggestion = true;  	break;  default:  	if (functionKey.ToVirtualKeyCode () != null) {  		//Key corresponds to physical keyboard key  		GenerateAutoCompleteSuggestions ();  		//If the key cannot be pressed or locked down (these are handled in   		//ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys  		var keyValue = new KeyValue (functionKey);  		if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains (keyValue)) {  			PublishKeyPress (functionKey);  			ReleaseUnlockedKeys ();  		}  	}  	if (functionKey == FunctionKeys.LeftShift) {  		shiftStateSetAutomatically = false;  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey) {  case FunctionKeys.BackMany:  	if (!string.IsNullOrEmpty (Text)) {  		var backManyCount = Text.CountBackToLastCharCategoryBoundary ();  		dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backManyCount' backManyCount).Trim ());  		var textAfterBackMany = Text.Substring (0' Text.Length - backManyCount);  		var textChangedByBackMany = Text != textAfterBackMany;  		Text = textAfterBackMany;  		if (backManyCount == 0)  			backManyCount = 1;  		//Always publish at least one backspace  		for (int i = 0; i < backManyCount; i++) {  			PublishKeyPress (FunctionKeys.BackOne);  			ReleaseUnlockedKeys ();  		}  		if (textChangedByBackMany || string.IsNullOrEmpty (Text)) {  			AutoPressShiftIfAppropriate ();  		}  		StoreLastTextChange (null);  		GenerateAutoCompleteSuggestions ();  		Log.Debug ("Suppressing next auto space.");  		suppressNextAutoSpace = true;  	} else {  		//Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'  		PublishKeyPress (FunctionKeys.BackOne);  	}  	break;  case FunctionKeys.BackOne:  	var backOneCount = string.IsNullOrEmpty (lastTextChange) ? 1 //Default to removing one character if no lastTextChange  	: lastTextChange.Length;  	var textChangedByBackOne = false;  	if (!string.IsNullOrEmpty (Text)) {  		if (Text.Length < backOneCount) {  			backOneCount = Text.Length;  			//Coallesce backCount if somehow the Text length is less  		}  		var textAfterBackOne = Text.Substring (0' Text.Length - backOneCount);  		textChangedByBackOne = Text != textAfterBackOne;  		if (backOneCount > 1) {  			//Removing more than one character - only decrement removed string  			dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backOneCount' backOneCount).Trim ());  		} else if (!string.IsNullOrEmpty (lastTextChange) && lastTextChange.Length == 1 && !char.IsWhiteSpace (lastTextChange [0])) {  			dictionaryService.DecrementEntryUsageCount (Text.InProgressWord (Text.Length));  			//We are removing a non-whitespace character - decrement the in progress word  			dictionaryService.IncrementEntryUsageCount (textAfterBackOne.InProgressWord (Text.Length));  			//And increment the in progress word that is left after the removal  		}  		Text = textAfterBackOne;  	}  	for (int i = 0; i < backOneCount; i++) {  		PublishKeyPress (FunctionKeys.BackOne);  		ReleaseUnlockedKeys ();  	}  	if (textChangedByBackOne || string.IsNullOrEmpty (Text)) {  		AutoPressShiftIfAppropriate ();  	}  	StoreLastTextChange (null);  	GenerateAutoCompleteSuggestions ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.ClearScratchpad:  	Text = null;  	StoreLastTextChange (null);  	ClearSuggestions ();  	AutoPressShiftIfAppropriate ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.Suggestion1:  	SwapLastTextChangeForSuggestion (0);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion2:  	SwapLastTextChangeForSuggestion (1);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion3:  	SwapLastTextChangeForSuggestion (2);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion4:  	SwapLastTextChangeForSuggestion (3);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion5:  	SwapLastTextChangeForSuggestion (4);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion6:  	SwapLastTextChangeForSuggestion (5);  	lastTextChangeWasSuggestion = true;  	break;  default:  	if (functionKey.ToVirtualKeyCode () != null) {  		//Key corresponds to physical keyboard key  		GenerateAutoCompleteSuggestions ();  		//If the key cannot be pressed or locked down (these are handled in   		//ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys  		var keyValue = new KeyValue (functionKey);  		if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains (keyValue)) {  			PublishKeyPress (functionKey);  			ReleaseUnlockedKeys ();  		}  	}  	if (functionKey == FunctionKeys.LeftShift) {  		shiftStateSetAutomatically = false;  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey) {  case FunctionKeys.BackMany:  	if (!string.IsNullOrEmpty (Text)) {  		var backManyCount = Text.CountBackToLastCharCategoryBoundary ();  		dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backManyCount' backManyCount).Trim ());  		var textAfterBackMany = Text.Substring (0' Text.Length - backManyCount);  		var textChangedByBackMany = Text != textAfterBackMany;  		Text = textAfterBackMany;  		if (backManyCount == 0)  			backManyCount = 1;  		//Always publish at least one backspace  		for (int i = 0; i < backManyCount; i++) {  			PublishKeyPress (FunctionKeys.BackOne);  			ReleaseUnlockedKeys ();  		}  		if (textChangedByBackMany || string.IsNullOrEmpty (Text)) {  			AutoPressShiftIfAppropriate ();  		}  		StoreLastTextChange (null);  		GenerateAutoCompleteSuggestions ();  		Log.Debug ("Suppressing next auto space.");  		suppressNextAutoSpace = true;  	} else {  		//Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'  		PublishKeyPress (FunctionKeys.BackOne);  	}  	break;  case FunctionKeys.BackOne:  	var backOneCount = string.IsNullOrEmpty (lastTextChange) ? 1 //Default to removing one character if no lastTextChange  	: lastTextChange.Length;  	var textChangedByBackOne = false;  	if (!string.IsNullOrEmpty (Text)) {  		if (Text.Length < backOneCount) {  			backOneCount = Text.Length;  			//Coallesce backCount if somehow the Text length is less  		}  		var textAfterBackOne = Text.Substring (0' Text.Length - backOneCount);  		textChangedByBackOne = Text != textAfterBackOne;  		if (backOneCount > 1) {  			//Removing more than one character - only decrement removed string  			dictionaryService.DecrementEntryUsageCount (Text.Substring (Text.Length - backOneCount' backOneCount).Trim ());  		} else if (!string.IsNullOrEmpty (lastTextChange) && lastTextChange.Length == 1 && !char.IsWhiteSpace (lastTextChange [0])) {  			dictionaryService.DecrementEntryUsageCount (Text.InProgressWord (Text.Length));  			//We are removing a non-whitespace character - decrement the in progress word  			dictionaryService.IncrementEntryUsageCount (textAfterBackOne.InProgressWord (Text.Length));  			//And increment the in progress word that is left after the removal  		}  		Text = textAfterBackOne;  	}  	for (int i = 0; i < backOneCount; i++) {  		PublishKeyPress (FunctionKeys.BackOne);  		ReleaseUnlockedKeys ();  	}  	if (textChangedByBackOne || string.IsNullOrEmpty (Text)) {  		AutoPressShiftIfAppropriate ();  	}  	StoreLastTextChange (null);  	GenerateAutoCompleteSuggestions ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.ClearScratchpad:  	Text = null;  	StoreLastTextChange (null);  	ClearSuggestions ();  	AutoPressShiftIfAppropriate ();  	Log.Debug ("Suppressing next auto space.");  	suppressNextAutoSpace = true;  	break;  case FunctionKeys.Suggestion1:  	SwapLastTextChangeForSuggestion (0);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion2:  	SwapLastTextChangeForSuggestion (1);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion3:  	SwapLastTextChangeForSuggestion (2);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion4:  	SwapLastTextChangeForSuggestion (3);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion5:  	SwapLastTextChangeForSuggestion (4);  	lastTextChangeWasSuggestion = true;  	break;  case FunctionKeys.Suggestion6:  	SwapLastTextChangeForSuggestion (5);  	lastTextChangeWasSuggestion = true;  	break;  default:  	if (functionKey.ToVirtualKeyCode () != null) {  		//Key corresponds to physical keyboard key  		GenerateAutoCompleteSuggestions ();  		//If the key cannot be pressed or locked down (these are handled in   		//ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys  		var keyValue = new KeyValue (functionKey);  		if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains (keyValue)) {  			PublishKeyPress (functionKey);  			ReleaseUnlockedKeys ();  		}  	}  	if (functionKey == FunctionKeys.LeftShift) {  		shiftStateSetAutomatically = false;  	}  	break;  }  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: SwapLastTextChangeForSuggestion (2);  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: SwapLastTextChangeForSuggestion (3);  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: SwapLastTextChangeForSuggestion (4);  
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: SwapLastTextChangeForSuggestion (5);  
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: try {  	Log.DebugFormat ("Simulating moving mouse to point '{0}'"' point);  	var virtualScreenWidthInPixels = SystemParameters.VirtualScreenWidth * Graphics.DipScalingFactorX;  	var virtualScreenHeightInPixels = SystemParameters.VirtualScreenHeight * Graphics.DipScalingFactorY;  	//N.B. InputSimulator does not deal in pixels. The position should be a scaled point between 0 and 65535.   	//https://inputsimulator.codeplex.com/discussions/86530  	inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop (Math.Ceiling (65535 * (point.X / virtualScreenWidthInPixels))' Math.Ceiling (65535 * (point.Y / virtualScreenHeightInPixels)));  } catch (Exception exception) {  	PublishError (this' exception);  }  
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: try {  	Log.DebugFormat ("Simulating moving mouse to point '{0}'"' point);  	var virtualScreenWidthInPixels = SystemParameters.VirtualScreenWidth * Graphics.DipScalingFactorX;  	var virtualScreenHeightInPixels = SystemParameters.VirtualScreenHeight * Graphics.DipScalingFactorY;  	//N.B. InputSimulator does not deal in pixels. The position should be a scaled point between 0 and 65535.   	//https://inputsimulator.codeplex.com/discussions/86530  	inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop (Math.Ceiling (65535 * (point.X / virtualScreenWidthInPixels))' Math.Ceiling (65535 * (point.Y / virtualScreenHeightInPixels)));  } catch (Exception exception) {  	PublishError (this' exception);  }  
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop (Math.Ceiling (65535 * (point.X / virtualScreenWidthInPixels))' Math.Ceiling (65535 * (point.Y / virtualScreenHeightInPixels)));  
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop (Math.Ceiling (65535 * (point.X / virtualScreenWidthInPixels))' Math.Ceiling (65535 * (point.Y / virtualScreenHeightInPixels)));  
Magic Number,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following statement contains a magic number: calRunner.Width = 100;  
Magic Number,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following statement contains a magic number: calRunner.Height = 100;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,OnLoaded,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs> (h => window.LocationChanged += h' h => window.LocationChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => {  	Log.Debug ("Window's LocationChanged event detected.");  	screen = window.GetScreen ();  });  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,OnLoaded,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs> (h => window.LocationChanged += h' h => window.LocationChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => {  	Log.Debug ("Window's LocationChanged event detected.");  	Screen = window.GetScreen ();  });  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null) {  	Log.Debug ("PointsToDisplay is not empty - rendering points");  	var canvasWidth = (int)ActualWidth;  	var canvasHeight = (int)ActualHeight;  	if (canvasWidth > 0 && canvasHeight > 0) {  		//Create the bitModeScreenCoordinateToKeyMap  		var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  		//Create a new image  		var img = new Image {  			Source = wb'  			Stretch = Stretch.None'  			HorizontalAlignment = HorizontalAlignment.Left'  			VerticalAlignment = VerticalAlignment.Top  		};  		//Set scaling mode' edge mode and z index on canvas  		RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  		RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  		SetZIndex (img' -100);  		//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  		var rect = new Int32Rect (0' 0' 3' 3);  		int size = rect.Width * rect.Height * 4;  		var pixels = new byte[size];  		int screenCoordinatesIndex = 0;  		int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  		foreach (Point capturedCoordinate in PointsToDisplay) {  			Point canvasPoint = PointFromScreen (capturedCoordinate);  			//Convert screen to canvas point  			if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  				SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  				//Set up pixel colours (as RGB and Alpha array of bytes)  				//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  				//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  				//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  				rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  				rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  				wb.WritePixels (rect' pixels' rect.Width * 4' 0);  				screenCoordinatesIndex++;  			}  		}  		dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  	}  } else {  	Log.Debug ("OnRender - PointsToDisplay is empty - nothing to render");  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasWidth > 0 && canvasHeight > 0) {  	//Create the bitModeScreenCoordinateToKeyMap  	var wb = new WriteableBitmap (canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);  	//Create a new image  	var img = new Image {  		Source = wb'  		Stretch = Stretch.None'  		HorizontalAlignment = HorizontalAlignment.Left'  		VerticalAlignment = VerticalAlignment.Top  	};  	//Set scaling mode' edge mode and z index on canvas  	RenderOptions.SetBitmapScalingMode (img' BitmapScalingMode.NearestNeighbor);  	RenderOptions.SetEdgeMode (img' EdgeMode.Aliased);  	SetZIndex (img' -100);  	//Each "dot" is 3x3 rectangle (centered on the coordinate detected)  	var rect = new Int32Rect (0' 0' 3' 3);  	int size = rect.Width * rect.Height * 4;  	var pixels = new byte[size];  	int screenCoordinatesIndex = 0;  	int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;  	foreach (Point capturedCoordinate in PointsToDisplay) {  		Point canvasPoint = PointFromScreen (capturedCoordinate);  		//Convert screen to canvas point  		if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  			SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  			//Set up pixel colours (as RGB and Alpha array of bytes)  			//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  			//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  			//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  			rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  			rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  			wb.WritePixels (rect' pixels' rect.Width * 4' 0);  			screenCoordinatesIndex++;  		}  	}  	dc.DrawImage (wb' new Rect (0' 0' canvasWidth' canvasHeight));  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: SetZIndex (img' -100);  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: foreach (Point capturedCoordinate in PointsToDisplay) {  	Point canvasPoint = PointFromScreen (capturedCoordinate);  	//Convert screen to canvas point  	if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  		SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  		//Set up pixel colours (as RGB and Alpha array of bytes)  		//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  		//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  		//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  		rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  		rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  		wb.WritePixels (rect' pixels' rect.Width * 4' 0);  		screenCoordinatesIndex++;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: foreach (Point capturedCoordinate in PointsToDisplay) {  	Point canvasPoint = PointFromScreen (capturedCoordinate);  	//Convert screen to canvas point  	if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  		SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  		//Set up pixel colours (as RGB and Alpha array of bytes)  		//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  		//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  		//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  		rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  		rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  		wb.WritePixels (rect' pixels' rect.Width * 4' 0);  		screenCoordinatesIndex++;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: foreach (Point capturedCoordinate in PointsToDisplay) {  	Point canvasPoint = PointFromScreen (capturedCoordinate);  	//Convert screen to canvas point  	if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  		SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  		//Set up pixel colours (as RGB and Alpha array of bytes)  		//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  		//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  		//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  		rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  		rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  		wb.WritePixels (rect' pixels' rect.Width * 4' 0);  		screenCoordinatesIndex++;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  	SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  	//Set up pixel colours (as RGB and Alpha array of bytes)  	//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  	//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  	//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  	rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  	rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  	wb.WritePixels (rect' pixels' rect.Width * 4' 0);  	screenCoordinatesIndex++;  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  	SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  	//Set up pixel colours (as RGB and Alpha array of bytes)  	//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  	//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  	//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  	rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  	rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  	wb.WritePixels (rect' pixels' rect.Width * 4' 0);  	screenCoordinatesIndex++;  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight) {  	SetPixelValuesToRainbow (pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound);  	//Set up pixel colours (as RGB and Alpha array of bytes)  	//We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)  	//If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible  	//If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible  	rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  	rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  	wb.WritePixels (rect' pixels' rect.Width * 4' 0);  	screenCoordinatesIndex++;  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: rect.X = (int)canvasPoint.X == 0 ? (int)canvasPoint.X : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1 ? (int)canvasPoint.X - 1 : (int)canvasPoint.X - 2;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: rect.Y = (int)canvasPoint.Y == 0 ? (int)canvasPoint.Y : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1 ? (int)canvasPoint.Y - 1 : (int)canvasPoint.Y - 2;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: wb.WritePixels (rect' pixels' rect.Width * 4' 0);  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i) {  	pixels [i * 4 + 0] = rgb.B;  	// Blue  	pixels [i * 4 + 1] = rgb.G;  	// Green  	pixels [i * 4 + 2] = rgb.R;  	// Red  	pixels [i * 4 + 3] = 255;  	// Alpha  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 0] = rgb.B;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 1] = rgb.G;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 2] = rgb.R;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 2] = rgb.R;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 3] = 255;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 3] = 255;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: pixels [i * 4 + 3] = 255;  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: if (angle >= 360) {  	piePath = new Path {  		Fill = this.Fill'  		//Stroke = this.Stroke'  		//StrokeThickness = 1'  		Data = new GeometryGroup {  			//FillRule = FillRule.EvenOdd'  			Children = new GeometryCollection {  				new EllipseGeometry {  					Center = new Point (centreX' centreY)'  					RadiusX = radius'  					RadiusY = radius  				}  			}  		}  	};  } else {  	var innerArcStartPoint = OffsetEx (ComputeCartesianCoordinate (0' 0)' centreX' centreY);  	var innerArcEndPoint = OffsetEx (ComputeCartesianCoordinate (angle' 0)' centreX' centreY);  	var outerArcStartPoint = OffsetEx (ComputeCartesianCoordinate (0' radius)' centreX' centreY);  	var outerArcEndPoint = OffsetEx (ComputeCartesianCoordinate (angle' radius)' centreX' centreY);  	bool largeArc = angle > 180.0;  	var outerArcSize = new Size (radius' radius);  	var innerArcSize = new Size (0' 0);  	piePath = new Path {  		Fill = this.Fill'  		//Stroke = this.Stroke'  		//StrokeThickness = 1'  		Data = new PathGeometry {  			Figures = new PathFigureCollection {  				new PathFigure {  					StartPoint = innerArcStartPoint'  					Segments = new PathSegmentCollection {  						new LineSegment {  							Point = outerArcStartPoint  						}'  						new ArcSegment {  							Point = outerArcEndPoint'  							Size = outerArcSize'  							IsLargeArc = largeArc'  							SweepDirection = SweepDirection.Clockwise'  							RotationAngle = 0  						}'  						new LineSegment {  							Point = innerArcEndPoint  						}'  						new ArcSegment {  							Point = innerArcStartPoint'  							Size = innerArcSize'  							IsLargeArc = largeArc'  							SweepDirection = SweepDirection.Counterclockwise'  							RotationAngle = 0  						}  					}  				}  			}  		}  	};  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: if (angle >= 360) {  	piePath = new Path {  		Fill = this.Fill'  		//Stroke = this.Stroke'  		//StrokeThickness = 1'  		Data = new GeometryGroup {  			//FillRule = FillRule.EvenOdd'  			Children = new GeometryCollection {  				new EllipseGeometry {  					Center = new Point (centreX' centreY)'  					RadiusX = radius'  					RadiusY = radius  				}  			}  		}  	};  } else {  	var innerArcStartPoint = OffsetEx (ComputeCartesianCoordinate (0' 0)' centreX' centreY);  	var innerArcEndPoint = OffsetEx (ComputeCartesianCoordinate (angle' 0)' centreX' centreY);  	var outerArcStartPoint = OffsetEx (ComputeCartesianCoordinate (0' radius)' centreX' centreY);  	var outerArcEndPoint = OffsetEx (ComputeCartesianCoordinate (angle' radius)' centreX' centreY);  	bool largeArc = angle > 180.0;  	var outerArcSize = new Size (radius' radius);  	var innerArcSize = new Size (0' 0);  	piePath = new Path {  		Fill = this.Fill'  		//Stroke = this.Stroke'  		//StrokeThickness = 1'  		Data = new PathGeometry {  			Figures = new PathFigureCollection {  				new PathFigure {  					StartPoint = innerArcStartPoint'  					Segments = new PathSegmentCollection {  						new LineSegment {  							Point = outerArcStartPoint  						}'  						new ArcSegment {  							Point = outerArcEndPoint'  							Size = outerArcSize'  							IsLargeArc = largeArc'  							SweepDirection = SweepDirection.Clockwise'  							RotationAngle = 0  						}'  						new LineSegment {  							Point = innerArcEndPoint  						}'  						new ArcSegment {  							Point = innerArcStartPoint'  							Size = innerArcSize'  							IsLargeArc = largeArc'  							SweepDirection = SweepDirection.Counterclockwise'  							RotationAngle = 0  						}  					}  				}  			}  		}  	};  }  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToSizeChanges,The following statement contains a magic number: Observable.FromEventPattern<SizeChangedEventHandler' SizeChangedEventArgs> (h => SizeChanged += h' h => SizeChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => {  	Log.Debug ("SizeChanged event detected.");  	BuildPointToKeyMap ();  });  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowMoves,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs> (h => parentWindow.LocationChanged += h' h => parentWindow.LocationChanged -= h).Throttle (TimeSpan.FromSeconds (0.1)).ObserveOnDispatcher ().Subscribe (_ => {  	Log.Debug ("Window's LocationChanged event detected.");  	BuildPointToKeyMap ();  });  
Magic Number,JuliusSweetland.OptiKey.UI.Controls,Output,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Output.xaml.cs,Output,The following statement contains a magic number: Loaded += (sender' args) => NumberOfSuggestionsDisplayed = 4;  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,FontSizeToFitLines,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\FontSizeToFitLines.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () == 3 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var noOfLines = (int)values [0];  	var height = (double)values [1];  	var fontFamily = (FontFamily)values [2];  	var lineHeight = height / noOfLines;  	return lineHeight / fontFamily.LineSpacing;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,FontSizeToFitLines,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\FontSizeToFitLines.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () == 3 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var noOfLines = (int)values [0];  	var height = (double)values [1];  	var fontFamily = (FontFamily)values [2];  	var lineHeight = height / noOfLines;  	return lineHeight / fontFamily.LineSpacing;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,MinimiseAndDockPositionToSymbolOrientation,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\MinimiseAndDockPositionToSymbolOrientation.cs,Convert,The following statement contains a magic number: if (values.Length == 2 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var minimisedPosition = (MinimisedEdges)values [0];  	var dockPosition = (DockEdges)values [1];  	switch (minimisedPosition == MinimisedEdges.SameAsDockedPosition ? dockPosition.ToMinimisedEdge () : minimisedPosition) {  	case MinimisedEdges.Right:  		return SymbolOrientations.Right;  	case MinimisedEdges.Bottom:  		return SymbolOrientations.Bottom;  	case MinimisedEdges.Left:  		return SymbolOrientations.Left;  	default:  		//case MinimisedEdges.Top:  		return SymbolOrientations.Top;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,WidthGreaterThanHeight,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\WidthGreaterThanHeight.cs,Convert,The following statement contains a magic number: if (values.Length == 2 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var width = (double)values [0];  	var height = (double)values [1];  	return width >= height;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,LengthDividedBySpan,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\LengthDividedBySpan.cs,Convert,The following statement contains a magic number: if (values != null && values.Length == 2 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var length = (double)values [0];  	var span = (double)values [1];  	return length / span;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () == 4 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var suggestions = values [0] as List<string>;  	var suggestionsPage = (int)values [1];  	var suggestionsPerPage = (int)values [2];  	var suggestionIndex = (int)values [3];  	if (suggestions != null) {  		var index = (suggestionsPage * suggestionsPerPage) + suggestionIndex;  		if (suggestions.Count > index) {  			return suggestions [index];  		}  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () == 4 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var suggestions = values [0] as List<string>;  	var suggestionsPage = (int)values [1];  	var suggestionsPerPage = (int)values [2];  	var suggestionIndex = (int)values [3];  	if (suggestions != null) {  		var index = (suggestionsPage * suggestionsPerPage) + suggestionIndex;  		if (suggestions.Count > index) {  			return suggestions [index];  		}  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: if (values != null && values.Count () == 4 && values.All (v => v != DependencyProperty.UnsetValue)) {  	var suggestions = values [0] as List<string>;  	var suggestionsPage = (int)values [1];  	var suggestionsPerPage = (int)values [2];  	var suggestionIndex = (int)values [3];  	if (suggestions != null) {  		var index = (suggestionsPage * suggestionsPerPage) + suggestionIndex;  		if (suggestions.Count > index) {  			return suggestions [index];  		}  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value) {  case FunctionKeys.AddToDictionary:  	AddTextToDictionary ();  	break;  case FunctionKeys.AlphaKeyboard:  	Log.Info ("Changing keyboard to Alpha.");  	Keyboard = new Alpha ();  	break;  case FunctionKeys.BackFromKeyboard:  	Log.Info ("Navigating back from keyboard.");  	var navigableKeyboard = Keyboard as IBackAction;  	if (navigableKeyboard != null && navigableKeyboard.BackAction != null) {  		navigableKeyboard.BackAction ();  	} else {  		Keyboard = new Alpha ();  	}  	break;  case FunctionKeys.Calibrate:  	if (CalibrationService != null) {  		Log.Info ("Calibrate requested.");  		var question = CalibrationService.CanBeCompletedWithoutManualIntervention ? Resources.CALIBRATION_CONFIRMATION_MESSAGE : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;  		Keyboard = new YesNoQuestion (question' () => {  			inputService.RequestSuspend ();  			CalibrateRequest.Raise (new NotificationWithCalibrationResult ()' calibrationResult => {  				if (calibrationResult.Success) {  					audioService.PlaySound (Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);  					RaiseToastNotification (Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume ());  				} else {  					audioService.PlaySound (Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);  					RaiseToastNotification (Resources.CRASH_TITLE' calibrationResult.Exception != null ? calibrationResult.Exception.Message : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR' NotificationTypes.Error' () => inputService.RequestResume ());  				}  			});  			Keyboard = currentKeyboard;  		}' () => {  			Keyboard = currentKeyboard;  		});  	}  	break;  case FunctionKeys.CatalanSpain:  	Log.Info ("Changing keyboard language to CatalanSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.CollapseDock:  	Log.Info ("Collapsing dock.");  	mainWindowManipulationService.ResizeDockToCollapsed ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;  	}  	break;  case FunctionKeys.ConversationAlphaKeyboard:  	Log.Info ("Changing keyboard to ConversationAlpha.");  	var opacityBeforeConversationAlpha = mainWindowManipulationService.GetOpacity ();  	Action conversationAlphaBackAction = currentKeyboard is ConversationNumericAndSymbols ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationAlpha);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationAlpha);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationAlpha (conversationAlphaBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.ConversationNumericAndSymbolsKeyboard:  	Log.Info ("Changing keyboard to ConversationNumericAndSymbols.");  	var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity ();  	Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationAlpha ? ((ConversationAlpha)currentKeyboard).BackAction : () => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Log.InfoFormat ("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);  		mainWindowManipulationService.SetOpacity (opacityBeforeConversationNumericAndSymbols);  		Keyboard = currentKeyboard;  	};  	Keyboard = new ConversationNumericAndSymbols (conversationNumericAndSymbolsBackAction);  	Log.Info ("Maximising window.");  	mainWindowManipulationService.Maximise ();  	Log.InfoFormat ("Setting opacity to 1 (fully opaque)");  	mainWindowManipulationService.SetOpacity (1);  	break;  case FunctionKeys.CroatianCroatia:  	Log.Info ("Changing keyboard language to CroatianCroatia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Currencies1Keyboard:  	Log.Info ("Changing keyboard to Currencies1.");  	Keyboard = new Currencies1 ();  	break;  case FunctionKeys.Currencies2Keyboard:  	Log.Info ("Changing keyboard to Currencies2.");  	Keyboard = new Currencies2 ();  	break;  case FunctionKeys.CzechCzechRepublic:  	Log.Info ("Changing keyboard language to CzechCzechRepublic.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DanishDenmark:  	Log.Info ("Changing keyboard language to DanishDenmark.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DecreaseOpacity:  	Log.Info ("Decreasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (false);  	break;  case FunctionKeys.Diacritic1Keyboard:  	Log.Info ("Changing keyboard to Diacritic1.");  	Keyboard = new Diacritics1 ();  	break;  case FunctionKeys.Diacritic2Keyboard:  	Log.Info ("Changing keyboard to Diacritic2.");  	Keyboard = new Diacritics2 ();  	break;  case FunctionKeys.Diacritic3Keyboard:  	Log.Info ("Changing keyboard to Diacritic3.");  	Keyboard = new Diacritics3 ();  	break;  case FunctionKeys.DutchBelgium:  	Log.Info ("Changing keyboard language to DutchBelgium.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.DutchNetherlands:  	Log.Info ("Changing keyboard language to DutchNetherlands.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishCanada:  	Log.Info ("Changing keyboard language to EnglishCanada.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUK:  	Log.Info ("Changing keyboard language to EnglishUK.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.EnglishUS:  	Log.Info ("Changing keyboard language to EnglishUS.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ExpandDock:  	Log.Info ("Expanding dock.");  	mainWindowManipulationService.ResizeDockToFull ();  	if (Keyboard is ViewModels.Keyboards.Mouse) {  		Settings.Default.MouseKeyboardDockSize = DockSizes.Full;  	}  	break;  case FunctionKeys.ExpandToBottom:  	Log.InfoFormat ("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndLeft:  	Log.InfoFormat ("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToBottomAndRight:  	Log.InfoFormat ("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToLeft:  	Log.InfoFormat ("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToRight:  	Log.InfoFormat ("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTop:  	Log.InfoFormat ("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndLeft:  	Log.InfoFormat ("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ExpandToTopAndRight:  	Log.InfoFormat ("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Expand (ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.FrenchFrance:  	Log.Info ("Changing keyboard language to FrenchFrance.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GermanGermany:  	Log.Info ("Changing keyboard language to GermanGermany.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.GreekGreece:  	Log.Info ("Changing keyboard language to GreekGreece.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.IncreaseOpacity:  	Log.Info ("Increasing opacity.");  	mainWindowManipulationService.IncrementOrDecrementOpacity (true);  	break;  case FunctionKeys.ItalianItaly:  	Log.Info ("Changing keyboard language to ItalianItaly.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.LanguageKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Language.");  	Keyboard = new Language (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.MenuKeyboard:  	Log.Info ("Restoring window size.");  	mainWindowManipulationService.Restore ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Minimise:  	Log.Info ("Minimising window.");  	mainWindowManipulationService.Minimise ();  	Log.Info ("Changing keyboard to Minimised.");  	Keyboard = new Minimised (() => {  		Log.Info ("Restoring window size.");  		mainWindowManipulationService.Restore ();  		Keyboard = currentKeyboard;  	});  	break;  case FunctionKeys.MouseDrag:  	Log.Info ("Mouse drag selected.");  	SetupFinalClickAction (firstFinalPoint => {  		if (firstFinalPoint != null) {  			audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  			//This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.  			//This means that if the MagnifyPopup sets the nextPointSelectionAction from the  			//MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.  			//The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT  			//nextPointSelectionAction. This means the immediate call to the lambda just sets up the  			//delegate for the subsequent call.  			nextPointSelectionAction = repeatFirstClickOrSecondClickAction => {  				Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint => {  					Action<Point?> secondFinalClickAction = secondFinalPoint => {  						if (secondFinalPoint != null) {  							Action<Point' Point> simulateDrag = (fp1' fp2) => {  								Log.InfoFormat ("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);  								Action reinstateModifiers = () => {  								};  								if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  									reinstateModifiers = keyStateService.ReleaseModifiers (Log);  								}  								mouseOutputService.MoveTo (fp1);  								mouseOutputService.LeftButtonDown ();  								audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  								mouseOutputService.MoveTo (fp2);  								mouseOutputService.LeftButtonUp ();  								reinstateModifiers ();  							};  							lastMouseActionStateManager.LastMouseAction = () => simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  							simulateDrag (firstFinalPoint.Value' secondFinalPoint.Value);  						}  						ResetAndCleanupAfterMouseAction ();  					};  					if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  						ShowCursor = false;  						//See MouseMoveAndLeftClick case for explanation of this  						MagnifiedPointSelectionAction = secondFinalClickAction;  						MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;  						ShowCursor = true;  					} else {  						secondFinalClickAction (repeatFirstClickOrSecondClickPoint);  					}  					nextPointSelectionAction = null;  				};  				if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown ()) {  					nextPointSelectionAction = deferIfMagnifyingElseDoNow;  				} else {  					deferIfMagnifyingElseDoNow (repeatFirstClickOrSecondClickAction);  				}  			};  		} else {  			//Reset and clean up if we are not continuing to 2nd point  			SelectionMode = SelectionModes.Key;  			nextPointSelectionAction = null;  			ShowCursor = false;  			if (keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down) {  				keyStateService.KeyDownStates [KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up;  				//Release magnifier if down but not locked down  			}  		}  		//Reset and clean up  		MagnifyAtPoint = null;  		MagnifiedPointSelectionAction = null;  	}' finalClickInSeries: false);  	break;  case FunctionKeys.MouseKeyboard:  	Log.Info ("Changing keyboard to Mouse.");  	Action backAction;  	if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard) {  		var restoreModifierStates = keyStateService.ReleaseModifiers (Log);  		backAction = () => {  			restoreModifierStates ();  			Keyboard = currentKeyboard;  		};  	} else {  		backAction = () => Keyboard = currentKeyboard;  	}  	Keyboard = new Mouse (backAction);  	//Reinstate mouse keyboard docked state (if docked)  	if (Settings.Default.MainWindowState == WindowStates.Docked) {  		if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full && Settings.Default.MainWindowDockSize != DockSizes.Full) {  			mainWindowManipulationService.ResizeDockToFull ();  		} else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed && Settings.Default.MainWindowDockSize != DockSizes.Collapsed) {  			mainWindowManipulationService.ResizeDockToCollapsed ();  		}  	}  	break;  case FunctionKeys.MouseLeftClick:  	var leftClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);  	Action performLeftClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.LeftButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftClick ();  	performLeftClick ();  	break;  case FunctionKeys.MouseLeftDoubleClick:  	var leftDoubleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);  	Action performLeftDoubleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (leftDoubleClickPoint);  		audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  		mouseOutputService.LeftButtonDoubleClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick ();  	performLeftDoubleClick ();  	break;  case FunctionKeys.MouseLeftDownUp:  	var leftDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.LeftButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.LeftButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMiddleClick:  	var middleClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);  	Action performMiddleClick = () => {  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (middleClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.MiddleButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performMiddleClick ();  	performMiddleClick ();  	break;  case FunctionKeys.MouseMiddleDownUp:  	var middleDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.MiddleButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.MiddleButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MouseMoveAndLeftClick:  	Log.Info ("Mouse move and left click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndLeftClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndLeftDoubleClick:  	Log.Info ("Mouse move and left double click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);  				mouseOutputService.MoveAndLeftDoubleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndMiddleClick:  	Log.Info ("Mouse move and middle click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndMiddleClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAndRightClick:  	Log.Info ("Mouse move and right click selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateClick = fp => {  				Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  				mouseOutputService.MoveAndRightClick (fp' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateClick (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateClick (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveAmountInPixels:  	Log.Info ("Progressing MouseMoveAmountInPixels.");  	switch (Settings.Default.MouseMoveAmountInPixels) {  	case 1:  		Settings.Default.MouseMoveAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MouseMoveAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MouseMoveAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MouseMoveAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MouseMoveAmountInPixels = 100;  		break;  	default:  		Settings.Default.MouseMoveAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseMoveAndScrollToBottom:  	Log.Info ("Mouse move and scroll to bottom selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToBottom = fp => {  				Log.InfoFormat ("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelDown (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToBottom (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToLeft:  	Log.Info ("Mouse move and scroll to left selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToLeft = fp => {  				Log.InfoFormat ("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelLeft (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToLeft (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToRight:  	Log.Info ("Mouse move and scroll to right selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToRight = fp => {  				Log.InfoFormat ("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelRight (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToRight (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveAndScrollToTop:  	Log.Info ("Mouse move and scroll to top selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateScrollToTop = fp => {  				Log.InfoFormat ("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				audioService.PlaySound (Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);  				mouseOutputService.MoveAndScrollWheelUp (fp' Settings.Default.MouseScrollAmountInClicks' true);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop (finalPoint.Value);  			ShowCursor = false;  			//Hide cursor popup before performing action as it is possible for it to be performed on the popup  			simulateScrollToTop (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	}' suppressMagnification: true);  	break;  case FunctionKeys.MouseMoveTo:  	Log.Info ("Mouse move to selected.");  	SetupFinalClickAction (finalPoint => {  		if (finalPoint != null) {  			Action<Point> simulateMoveTo = fp => {  				Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);  				Action reinstateModifiers = () => {  				};  				if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  					reinstateModifiers = keyStateService.ReleaseModifiers (Log);  				}  				mouseOutputService.MoveTo (fp);  				reinstateModifiers ();  			};  			lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo (finalPoint.Value);  			simulateMoveTo (finalPoint.Value);  		}  		ResetAndCleanupAfterMouseAction ();  	});  	break;  case FunctionKeys.MouseMoveToBottom:  	Log.Info ("Mouse move to bottom selected.");  	Action simulateMoveToBottom = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;  	simulateMoveToBottom ();  	break;  case FunctionKeys.MouseMoveToLeft:  	Log.Info ("Mouse move to left selected.");  	Action simulateMoveToLeft = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;  	simulateMoveToLeft ();  	break;  case FunctionKeys.MouseMoveToRight:  	Log.Info ("Mouse move to right selected.");  	Action simulateMoveToRight = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;  	simulateMoveToRight ();  	break;  case FunctionKeys.MouseMoveToTop:  	Log.Info ("Mouse move to top selected.");  	Action simulateMoveToTop = () => {  		var cursorPosition = mouseOutputService.GetCursorPosition ();  		var moveToPoint = new Point (cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);  		Log.InfoFormat ("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (moveToPoint);  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;  	simulateMoveToTop ();  	break;  case FunctionKeys.MouseRightClick:  	var rightClickPoint = mouseOutputService.GetCursorPosition ();  	Log.InfoFormat ("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  	Action performRightClick = () => {  		Log.InfoFormat ("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		mouseOutputService.MoveTo (rightClickPoint);  		audioService.PlaySound (Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);  		mouseOutputService.RightButtonClick ();  		reinstateModifiers ();  	};  	lastMouseActionStateManager.LastMouseAction = () => performRightClick ();  	performRightClick ();  	break;  case FunctionKeys.MouseRightDownUp:  	var rightDownUpPoint = mouseOutputService.GetCursorPosition ();  	if (keyStateService.KeyDownStates [KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown ()) {  		Log.InfoFormat ("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);  		mouseOutputService.RightButtonDown ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	} else {  		Log.InfoFormat ("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);  		Action reinstateModifiers = () => {  		};  		if (keyStateService.SimulateKeyStrokes && Settings.Default.SuppressModifierKeysForAllMouseActions) {  			reinstateModifiers = keyStateService.ReleaseModifiers (Log);  		}  		audioService.PlaySound (Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);  		mouseOutputService.RightButtonUp ();  		reinstateModifiers ();  		lastMouseActionStateManager.LastMouseAction = null;  	}  	break;  case FunctionKeys.MoveAndResizeAdjustmentAmount:  	Log.Info ("Progressing MoveAndResizeAdjustmentAmount.");  	switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  	case 1:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  		break;  	case 5:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  		break;  	case 10:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  		break;  	case 25:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  		break;  	case 50:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  		break;  	default:  		Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  		break;  	}  	break;  case FunctionKeys.MouseScrollAmountInClicks:  	Log.Info ("Progressing MouseScrollAmountInClicks.");  	switch (Settings.Default.MouseScrollAmountInClicks) {  	case 1:  		Settings.Default.MouseScrollAmountInClicks = 3;  		break;  	case 3:  		Settings.Default.MouseScrollAmountInClicks = 5;  		break;  	case 5:  		Settings.Default.MouseScrollAmountInClicks = 10;  		break;  	case 10:  		Settings.Default.MouseScrollAmountInClicks = 25;  		break;  	default:  		Settings.Default.MouseScrollAmountInClicks = 1;  		break;  	}  	break;  case FunctionKeys.MoveToBottom:  	Log.InfoFormat ("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeft:  	Log.InfoFormat ("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndLeftBoundaries:  	Log.Info ("Moving to bottom and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomLeft' null);  	break;  case FunctionKeys.MoveToBottomAndRight:  	Log.InfoFormat ("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToBottomAndRightBoundaries:  	Log.Info ("Moving to bottom and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.BottomRight' null);  	break;  case FunctionKeys.MoveToBottomBoundary:  	Log.Info ("Moving to bottom boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Bottom' null);  	break;  case FunctionKeys.MoveToLeft:  	Log.InfoFormat ("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToLeftBoundary:  	Log.Info ("Moving to left boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Left' null);  	break;  case FunctionKeys.MoveToRight:  	Log.InfoFormat ("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToRightBoundary:  	Log.Info ("Moving to right boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Right' null);  	break;  case FunctionKeys.MoveToTop:  	Log.InfoFormat ("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeft:  	Log.InfoFormat ("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndLeftBoundaries:  	Log.Info ("Moving to top and left boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopLeft' null);  	break;  case FunctionKeys.MoveToTopAndRight:  	Log.InfoFormat ("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Move (MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.MoveToTopAndRightBoundaries:  	Log.Info ("Moving to top and right boundaries.");  	mainWindowManipulationService.Move (MoveToDirections.TopRight' null);  	break;  case FunctionKeys.MoveToTopBoundary:  	Log.Info ("Moving to top boundary.");  	mainWindowManipulationService.Move (MoveToDirections.Top' null);  	break;  case FunctionKeys.NextSuggestions:  	Log.Info ("Incrementing suggestions page.");  	if (suggestionService.Suggestions != null && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) {  		suggestionService.SuggestionsPage++;  	}  	break;  case FunctionKeys.NoQuestionResult:  	HandleYesNoQuestionResult (false);  	break;  case FunctionKeys.NumericAndSymbols1Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols1.");  	Keyboard = new NumericAndSymbols1 ();  	break;  case FunctionKeys.NumericAndSymbols2Keyboard:  	Log.Info ("Changing keyboard to NumericAndSymbols2.");  	Keyboard = new NumericAndSymbols2 ();  	break;  case FunctionKeys.NumericAndSymbols3Keyboard:  	Log.Info ("Changing keyboard to Symbols3.");  	Keyboard = new NumericAndSymbols3 ();  	break;  case FunctionKeys.PhysicalKeysKeyboard:  	Log.Info ("Changing keyboard to PhysicalKeys.");  	Keyboard = new PhysicalKeys ();  	break;  case FunctionKeys.PortuguesePortugal:  	Log.Info ("Changing keyboard language to PortuguesePortugal.");  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;  	Log.Info ("Changing keyboard to Menu");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.PreviousSuggestions:  	Log.Info ("Decrementing suggestions page.");  	if (suggestionService.SuggestionsPage > 0) {  		suggestionService.SuggestionsPage--;  	}  	break;  case FunctionKeys.Quit:  	Log.Info ("Quit key selected.");  	var keyboardBeforeQuit = Keyboard;  	Keyboard = new YesNoQuestion (Resources.QUIT_MESSAGE' () => {  		Keyboard = new YesNoQuestion (Resources.QUIT_CONFIRMATION_MESSAGE' () => Application.Current.Shutdown ()' () => {  			Keyboard = keyboardBeforeQuit;  		});  	}' () => {  		Keyboard = keyboardBeforeQuit;  	});  	break;  case FunctionKeys.RepeatLastMouseAction:  	if (lastMouseActionStateManager.LastMouseAction != null) {  		lastMouseActionStateManager.LastMouseAction ();  	}  	break;  case FunctionKeys.RussianRussia:  	Log.Info ("Changing keyboard language to RussianRussia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.ShrinkFromBottom:  	Log.InfoFormat ("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndLeft:  	Log.InfoFormat ("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromBottomAndRight:  	Log.InfoFormat ("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromLeft:  	Log.InfoFormat ("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromRight:  	Log.InfoFormat ("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTop:  	Log.InfoFormat ("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndLeft:  	Log.InfoFormat ("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.ShrinkFromTopAndRight:  	Log.InfoFormat ("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	mainWindowManipulationService.Shrink (ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);  	break;  case FunctionKeys.SizeAndPositionKeyboard:  	Log.Info ("Changing keyboard to Size & Position.");  	Keyboard = new SizeAndPosition (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovakSlovakia:  	Log.Info ("Changing keyboard language to SlovakSlovakia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SlovenianSlovenia:  	Log.Info ("Changing keyboard language to SlovenianSlovenia.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.SpanishSpain:  	Log.Info ("Changing keyboard language to SpanishSpain.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.Speak:  	var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech (keyboardOutputService.Text' () => {  		KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = KeyDownStates.Up;  	}' Settings.Default.SpeechVolume' Settings.Default.SpeechRate' Settings.Default.SpeechVoice);  	KeyStateService.KeyDownStates [KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;  	break;  case FunctionKeys.TurkishTurkey:  	Log.Info ("Changing keyboard language to TurkishTurkey.");  	InputService.RequestSuspend ();  	//Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete  	Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;  	InputService.RequestResume ();  	Log.Info ("Changing keyboard to Menu.");  	Keyboard = new Menu (() => Keyboard = currentKeyboard);  	break;  case FunctionKeys.YesQuestionResult:  	HandleYesNoQuestionResult (true);  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseMoveAmountInPixels) {  case 1:  	Settings.Default.MouseMoveAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MouseMoveAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MouseMoveAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MouseMoveAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MouseMoveAmountInPixels = 100;  	break;  default:  	Settings.Default.MouseMoveAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseMoveAmountInPixels = 5;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseMoveAmountInPixels = 10;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseMoveAmountInPixels = 25;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseMoveAmountInPixels = 50;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseMoveAmountInPixels = 100;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels) {  case 1:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  	break;  case 5:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  	break;  case 10:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  	break;  case 25:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  	break;  case 50:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  	break;  default:  	Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (Settings.Default.MouseScrollAmountInClicks) {  case 1:  	Settings.Default.MouseScrollAmountInClicks = 3;  	break;  case 3:  	Settings.Default.MouseScrollAmountInClicks = 5;  	break;  case 5:  	Settings.Default.MouseScrollAmountInClicks = 10;  	break;  case 10:  	Settings.Default.MouseScrollAmountInClicks = 25;  	break;  default:  	Settings.Default.MouseScrollAmountInClicks = 1;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseScrollAmountInClicks = 3;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseScrollAmountInClicks = 5;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseScrollAmountInClicks = 10;  
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: Settings.Default.MouseScrollAmountInClicks = 25;  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0) {  	var m = l + l - v;  	var sv = (v - m) / v;  	h *= 6.0;  	var sextant = (int)h;  	var fract = h - sextant;  	var vsf = v * sv * fract;  	var mid1 = m + vsf;  	var mid2 = v - vsf;  	switch (sextant) {  	case 0:  		r = v;  		g = mid1;  		b = m;  		break;  	case 1:  		r = mid2;  		g = v;  		b = m;  		break;  	case 2:  		r = m;  		g = v;  		b = mid1;  		break;  	case 3:  		r = m;  		g = mid2;  		b = v;  		break;  	case 4:  		r = mid1;  		g = m;  		b = v;  		break;  	case 5:  		r = v;  		g = m;  		b = mid2;  		break;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0) {  	var m = l + l - v;  	var sv = (v - m) / v;  	h *= 6.0;  	var sextant = (int)h;  	var fract = h - sextant;  	var vsf = v * sv * fract;  	var mid1 = m + vsf;  	var mid2 = v - vsf;  	switch (sextant) {  	case 0:  		r = v;  		g = mid1;  		b = m;  		break;  	case 1:  		r = mid2;  		g = v;  		b = m;  		break;  	case 2:  		r = m;  		g = v;  		b = mid1;  		break;  	case 3:  		r = m;  		g = mid2;  		b = v;  		break;  	case 4:  		r = mid1;  		g = m;  		b = v;  		break;  	case 5:  		r = v;  		g = m;  		b = mid2;  		break;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0) {  	var m = l + l - v;  	var sv = (v - m) / v;  	h *= 6.0;  	var sextant = (int)h;  	var fract = h - sextant;  	var vsf = v * sv * fract;  	var mid1 = m + vsf;  	var mid2 = v - vsf;  	switch (sextant) {  	case 0:  		r = v;  		g = mid1;  		b = m;  		break;  	case 1:  		r = mid2;  		g = v;  		b = m;  		break;  	case 2:  		r = m;  		g = v;  		b = mid1;  		break;  	case 3:  		r = m;  		g = mid2;  		b = v;  		break;  	case 4:  		r = mid1;  		g = m;  		b = v;  		break;  	case 5:  		r = v;  		g = m;  		b = mid2;  		break;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0) {  	var m = l + l - v;  	var sv = (v - m) / v;  	h *= 6.0;  	var sextant = (int)h;  	var fract = h - sextant;  	var vsf = v * sv * fract;  	var mid1 = m + vsf;  	var mid2 = v - vsf;  	switch (sextant) {  	case 0:  		r = v;  		g = mid1;  		b = m;  		break;  	case 1:  		r = mid2;  		g = v;  		b = m;  		break;  	case 2:  		r = m;  		g = v;  		b = mid1;  		break;  	case 3:  		r = m;  		g = mid2;  		b = v;  		break;  	case 4:  		r = mid1;  		g = m;  		b = v;  		break;  	case 5:  		r = v;  		g = m;  		b = mid2;  		break;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0) {  	var m = l + l - v;  	var sv = (v - m) / v;  	h *= 6.0;  	var sextant = (int)h;  	var fract = h - sextant;  	var vsf = v * sv * fract;  	var mid1 = m + vsf;  	var mid2 = v - vsf;  	switch (sextant) {  	case 0:  		r = v;  		g = mid1;  		b = m;  		break;  	case 1:  		r = mid2;  		g = v;  		b = m;  		break;  	case 2:  		r = m;  		g = v;  		b = mid1;  		break;  	case 3:  		r = m;  		g = mid2;  		b = v;  		break;  	case 4:  		r = mid1;  		g = m;  		b = v;  		break;  	case 5:  		r = v;  		g = m;  		b = mid2;  		break;  	}  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: h *= 6.0;  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant) {  case 0:  	r = v;  	g = mid1;  	b = m;  	break;  case 1:  	r = mid2;  	g = v;  	b = m;  	break;  case 2:  	r = m;  	g = v;  	b = mid1;  	break;  case 3:  	r = m;  	g = mid2;  	b = v;  	break;  case 4:  	r = mid1;  	g = m;  	b = v;  	break;  case 5:  	r = v;  	g = m;  	b = mid2;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant) {  case 0:  	r = v;  	g = mid1;  	b = m;  	break;  case 1:  	r = mid2;  	g = v;  	b = m;  	break;  case 2:  	r = m;  	g = v;  	b = mid1;  	break;  case 3:  	r = m;  	g = mid2;  	b = v;  	break;  case 4:  	r = mid1;  	g = m;  	b = v;  	break;  case 5:  	r = v;  	g = m;  	b = mid2;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant) {  case 0:  	r = v;  	g = mid1;  	b = m;  	break;  case 1:  	r = mid2;  	g = v;  	b = m;  	break;  case 2:  	r = m;  	g = v;  	b = mid1;  	break;  case 3:  	r = m;  	g = mid2;  	b = v;  	break;  case 4:  	r = mid1;  	g = m;  	b = v;  	break;  case 5:  	r = v;  	g = m;  	b = mid2;  	break;  }  
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: switch (sextant) {  case 0:  	r = v;  	g = mid1;  	b = m;  	break;  case 1:  	r = mid2;  	g = v;  	b = m;  	break;  case 2:  	r = m;  	g = v;  	b = mid1;  	break;  case 3:  	r = m;  	g = mid2;  	b = v;  	break;  case 4:  	r = mid1;  	g = m;  	b = v;  	break;  case 5:  	r = v;  	g = m;  	b = mid2;  	break;  }  
Missing Default,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateCalibrationService,The following switch statement is missing a default case: switch (Settings.Default.PointsSource) {  case PointsSources.TheEyeTribe:  	return new TheEyeTribeCalibrationService ();  case PointsSources.Alienware17:  case PointsSources.SteelseriesSentry:  case PointsSources.TobiiEyeX:  case PointsSources.TobiiEyeTracker4C:  case PointsSources.TobiiRex:  case PointsSources.TobiiPcEyeGo:  case PointsSources.TobiiPcEyeMini:  case PointsSources.TobiiX2_30:  case PointsSources.TobiiX2_60:  	return new TobiiEyeXCalibrationService ();  case PointsSources.VisualInteractionMyGaze:  	return new MyGazeCalibrationService ();  }  
Missing Default,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The following switch statement is missing a default case: switch (Settings.Default.KeySelectionTriggerSource) {  case TriggerSources.Fixations:  	keySelectionSb.Append (string.Format (OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds));  	break;  case TriggerSources.KeyboardKeyDownsUps:  	keySelectionSb.Append (string.Format (" ({0})"' Settings.Default.KeySelectionTriggerKeyboardKeyDownUpKey));  	break;  case TriggerSources.MouseButtonDownUps:  	keySelectionSb.Append (string.Format (" ({0})"' Settings.Default.KeySelectionTriggerMouseDownUpButton));  	break;  }  
Missing Default,JuliusSweetland.OptiKey,App,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The following switch statement is missing a default case: switch (Settings.Default.PointSelectionTriggerSource) {  case TriggerSources.Fixations:  	pointSelectionSb.Append (string.Format (OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds));  	break;  case TriggerSources.KeyboardKeyDownsUps:  	pointSelectionSb.Append (string.Format (" ({0})"' Settings.Default.PointSelectionTriggerKeyboardKeyDownUpKey));  	break;  case TriggerSources.MouseButtonDownUps:  	pointSelectionSb.Append (string.Format (" ({0})"' Settings.Default.PointSelectionTriggerMouseDownUpButton));  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToDescription,The following switch statement is missing a default case: switch (pointSource) {  case DataStreamProcessingLevels.High:  	return Resources.HIGH;  case DataStreamProcessingLevels.Medium:  	return Resources.MEDIUM;  case DataStreamProcessingLevels.Low:  	return Resources.LOW;  case DataStreamProcessingLevels.None:  	return Resources.NONE;  }  
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToDescription,The following switch statement is missing a default case: switch (languages) {  case Languages.CatalanSpain:  	return Resources.CATALAN_SPAIN;  case Languages.CroatianCroatia:  	return Resources.CROATIAN_CROATIA;  case Languages.CzechCzechRepublic:  	return Resources.CZECH_CZECH_REPUBLIC;  case Languages.DanishDenmark:  	return Resources.DANISH_DENMARK;  case Languages.DutchBelgium:  	return Resources.DUTCH_BELGIUM;  case Languages.DutchNetherlands:  	return Resources.DUTCH_NETHERLANDS;  case Languages.EnglishCanada:  	return Resources.ENGLISH_CANADA;  case Languages.EnglishUK:  	return Resources.ENGLISH_UK;  case Languages.EnglishUS:  	return Resources.ENGLISH_US;  case Languages.FrenchFrance:  	return Resources.FRENCH_FRANCE;  case Languages.GermanGermany:  	return Resources.GERMAN_GERMANY;  case Languages.GreekGreece:  	return Resources.GREEK_GREECE;  case Languages.ItalianItaly:  	return Resources.ITALIAN_ITALY;  case Languages.PortuguesePortugal:  	return Resources.PORTUGUESE_PORTUGAL;  case Languages.RussianRussia:  	return Resources.RUSSIAN_RUSSIA;  case Languages.SlovakSlovakia:  	return Resources.SLOVAK_SLOVAKIA;  case Languages.SlovenianSlovenia:  	return Resources.SLOVENIAN_SLOVENIA;  case Languages.SpanishSpain:  	return Resources.SPANISH_SPAIN;  case Languages.TurkishTurkey:  	return Resources.TURKISH_TURKEY;  }  
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToCultureInfo,The following switch statement is missing a default case: switch (languages) {  case Languages.CatalanSpain:  	return CultureInfo.GetCultureInfo ("ca-ES");  case Languages.CroatianCroatia:  	return CultureInfo.GetCultureInfo ("hr-HR");  case Languages.CzechCzechRepublic:  	return CultureInfo.GetCultureInfo ("cs-CZ");  case Languages.DanishDenmark:  	return CultureInfo.GetCultureInfo ("da-DK");  case Languages.DutchBelgium:  	return CultureInfo.GetCultureInfo ("nl-BE");  case Languages.DutchNetherlands:  	return CultureInfo.GetCultureInfo ("nl-NL");  case Languages.EnglishUS:  	return CultureInfo.GetCultureInfo ("en-US");  case Languages.EnglishUK:  	return CultureInfo.GetCultureInfo ("en-GB");  case Languages.EnglishCanada:  	return CultureInfo.GetCultureInfo ("en-CA");  case Languages.FrenchFrance:  	return CultureInfo.GetCultureInfo ("fr-FR");  case Languages.GermanGermany:  	return CultureInfo.GetCultureInfo ("de-DE");  case Languages.GreekGreece:  	return CultureInfo.GetCultureInfo ("el-GR");  case Languages.ItalianItaly:  	return CultureInfo.GetCultureInfo ("it-IT");  case Languages.PortuguesePortugal:  	return CultureInfo.GetCultureInfo ("pt-PT");  case Languages.RussianRussia:  	return CultureInfo.GetCultureInfo ("ru-RU");  case Languages.SlovakSlovakia:  	return CultureInfo.GetCultureInfo ("sk-SK");  case Languages.SlovenianSlovenia:  	return CultureInfo.GetCultureInfo ("sl-SI");  case Languages.SpanishSpain:  	return CultureInfo.GetCultureInfo ("es-ES");  case Languages.TurkishTurkey:  	return CultureInfo.GetCultureInfo ("tr-TR");  }  
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToDescription,The following switch statement is missing a default case: switch (pointSource) {  case PointsSources.Alienware17:  	return Resources.ALIENWARE_17;  case PointsSources.GazeTracker:  	return Resources.GAZE_TRACKER;  case PointsSources.MousePosition:  	return Resources.MOUSE_POSITION;  case PointsSources.SteelseriesSentry:  	return Resources.STEELSERIES_SENTRY;  case PointsSources.TheEyeTribe:  	return Resources.THE_EYE_TRIBE;  case PointsSources.TobiiEyeTracker4C:  	return Resources.TOBII_EYE_TRACKER_4C;  case PointsSources.TobiiEyeX:  	return Resources.TOBII_EYEX;  case PointsSources.TobiiRex:  	return Resources.TOBII_REX;  case PointsSources.TobiiPcEyeGo:  	return Resources.TOBII_PCEYE_GO;  case PointsSources.TobiiPcEyeMini:  	return Resources.TOBII_PCEYE_MINI;  case PointsSources.TobiiX2_30:  	return Resources.TOBII_X2_30;  case PointsSources.TobiiX2_60:  	return Resources.TOBII_X2_60;  case PointsSources.VisualInteractionMyGaze:  	return Resources.VI_MYGAZE;  }  
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\DataStreamProcessingLevels.cs,ToDescription,The following switch statement is missing a default case: switch (triggerSources) {  case TriggerSources.Fixations:  	return Resources.FIXATIONS_DWELL;  case TriggerSources.KeyboardKeyDownsUps:  	return Resources.KEYBOARD_KEY;  case TriggerSources.MouseButtonDownUps:  	return Resources.MOUSE_BUTTON;  }  
Missing Default,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateSelectionProgressSubscription,The following switch statement is missing a default case: switch (mode) {  case SelectionModes.Key:  	selectionTriggerSource = keySelectionTriggerSource;  	break;  case SelectionModes.Point:  	selectionTriggerSource = pointSelectionTriggerSource;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,InputService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateSelectionSubscriptions,The following switch statement is missing a default case: switch (mode) {  case SelectionModes.Key:  	selectionTriggerSource = keySelectionTriggerSource;  	break;  case SelectionModes.Point:  	selectionTriggerSource = pointSelectionTriggerSource;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (windowState) {  case WindowStates.Floating:  	switch (direction) //Handle vertical adjustment  	{  	case ExpandToDirections.Bottom:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.BottomRight:  		window.Height += yAdjustmentToBottom;  		break;  	case ExpandToDirections.Top:  	case ExpandToDirections.TopLeft:  	case ExpandToDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		window.Height += yAdjustmentToTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	switch (direction) //Handle horizontal adjustment  	{  	case ExpandToDirections.Left:  	case ExpandToDirections.BottomLeft:  	case ExpandToDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		window.Width += xAdjustmentToLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ExpandToDirections.Right:  	case ExpandToDirections.BottomRight:  	case ExpandToDirections.TopRight:  		window.Width += xAdjustmentToRight;  		break;  	}  	//Recalculate distance to boundaries and check if we are now aligned with 3 edges  	distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);  	distanceToTopBoundary = window.Top - screenBoundsInDp.Top;  	distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;  	distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);  	DockEdges? dockToEdge = null;  	if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Top;  	} else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0) {  		dockToEdge = DockEdges.Bottom;  	} else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Left;  	} else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0) {  		dockToEdge = DockEdges.Right;  	}  	if (dockToEdge != null) {  		//We are aligned with 3 edges and currently floating' so switch to docked mode  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (dockToEdge.Value);  		RegisterAppBar ();  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	} else {  		PersistSizeAndPosition ();  	}  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	if (dockPosition == DockEdges.Top && (direction == ExpandToDirections.Bottom || direction == ExpandToDirections.BottomLeft || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ExpandToDirections.Top || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ExpandToDirections.Right || direction == ExpandToDirections.TopRight || direction == ExpandToDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ExpandToDirections.Left || direction == ExpandToDirections.TopLeft || direction == ExpandToDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);  		} else {  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment  {  case ExpandToDirections.Bottom:  case ExpandToDirections.BottomLeft:  case ExpandToDirections.BottomRight:  	window.Height += yAdjustmentToBottom;  	break;  case ExpandToDirections.Top:  case ExpandToDirections.TopLeft:  case ExpandToDirections.TopRight:  	var heightBeforeAdjustment = window.ActualHeight;  	window.Height += yAdjustmentToTop;  	var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  	//WPF may have coerced the adjustment  	window.Top -= actualYAdjustmentToTop;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment  {  case ExpandToDirections.Left:  case ExpandToDirections.BottomLeft:  case ExpandToDirections.TopLeft:  	var widthBeforeAdjustment = window.ActualWidth;  	window.Width += xAdjustmentToLeft;  	var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  	//WPF may have coerced the adjustment  	window.Left -= actualXAdjustmentToLeft;  	break;  case ExpandToDirections.Right:  case ExpandToDirections.BottomRight:  case ExpandToDirections.TopRight:  	window.Width += xAdjustmentToRight;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (getWindowState ()) {  case WindowStates.Floating:  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  	SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (windowState) {  case WindowStates.Floating:  	var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	switch (direction) //Handle vertical adjustment  	{  	case ShrinkFromDirections.Bottom:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.BottomRight:  		yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromBottom;  		break;  	case ShrinkFromDirections.Top:  	case ShrinkFromDirections.TopLeft:  	case ShrinkFromDirections.TopRight:  		var heightBeforeAdjustment = window.ActualHeight;  		yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  		window.Height += yAdjustmentFromTop;  		var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Top -= actualYAdjustmentToTop;  		break;  	}  	var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	switch (direction) //Handle horizontal adjustment  	{  	case ShrinkFromDirections.Left:  	case ShrinkFromDirections.BottomLeft:  	case ShrinkFromDirections.TopLeft:  		var widthBeforeAdjustment = window.ActualWidth;  		xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromLeft;  		var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  		//WPF may have coerced the adjustment  		window.Left -= actualXAdjustmentToLeft;  		break;  	case ShrinkFromDirections.Right:  	case ShrinkFromDirections.BottomRight:  	case ShrinkFromDirections.TopRight:  		xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  		window.Width += xAdjustmentFromRight;  		break;  	}  	PersistSizeAndPosition ();  	break;  case WindowStates.Docked:  	var dockPosition = getDockPosition ();  	var dockSize = getDockSize ();  	var adjustment = false;  	var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);  	var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);  	var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Height));  	var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness () / 100) * screenBoundsInDp.Width));  	if (dockPosition == DockEdges.Top && (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Bottom && (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) {  		if (dockSize == DockSizes.Full) {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFullDockHeightAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);  		} else {  			yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxCollapsedDockHeightAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Left && (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	} else if (dockPosition == DockEdges.Right && (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) {  		if (dockSize == DockSizes.Full) {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFullDockWidthAdjustment);  			saveFullDockThicknessAsPercentageOfScreen (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);  		} else {  			xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxCollapsedDockWidthAdjustment);  			saveCollapsedDockThicknessAsPercentageOfFullDockThickness (((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen ());  		}  		adjustment = true;  	}  	if (adjustment) {  		var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (getDockPosition ()' getDockSize ());  		SetAppBarSizeAndPosition (getDockPosition ()' dockSizeAndPositionInPx);  	}  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment  {  case ShrinkFromDirections.Bottom:  case ShrinkFromDirections.BottomLeft:  case ShrinkFromDirections.BottomRight:  	yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  	window.Height += yAdjustmentFromBottom;  	break;  case ShrinkFromDirections.Top:  case ShrinkFromDirections.TopLeft:  case ShrinkFromDirections.TopRight:  	var heightBeforeAdjustment = window.ActualHeight;  	yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit (0 - maxFloatingHeightAdjustment);  	window.Height += yAdjustmentFromTop;  	var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment;  	//WPF may have coerced the adjustment  	window.Top -= actualYAdjustmentToTop;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment  {  case ShrinkFromDirections.Left:  case ShrinkFromDirections.BottomLeft:  case ShrinkFromDirections.TopLeft:  	var widthBeforeAdjustment = window.ActualWidth;  	xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  	window.Width += xAdjustmentFromLeft;  	var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment;  	//WPF may have coerced the adjustment  	window.Left -= actualXAdjustmentToLeft;  	break;  case ShrinkFromDirections.Right:  case ShrinkFromDirections.BottomRight:  case ShrinkFromDirections.TopRight:  	xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit (0 - maxFloatingWidthAdjustment);  	window.Width += xAdjustmentFromRight;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplySavedState,The following switch statement is missing a default case: switch (windowState) {  case WindowStates.Docked:  	window.WindowState = System.Windows.WindowState.Normal;  	var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx (dockPosition' getDockSize ());  	RegisterAppBar ();  	SetAppBarSizeAndPosition (dockPosition' dockSizeAndPositionInPx' isInitialising);  	break;  case WindowStates.Floating:  	window.WindowState = System.Windows.WindowState.Normal;  	window.Dispatcher.BeginInvoke (DispatcherPriority.ApplicationIdle' new ApplySizeAndPositionDelegate (ApplyAndPersistSizeAndPosition)' getFloatingSizeAndPosition ());  	break;  case WindowStates.Maximised:  	window.WindowState = System.Windows.WindowState.Maximized;  	PublishSizeAndPositionInitialised ();  	break;  case WindowStates.Minimised:  	window.WindowState = System.Windows.WindowState.Normal;  	var minimisedSizeAndPosition = CalculateMinimisedSizeAndPosition ();  	window.Dispatcher.BeginInvoke (DispatcherPriority.ApplicationIdle' new ApplySizeAndPositionDelegate (ApplyAndPersistSizeAndPosition)' minimisedSizeAndPosition);  	break;  case WindowStates.Hidden:  	window.WindowState = System.Windows.WindowState.Minimized;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (windowState) {  case WindowStates.Docked:  	switch (getDockPosition ()) {  	case DockEdges.Top:  		switch (direction) {  		case MoveToDirections.Bottom:  		case MoveToDirections.BottomLeft:  		case MoveToDirections.BottomRight:  			UnRegisterAppBar ();  			saveWindowState (WindowStates.Floating);  			savePreviousWindowState (WindowStates.Floating);  			window.Top = screenBoundsInDp.Top;  			switch (direction) {  			case MoveToDirections.Bottom:  				window.Left = floatingSizeAndPosition.Left;  				break;  			case MoveToDirections.BottomLeft:  				window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  				break;  			case MoveToDirections.BottomRight:  				window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  				break;  			}  			window.Height = floatingSizeAndPosition.Height;  			window.Width = floatingSizeAndPosition.Width;  			adjustment = true;  			break;  		}  		break;  	case DockEdges.Bottom:  		switch (direction) {  		case MoveToDirections.Top:  		case MoveToDirections.TopLeft:  		case MoveToDirections.TopRight:  			UnRegisterAppBar ();  			saveWindowState (WindowStates.Floating);  			savePreviousWindowState (WindowStates.Floating);  			window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;  			switch (direction) {  			case MoveToDirections.Top:  				window.Left = floatingSizeAndPosition.Left;  				break;  			case MoveToDirections.TopLeft:  				window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  				break;  			case MoveToDirections.TopRight:  				window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  				break;  			}  			window.Height = floatingSizeAndPosition.Height;  			window.Width = floatingSizeAndPosition.Width;  			adjustment = true;  			break;  		}  		break;  	case DockEdges.Left:  		switch (direction) {  		case MoveToDirections.Right:  		case MoveToDirections.TopRight:  		case MoveToDirections.BottomRight:  			UnRegisterAppBar ();  			saveWindowState (WindowStates.Floating);  			savePreviousWindowState (WindowStates.Floating);  			window.Left = screenBoundsInDp.Left;  			switch (direction) {  			case MoveToDirections.Right:  				window.Top = floatingSizeAndPosition.Top;  				break;  			case MoveToDirections.TopRight:  				window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  				break;  			case MoveToDirections.BottomRight:  				window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  				break;  			}  			window.Height = floatingSizeAndPosition.Height;  			window.Width = floatingSizeAndPosition.Width;  			adjustment = true;  			break;  		}  		break;  	case DockEdges.Right:  		switch (direction) {  		case MoveToDirections.Left:  		case MoveToDirections.TopLeft:  		case MoveToDirections.BottomLeft:  			UnRegisterAppBar ();  			saveWindowState (WindowStates.Floating);  			savePreviousWindowState (WindowStates.Floating);  			window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;  			switch (direction) {  			case MoveToDirections.Left:  				window.Top = floatingSizeAndPosition.Top;  				break;  			case MoveToDirections.TopLeft:  				window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  				break;  			case MoveToDirections.BottomLeft:  				window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  				break;  			}  			window.Height = floatingSizeAndPosition.Height;  			window.Width = floatingSizeAndPosition.Width;  			adjustment = true;  			break;  		}  		break;  	}  	break;  case WindowStates.Floating:  	switch (direction) //Handle horizontal adjustment  	{  	case MoveToDirections.Left:  		if (xAdjustmentAmount > xAdjustmentToLeft) {  			saveWindowState (WindowStates.Docked);  			savePreviousWindowState (WindowStates.Docked);  			saveDockPosition (DockEdges.Left);  			RegisterAppBar ();  		} else {  			window.Left -= xAdjustmentToLeft;  		}  		break;  	case MoveToDirections.BottomLeft:  	case MoveToDirections.TopLeft:  		window.Left -= xAdjustmentToLeft;  		break;  	case MoveToDirections.Right:  		if (xAdjustmentAmount > xAdjustmentToRight) {  			saveWindowState (WindowStates.Docked);  			savePreviousWindowState (WindowStates.Docked);  			saveDockPosition (DockEdges.Right);  			RegisterAppBar ();  		} else {  			window.Left += xAdjustmentToRight;  		}  		break;  	case MoveToDirections.BottomRight:  	case MoveToDirections.TopRight:  		window.Left += xAdjustmentToRight;  		break;  	}  	switch (direction) //Handle vertical adjustment  	{  	case MoveToDirections.Bottom:  		if (yAdjustmentAmount > yAdjustmentToBottom) {  			saveWindowState (WindowStates.Docked);  			savePreviousWindowState (WindowStates.Docked);  			saveDockPosition (DockEdges.Bottom);  			RegisterAppBar ();  		} else {  			window.Top += yAdjustmentToBottom;  		}  		break;  	case MoveToDirections.BottomLeft:  	case MoveToDirections.BottomRight:  		window.Top += yAdjustmentToBottom;  		break;  	case MoveToDirections.Top:  		if (yAdjustmentAmount > yAdjustmentToTop) {  			saveWindowState (WindowStates.Docked);  			savePreviousWindowState (WindowStates.Docked);  			saveDockPosition (DockEdges.Top);  			RegisterAppBar ();  		} else {  			window.Top -= yAdjustmentToTop;  		}  		break;  	case MoveToDirections.TopLeft:  	case MoveToDirections.TopRight:  		window.Top -= yAdjustmentToTop;  		break;  	}  	adjustment = true;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (getDockPosition ()) {  case DockEdges.Top:  	switch (direction) {  	case MoveToDirections.Bottom:  	case MoveToDirections.BottomLeft:  	case MoveToDirections.BottomRight:  		UnRegisterAppBar ();  		saveWindowState (WindowStates.Floating);  		savePreviousWindowState (WindowStates.Floating);  		window.Top = screenBoundsInDp.Top;  		switch (direction) {  		case MoveToDirections.Bottom:  			window.Left = floatingSizeAndPosition.Left;  			break;  		case MoveToDirections.BottomLeft:  			window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  			break;  		case MoveToDirections.BottomRight:  			window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  			break;  		}  		window.Height = floatingSizeAndPosition.Height;  		window.Width = floatingSizeAndPosition.Width;  		adjustment = true;  		break;  	}  	break;  case DockEdges.Bottom:  	switch (direction) {  	case MoveToDirections.Top:  	case MoveToDirections.TopLeft:  	case MoveToDirections.TopRight:  		UnRegisterAppBar ();  		saveWindowState (WindowStates.Floating);  		savePreviousWindowState (WindowStates.Floating);  		window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;  		switch (direction) {  		case MoveToDirections.Top:  			window.Left = floatingSizeAndPosition.Left;  			break;  		case MoveToDirections.TopLeft:  			window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  			break;  		case MoveToDirections.TopRight:  			window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  			break;  		}  		window.Height = floatingSizeAndPosition.Height;  		window.Width = floatingSizeAndPosition.Width;  		adjustment = true;  		break;  	}  	break;  case DockEdges.Left:  	switch (direction) {  	case MoveToDirections.Right:  	case MoveToDirections.TopRight:  	case MoveToDirections.BottomRight:  		UnRegisterAppBar ();  		saveWindowState (WindowStates.Floating);  		savePreviousWindowState (WindowStates.Floating);  		window.Left = screenBoundsInDp.Left;  		switch (direction) {  		case MoveToDirections.Right:  			window.Top = floatingSizeAndPosition.Top;  			break;  		case MoveToDirections.TopRight:  			window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  			break;  		case MoveToDirections.BottomRight:  			window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  			break;  		}  		window.Height = floatingSizeAndPosition.Height;  		window.Width = floatingSizeAndPosition.Width;  		adjustment = true;  		break;  	}  	break;  case DockEdges.Right:  	switch (direction) {  	case MoveToDirections.Left:  	case MoveToDirections.TopLeft:  	case MoveToDirections.BottomLeft:  		UnRegisterAppBar ();  		saveWindowState (WindowStates.Floating);  		savePreviousWindowState (WindowStates.Floating);  		window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;  		switch (direction) {  		case MoveToDirections.Left:  			window.Top = floatingSizeAndPosition.Top;  			break;  		case MoveToDirections.TopLeft:  			window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  			break;  		case MoveToDirections.BottomLeft:  			window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  			break;  		}  		window.Height = floatingSizeAndPosition.Height;  		window.Width = floatingSizeAndPosition.Width;  		adjustment = true;  		break;  	}  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Bottom:  case MoveToDirections.BottomLeft:  case MoveToDirections.BottomRight:  	UnRegisterAppBar ();  	saveWindowState (WindowStates.Floating);  	savePreviousWindowState (WindowStates.Floating);  	window.Top = screenBoundsInDp.Top;  	switch (direction) {  	case MoveToDirections.Bottom:  		window.Left = floatingSizeAndPosition.Left;  		break;  	case MoveToDirections.BottomLeft:  		window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  		break;  	case MoveToDirections.BottomRight:  		window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  		break;  	}  	window.Height = floatingSizeAndPosition.Height;  	window.Width = floatingSizeAndPosition.Width;  	adjustment = true;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Bottom:  	window.Left = floatingSizeAndPosition.Left;  	break;  case MoveToDirections.BottomLeft:  	window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  	break;  case MoveToDirections.BottomRight:  	window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Top:  case MoveToDirections.TopLeft:  case MoveToDirections.TopRight:  	UnRegisterAppBar ();  	saveWindowState (WindowStates.Floating);  	savePreviousWindowState (WindowStates.Floating);  	window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;  	switch (direction) {  	case MoveToDirections.Top:  		window.Left = floatingSizeAndPosition.Left;  		break;  	case MoveToDirections.TopLeft:  		window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  		break;  	case MoveToDirections.TopRight:  		window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  		break;  	}  	window.Height = floatingSizeAndPosition.Height;  	window.Width = floatingSizeAndPosition.Width;  	adjustment = true;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Top:  	window.Left = floatingSizeAndPosition.Left;  	break;  case MoveToDirections.TopLeft:  	window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;  	break;  case MoveToDirections.TopRight:  	window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Right:  case MoveToDirections.TopRight:  case MoveToDirections.BottomRight:  	UnRegisterAppBar ();  	saveWindowState (WindowStates.Floating);  	savePreviousWindowState (WindowStates.Floating);  	window.Left = screenBoundsInDp.Left;  	switch (direction) {  	case MoveToDirections.Right:  		window.Top = floatingSizeAndPosition.Top;  		break;  	case MoveToDirections.TopRight:  		window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  		break;  	case MoveToDirections.BottomRight:  		window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  		break;  	}  	window.Height = floatingSizeAndPosition.Height;  	window.Width = floatingSizeAndPosition.Width;  	adjustment = true;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Right:  	window.Top = floatingSizeAndPosition.Top;  	break;  case MoveToDirections.TopRight:  	window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  	break;  case MoveToDirections.BottomRight:  	window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Left:  case MoveToDirections.TopLeft:  case MoveToDirections.BottomLeft:  	UnRegisterAppBar ();  	saveWindowState (WindowStates.Floating);  	savePreviousWindowState (WindowStates.Floating);  	window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;  	switch (direction) {  	case MoveToDirections.Left:  		window.Top = floatingSizeAndPosition.Top;  		break;  	case MoveToDirections.TopLeft:  		window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  		break;  	case MoveToDirections.BottomLeft:  		window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  		break;  	}  	window.Height = floatingSizeAndPosition.Height;  	window.Width = floatingSizeAndPosition.Width;  	adjustment = true;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) {  case MoveToDirections.Left:  	window.Top = floatingSizeAndPosition.Top;  	break;  case MoveToDirections.TopLeft:  	window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;  	break;  case MoveToDirections.BottomLeft:  	window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment  {  case MoveToDirections.Left:  	if (xAdjustmentAmount > xAdjustmentToLeft) {  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (DockEdges.Left);  		RegisterAppBar ();  	} else {  		window.Left -= xAdjustmentToLeft;  	}  	break;  case MoveToDirections.BottomLeft:  case MoveToDirections.TopLeft:  	window.Left -= xAdjustmentToLeft;  	break;  case MoveToDirections.Right:  	if (xAdjustmentAmount > xAdjustmentToRight) {  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (DockEdges.Right);  		RegisterAppBar ();  	} else {  		window.Left += xAdjustmentToRight;  	}  	break;  case MoveToDirections.BottomRight:  case MoveToDirections.TopRight:  	window.Left += xAdjustmentToRight;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment  {  case MoveToDirections.Bottom:  	if (yAdjustmentAmount > yAdjustmentToBottom) {  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (DockEdges.Bottom);  		RegisterAppBar ();  	} else {  		window.Top += yAdjustmentToBottom;  	}  	break;  case MoveToDirections.BottomLeft:  case MoveToDirections.BottomRight:  	window.Top += yAdjustmentToBottom;  	break;  case MoveToDirections.Top:  	if (yAdjustmentAmount > yAdjustmentToTop) {  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (DockEdges.Top);  		RegisterAppBar ();  	} else {  		window.Top -= yAdjustmentToTop;  	}  	break;  case MoveToDirections.TopLeft:  case MoveToDirections.TopRight:  	window.Top -= yAdjustmentToTop;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (windowState) {  case WindowStates.Docked:  	//Jump to (and dock on) a different edge  	var dockPosition = getDockPosition ();  	if (direction == MoveToDirections.Top && dockPosition != DockEdges.Top) {  		saveDockPosition (DockEdges.Top);  		adjustment = true;  	} else if (direction == MoveToDirections.Bottom && dockPosition != DockEdges.Bottom) {  		saveDockPosition (DockEdges.Bottom);  		adjustment = true;  	} else if (direction == MoveToDirections.Left && dockPosition != DockEdges.Left) {  		saveDockPosition (DockEdges.Left);  		adjustment = true;  	} else if (direction == MoveToDirections.Right && dockPosition != DockEdges.Right) {  		saveDockPosition (DockEdges.Right);  		adjustment = true;  	}  	break;  case WindowStates.Floating:  	//Jump to edge(s)' or dock against edge if we are already against that edge  	DockEdges? dockToEdge = null;  	switch (direction) //Handle horizontal adjustment  	{  	case MoveToDirections.Left:  		if (distanceToLeftBoundaryIfFloating == 0) {  			dockToEdge = DockEdges.Left;  		} else {  			window.Left -= distanceToLeftBoundaryIfFloating;  		}  		break;  	case MoveToDirections.BottomLeft:  	case MoveToDirections.TopLeft:  		window.Left -= distanceToLeftBoundaryIfFloating;  		break;  	case MoveToDirections.Right:  		if (distanceToRightBoundaryIfFloating == 0) {  			dockToEdge = DockEdges.Right;  		} else {  			window.Left += distanceToRightBoundaryIfFloating;  		}  		break;  	case MoveToDirections.BottomRight:  	case MoveToDirections.TopRight:  		window.Left += distanceToRightBoundaryIfFloating;  		break;  	}  	switch (direction) //Handle vertical adjustment  	{  	case MoveToDirections.Bottom:  		if (distanceToBottomBoundaryIfFloating == 0) {  			dockToEdge = DockEdges.Bottom;  		} else {  			window.Top += distanceToBottomBoundaryIfFloating;  		}  		break;  	case MoveToDirections.BottomLeft:  	case MoveToDirections.BottomRight:  		window.Top += distanceToBottomBoundaryIfFloating;  		break;  	case MoveToDirections.Top:  		if (distanceToTopBoundaryIfFloating == 0) {  			dockToEdge = DockEdges.Top;  		} else {  			window.Top -= distanceToTopBoundaryIfFloating;  		}  		break;  	case MoveToDirections.TopLeft:  	case MoveToDirections.TopRight:  		window.Top -= distanceToTopBoundaryIfFloating;  		break;  	}  	if (dockToEdge != null) {  		saveWindowState (WindowStates.Docked);  		savePreviousWindowState (WindowStates.Docked);  		saveDockPosition (dockToEdge.Value);  		RegisterAppBar ();  	}  	adjustment = true;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment  {  case MoveToDirections.Left:  	if (distanceToLeftBoundaryIfFloating == 0) {  		dockToEdge = DockEdges.Left;  	} else {  		window.Left -= distanceToLeftBoundaryIfFloating;  	}  	break;  case MoveToDirections.BottomLeft:  case MoveToDirections.TopLeft:  	window.Left -= distanceToLeftBoundaryIfFloating;  	break;  case MoveToDirections.Right:  	if (distanceToRightBoundaryIfFloating == 0) {  		dockToEdge = DockEdges.Right;  	} else {  		window.Left += distanceToRightBoundaryIfFloating;  	}  	break;  case MoveToDirections.BottomRight:  case MoveToDirections.TopRight:  	window.Left += distanceToRightBoundaryIfFloating;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment  {  case MoveToDirections.Bottom:  	if (distanceToBottomBoundaryIfFloating == 0) {  		dockToEdge = DockEdges.Bottom;  	} else {  		window.Top += distanceToBottomBoundaryIfFloating;  	}  	break;  case MoveToDirections.BottomLeft:  case MoveToDirections.BottomRight:  	window.Top += distanceToBottomBoundaryIfFloating;  	break;  case MoveToDirections.Top:  	if (distanceToTopBoundaryIfFloating == 0) {  		dockToEdge = DockEdges.Top;  	} else {  		window.Top -= distanceToTopBoundaryIfFloating;  	}  	break;  case MoveToDirections.TopLeft:  case MoveToDirections.TopRight:  	window.Top -= distanceToTopBoundaryIfFloating;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following switch statement is missing a default case: switch (getDockSize ()) {  case DockSizes.Full:  	var fullDockThicknessAsPercentageOfScreen = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? (window.ActualHeight / screenBoundsInDp.Height) * 100 : (window.ActualWidth / screenBoundsInDp.Width) * 100;  	saveFullDockThicknessAsPercentageOfScreen (fullDockThicknessAsPercentageOfScreen);  	break;  case DockSizes.Collapsed:  	var collapsedDockThicknessAsPercentageOfFullDockThickness = dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen ()) * 10000 : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen ()) * 10000;  	saveCollapsedDockThicknessAsPercentageOfFullDockThickness (collapsedDockThicknessAsPercentageOfFullDockThickness);  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistSizeAndPosition,The following switch statement is missing a default case: switch (windowState) {  case WindowStates.Floating:  	saveFloatingSizeAndPosition (new Rect (window.Left' window.Top' window.ActualWidth' window.ActualHeight));  	break;  case WindowStates.Docked:  	PersistDockThickness ();  	break;  case WindowStates.Maximised:  case WindowStates.Minimised:  case WindowStates.Hidden:  	//Do not save anything  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The following switch statement is missing a default case: switch (dockPosition) {  case DockEdges.Top:  	barData.rc.Bottom += barData.rc.Top - (int)Math.Round (sizeAndPosition.Top);  	break;  case DockEdges.Bottom:  	barData.rc.Top -= (int)Math.Round (sizeAndPosition.Bottom) - barData.rc.Bottom;  	break;  case DockEdges.Left:  	barData.rc.Right += barData.rc.Left - (int)Math.Round (sizeAndPosition.Left);  	break;  case DockEdges.Right:  	barData.rc.Left -= (int)Math.Round (sizeAndPosition.Right) - barData.rc.Right;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following switch statement is missing a default case: switch (calibrateArgs.Result) {  case CalibrationRunnerResult.Success:  	var message = string.Format (Resources.CALIBRATION_SUCCESS_WITH_ACCURACY' calibrateArgs.CalibrationResult.AverageErrorDegree);  	Log.Info (message);  	return message;  case CalibrationRunnerResult.Abort:  	throw new ApplicationException (string.Format (Resources.CALIBRATION_ABORT_MESSAGE' calibrateArgs.Message));  case CalibrationRunnerResult.Error:  	throw new ApplicationException (string.Format (Resources.CALIBRATION_ERROR_MESSAGE' calibrateArgs.Message));  case CalibrationRunnerResult.Failure:  	throw new ApplicationException (string.Format (Resources.CALIBRATION_FAIL_MESSAGE' calibrateArgs.Message));  case CalibrationRunnerResult.Unknown:  	throw new ApplicationException (string.Format (Resources.CALIBRATION_STOPPED_MESSAGE' calibrateArgs.Message));  }  
Missing Default,JuliusSweetland.OptiKey.UI.Controls,Key,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,TextChanged,The following switch statement is missing a default case: switch (key.Case == Case.Settings ? Settings.Default.KeyCase : key.Case) {  case Case.Upper:  	value = textInfo.ToUpper (value);  	break;  case Case.Lower:  	value = textInfo.ToLower (value);  	break;  case Case.Title:  	//Must be lowercased first because ToTitleCase consider uppercased string as abreviations  	value = textInfo.ToTitleCase (textInfo.ToLower (value));  	break;  }  
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,InitialiseKeyboard,The following switch statement is missing a default case: switch (Settings.Default.StartupKeyboard) {  case Enums.Keyboards.Alpha:  	Keyboard = new Alpha ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.ConversationAlpha:  	Keyboard = new ConversationAlpha (() => {  		Keyboard = new Menu (() => Keyboard = new Alpha ());  		mainWindowManipulationService.Restore ();  		mainWindowManipulationService.ResizeDockToFull ();  	});  	windowManipulationService.Maximise ();  	break;  case Enums.Keyboards.ConversationNumericAndSymbols:  	Keyboard = new ConversationNumericAndSymbols (() => {  		Keyboard = new Menu (() => Keyboard = new Alpha ());  		mainWindowManipulationService.Restore ();  		mainWindowManipulationService.ResizeDockToFull ();  	});  	windowManipulationService.Maximise ();  	break;  case Enums.Keyboards.Currencies1:  	Keyboard = new Currencies1 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.Currencies2:  	Keyboard = new Currencies2 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.Diacritics1:  	Keyboard = new Diacritics1 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.Diacritics2:  	Keyboard = new Diacritics2 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.Diacritics3:  	Keyboard = new Diacritics3 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.Menu:  	Keyboard = new Menu (() => Keyboard = new Alpha ());  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.Minimised:  	Keyboard = new Minimised (() => {  		Keyboard = new Menu (() => Keyboard = new Alpha ());  		windowManipulationService.Restore ();  		mainWindowManipulationService.ResizeDockToFull ();  	});  	windowManipulationService.Minimise ();  	break;  case Enums.Keyboards.Mouse:  	Keyboard = new Mouse (() => Keyboard = new Menu (() => Keyboard = new Alpha ()));  	windowManipulationService.Restore ();  	if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full) {  		mainWindowManipulationService.ResizeDockToFull ();  	} else {  		mainWindowManipulationService.ResizeDockToCollapsed ();  	}  	break;  case Enums.Keyboards.NumericAndSymbols1:  	Keyboard = new NumericAndSymbols1 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.NumericAndSymbols2:  	Keyboard = new NumericAndSymbols2 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.NumericAndSymbols3:  	Keyboard = new NumericAndSymbols3 ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.PhysicalKeys:  	Keyboard = new PhysicalKeys ();  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  case Enums.Keyboards.SizeAndPosition:  	Keyboard = new SizeAndPosition (() => Keyboard = new Menu (() => Keyboard = new Alpha ()));  	windowManipulationService.Restore ();  	mainWindowManipulationService.ResizeDockToFull ();  	break;  }  
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,PointingAndSelectingViewModel,The following switch statement is missing a default case: switch (ts) {  case Enums.TriggerSources.Fixations:  	MultiKeySelectionTriggerStopSignal = Enums.TriggerStopSignals.NextHigh;  	break;  case Enums.TriggerSources.KeyboardKeyDownsUps:  case Enums.TriggerSources.MouseButtonDownUps:  	MultiKeySelectionTriggerStopSignal = Enums.TriggerStopSignals.NextLow;  	break;  }  
Missing Default,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,F:\newReposMay17\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following switch statement is missing a default case: switch (sextant) {  case 0:  	r = v;  	g = mid1;  	b = m;  	break;  case 1:  	r = mid2;  	g = v;  	b = m;  	break;  case 2:  	r = m;  	g = v;  	b = mid1;  	break;  case 3:  	r = m;  	g = mid2;  	b = v;  	break;  case 4:  	r = mid1;  	g = m;  	b = v;  	break;  case 5:  	r = v;  	g = m;  	b = mid2;  	break;  }  
