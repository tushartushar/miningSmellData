Implementation smell,Namespace,Class,File,Method,Description
Long Method,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The method has 101 lines of code.
Long Method,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The method has 140 lines of code.
Long Method,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The method has 115 lines of code.
Long Method,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttemptToStartMaryTTSService,The method has 104 lines of code.
Long Method,JuliusSweetland.OptiKey.Extensions,FunctionKeysExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\FunctionKeysExtensions.cs,ToVirtualKeyCode,The method has 117 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The method has 156 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The method has 138 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The method has 209 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The method has 107 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The method has 232 lines of code.
Long Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The method has 141 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The method has 237 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,GenerateContent,The method has 241 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The method has 1424 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The method has 193 lines of code.
Long Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The method has 105 lines of code.
Complex Method,JuliusSweetland.OptiKey.Extensions,KeyValueExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\KeyValueExtensions.cs,ReduceToSequentiallyDistinctLetters,Cyclomatic complexity of the method is 8
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,Cyclomatic complexity of the method is 17
Complex Method,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,PublishKeyPress,Cyclomatic complexity of the method is 13
Complex Method,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,Cyclomatic complexity of the method is 12
Complex Method,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,Cyclomatic complexity of the method is 8
Long Parameter List,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The method has 6 parameters. Parameters: keyStateService' dictionaryService' audioService' calibrationService' capturingStateManager' errorNotifyingServices
Long Parameter List,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The method has 13 parameters. Parameters: simulateKeyStrokes' getText' setText' getLastTextChange' setLastTextChange' getLastTextChangeWasSuggestion' setLastTextChangeWasSuggestion' getSuppressNextAutoSpace' setSuppressNextAutoSpace' getShiftStateSetAutomatically' setShiftStateSetAutomatically' getSuggestions' setSuggestions
Long Parameter List,JuliusSweetland.OptiKey.Models,KeyEnabledStates,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyEnabledStates.cs,KeyEnabledStates,The method has 5 parameters. Parameters: keyStateService' suggestionService' capturingStateManager' lastMouseActionStateManager' calibrationService
Long Parameter List,JuliusSweetland.OptiKey.Native,PInvoke,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Native\PInvoke.cs,GetTokenInformation,The method has 5 parameters. Parameters: TokenHandle' TokenInformationClass' TokenInformation' TokenInformationLength' ReturnLength
Long Parameter List,JuliusSweetland.OptiKey.Services,KeyStateService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,KeyStateService,The method has 5 parameters. Parameters: suggestionService' capturingStateManager' lastMouseActionStateManager' calibrationService' fireKeySelectionEvent
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,SpeakNewOrInterruptCurrentSpeech,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,AudioService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,Speak,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The method has 6 parameters. Parameters: timestampedPointAndKeyValues' minCount' reliableFirstLetter' reliableLastLetter' cancellationTokenSource' exceptionHandler
Long Parameter List,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ToCleansedUncleansedStrings,The method has 6 parameters. Parameters: charsWithCount' threshold' firstCharCleansed' firstCharUncleansed' lastCharCleansed' lastCharUncleansed
Long Parameter List,JuliusSweetland.OptiKey.Services,IAudioService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\IAudioService.cs,SpeakNewOrInterruptCurrentSpeech,The method has 5 parameters. Parameters: textToSpeak' onComplete' volume' rate' voice
Long Parameter List,JuliusSweetland.OptiKey.Services,IDictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\IDictionaryService.cs,MapCaptureToEntries,The method has 6 parameters. Parameters: timestampedPointAndKeyValues' minCount' reliableFirstLetter' reliableLastLetter' cancellationTokenSource' exceptionHandler
Long Parameter List,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,InputService,The method has 7 parameters. Parameters: keyStateService' dictionaryService' audioService' capturingStateManager' pointSource' keySelectionTriggerSource' pointSelectionTriggerSource
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The method has 18 parameters. Parameters: window' getOpacity' getWindowState' getPreviousWindowState' getFloatingSizeAndPosition' getDockPosition' getDockSize' getFullDockThicknessAsPercentageOfScreen' getCollapsedDockThicknessAsPercentageOfFullDockThickness' getMinimisedPosition' saveOpacity' saveWindowState' savePreviousWindowState' saveFloatingSizeAndPosition' saveDockPosition' saveDockSize' saveFullDockThicknessAsPercentageOfScreen' saveCollapsedDockThicknessAsPercentageOfFullDockThickness
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,AppBarPositionChangeCallback,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The method has 8 parameters. Parameters: direction' amountInPx' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating' windowState' floatingSizeAndPosition
Long Parameter List,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The method has 6 parameters. Parameters: direction' windowState' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating
Long Parameter List,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,KeyboardOutputService,The method has 5 parameters. Parameters: keyStateService' suggestionService' publishService' dictionaryService' fireKeySelectionEvent
Long Parameter List,JuliusSweetland.OptiKey.Observables.TriggerSources,KeyFixationSource,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Observables\TriggerSources\KeyFixationSource.cs,KeyFixationSource,The method has 6 parameters. Parameters: lockOnTime' resumeRequiresLockOn' defaultTimeToCompleteTrigger' timeToCompleteTriggerByKey' incompleteFixationTtl' pointSource
Long Parameter List,JuliusSweetland.OptiKey.Observables.TriggerSources,PointFixationSource,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Observables\TriggerSources\PointFixationSource.cs,PointFixationSource,The method has 5 parameters. Parameters: lockOnTime' timeToCompleteTrigger' lockOnRadius' fixationRadius' pointSource
Long Parameter List,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,MainViewModel,The method has 12 parameters. Parameters: audioService' calibrationService' dictionaryService' keyStateService' suggestionService' capturingStateManager' lastMouseActionStateManager' inputService' keyboardOutputService' mouseOutputService' mainWindowManipulationService' errorNotifyingServices
Long Parameter List,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,PlaceKeyInPosition,The method has 5 parameters. Parameters: key' row' col' rowspan' colspan
Long Parameter List,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,AddKey,The method has 5 parameters. Parameters: key' row' col' rowspan' colspan
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The length of the parameter getLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,KeyboardOutputServiceState,The length of the parameter setLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,,The length of the parameter setLastTextChangeWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter CombiningCommaAboveOrSmoothBreathingKey is 39.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter CombiningCyrillicPsiliPneumataOrSmoothBreathingKey is 50.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter CombiningIotaSubscriptOrYpogegrammeniKey is 40.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter CombiningPalatalizedHookBelowKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter CombiningRetroflexHookBelowKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter CombiningReversedCommaAboveOrRoughBreathingKey is 46.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter ConversationConfirmKeyboardKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter ConversationNumericAndSymbolsKeyboardKey is 40.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter MouseMoveAndLeftDoubleClickKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter MoveAndResizeAdjustmentAmountKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter MoveToBottomAndLeftBoundariesKey is 32.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter MoveToBottomAndRightBoundariesKey is 33.
Long Identifier,JuliusSweetland.OptiKey.Models,KeyValues,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValues.cs,,The length of the parameter MoveToTopAndRightBoundariesKey is 30.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyStateService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,,The length of the parameter turnOnMultiKeySelectionWhenKeysWhichPreventTextCaptureAreReleased is 65.
Long Identifier,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the parameter charsWithCountWithoutReliableFirstOrLast is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,,The length of the parameter mapToDictionaryMatchesCancellationTokenSource is 45.
Long Identifier,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,,The length of the parameter startMultiKeySelectionTriggerSignal is 35.
Long Identifier,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,,The length of the parameter stopMultiKeySelectionTriggerSignal is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter getFullDockThicknessAsPercentageOfScreen is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter getCollapsedDockThicknessAsPercentageOfFullDockThickness is 56.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter saveFullDockThicknessAsPercentageOfScreen is 41.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,WindowManipulationService,The length of the parameter saveCollapsedDockThicknessAsPercentageOfFullDockThickness is 57.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the parameter maxCollapsedDockHeightAdjustment is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the parameter maxCollapsedDockWidthAdjustment is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the parameter fullDockThicknessAsPercentageOfScreen is 37.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the parameter collapsedDockThicknessAsPercentageOfFullDockThickness is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToTopBoundaryIfFloating is 31.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToBottomBoundaryIfFloating is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToLeftBoundaryIfFloating is 32.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the parameter distanceToRightBoundaryIfFloating is 33.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The length of the parameter fullDockThicknessAsPercentageOfScreen is 37.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The length of the parameter collapsedDockThicknessAsPercentageOfFullDockThickness is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN is 47.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS is 65.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN is 42.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN is 43.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter getFullDockThicknessAsPercentageOfScreen is 40.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter getCollapsedDockThicknessAsPercentageOfFullDockThickness is 56.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter saveFullDockThicknessAsPercentageOfScreen is 41.
Long Identifier,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,,The length of the parameter saveCollapsedDockThicknessAsPercentageOfFullDockThickness is 57.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter inProgressWordWithNewProcessedText is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter adjustedInProgressWordWithNewProcessedText is 42.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the parameter adjustedAndComposedInProgressWordWithNewProcessedText is 53.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,AdjustInProgressWord,The length of the parameter inProgressWordWithNewProcessedText is 34.
Long Identifier,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,,The length of the parameter lastProcessedTextWasSuggestion is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,CursorBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\CursorBehaviours.cs,BeginAnimationOnPointSelectionEventChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,CursorBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\CursorBehaviours.cs,,The length of the parameter BeginAnimationOnPointSelectionEventProperty is 43.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,KeyBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\KeyBehaviours.cs,BeginAnimationOnKeySelectionEventChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,KeyBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\KeyBehaviours.cs,,The length of the parameter BeginAnimationOnKeySelectionEventProperty is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,ScrollViewerBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\ScrollViewerBehaviours.cs,AutoScrollToEndOnPropertyOrCollectionChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Behaviours,ScrollViewerBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\ScrollViewerBehaviours.cs,,The length of the parameter AutoScrollToEndOnPropertyOrCollectionChangedProperty is 52.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the parameter screenCoordinatesIndexUpperBound is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,PropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the parameter keySelectionProgressSubscription is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the parameter capturingMultiKeySelectionSubscription is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,TextChanged,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter BackgroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter DisabledBackgroundColourOverrideProperty is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter DisabledBackgroundOpacityProperty is 33.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter ForegroundColourOverrideProperty is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter DisabledForegroundColourOverrideProperty is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter HoverForegroundColourOverrideProperty is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter SelectionProgressColourOverrideProperty is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter SelectionForegroundColourOverrideProperty is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,,The length of the parameter UseUnicodeCompatibilityFontProperty is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,,The length of the parameter currentKeyboardKeyValueSubscriptions is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.Controls,Output,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Output.xaml.cs,,The length of the parameter NumberOfSuggestionsDisplayedProperty is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.TriggerActions,CalibrateWindowAction,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\CalibrateWindowAction.cs,,The length of the parameter MainWindowManipulationServiceProperty is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the parameter notificationWithServicesAndState is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationAlpha1 is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationAlpha2 is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationConfirm is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter opacityBeforeConversationNumericAndSymbols is 42.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the parameter conversationNumericAndSymbolsBackAction is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,AttachKeyboardSupportsCollapsedDockListener,The length of the parameter resizeDockIfCollapsedDockingNotSupported is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,,The length of the parameter pendingErrorToastNotificationContent is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,,The length of the parameter inputServicePointsPerSecondHandler is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,,The length of the parameter inputServiceCurrentPositionHandler is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,,The length of the parameter inputServiceSelectionProgressHandler is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,,The length of the parameter inputServiceSelectionResultHandler is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointsMousePositionSampleIntervalInMs is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerKeyboardKeyDownUpKey is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerMouseDownUpButton is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationLockOnTimeInMs is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationResumeRequiresLockOn is 47.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationDefaultCompleteTimeInMs is 50.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationCompleteTimesByIndividualKey is 55.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups is 59.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter keySelectionTriggerIncompleteFixationTtlInMs is 44.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerKeyboardKeyDownUpKey is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerMouseDownUpButton is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerFixationLockOnTimeInMs is 43.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerFixationCompleteTimeInMs is 45.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerLockOnRadius is 33.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter pointSelectionTriggerFixationRadius is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter progressIndicatorResizeStartProportion is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter progressIndicatorResizeEndProportion is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter multiKeySelectionTriggerStopSignal is 34.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter multiKeySelectionFixationMinDwellTimeInMs is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,,The length of the parameter multiKeySelectionMaxDurationInMs is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureStartSoundFile is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureStartSoundVolume is 40.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureEndSoundFile is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,SoundsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\SoundsViewModel.cs,,The length of the parameter multiKeySelectionCaptureEndSoundVolume is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter toastNotificationHorizontalFillPercentage is 41.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter toastNotificationVerticalFillPercentage is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter toastNotificationSecondsPerCharacter is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter magnifySourcePercentageOfScreen is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter magnifyDestinationPercentageOfScreen is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter mainWindowFullDockThicknessAsPercentageOfScreen is 47.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter mainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness is 63.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,,The length of the parameter simplifiedKeyboardCurrentContext is 32.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter publishVirtualKeyCodesForCharacters is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter suppressModifierKeysForAllMouseActions is 38.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter suppressModifierKeysWhenInMouseKeyboard is 39.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,OtherViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\OtherViewModel.cs,,The length of the parameter magnifySuppressedForScrollingActions is 36.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter enableCommuniKateKeyboardLayout is 31.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter useCommuniKateKeyboardLayoutByDefault is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter usingCommuniKateKeyboardLayout is 30.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter suppressAutoCapitaliseIntelligently is 35.
Long Identifier,JuliusSweetland.OptiKey.UI.ViewModels.Management,WordsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\WordsViewModel.cs,,The length of the parameter multiKeySelectionMaxDictionaryMatches is 37.
Long Identifier,JuliusSweetland.OptiKey.UI.Windows,MainWindow,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\MainWindow.xaml.cs,,The length of the parameter managementWindowRequestCommand is 30.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                IKeyStateService keyStateService = new KeyStateService(suggestionService' capturingStateManager' lastMouseActionStateManager' calibrationService' fireKeySelectionEvent); " is 169.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                IInputService inputService = CreateInputService(keyStateService' dictionaryService' audioService' calibrationService' capturingStateManager' errorNotifyingServices); " is 165.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                IKeyboardOutputService keyboardOutputService = new KeyboardOutputService(keyStateService' suggestionService' publishService' dictionaryService' fireKeySelectionEvent); " is 167.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                //Setup actions to take once main view is loaded (i.e. the view is ready' so hook up the services which kicks everything off) " is 125.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                //Display splash screen and check for updates (and display message) after the window has been sized and positioned for the 1st time " is 131.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                    mainWindowManipulationService.SizeAndPositionInitialised -= sizeAndPositionInitialised; //Ensure this handler only triggers once " is 128.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,App_OnStartup,The length of the statement  "                    await AlertIfPresageBitnessOrBootstrapOrVersionFailure(presageInstallationProblem' inputService' audioService' mainViewModel); " is 126.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                    presageStartMenuFolder = Registry.GetValue("HKEY_CURRENT_USER\\Software\\Presage"' "Start Menu Folder"' string.Empty).ToString(); " is 129.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                Log.InfoFormat("Presage path: {0} | Presage start menu folder: {1} | OS bitness: {2}"' presagePath' presageStartMenuFolder' osBitness); " is 135.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (path(s) missing). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 178.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (valid version not detected). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 189.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (incorrect bitness? Install location is suspect). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 209.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Invalid Presage installation detected (install directory does not exist). Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 195.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                //2.Attempt to construct a Presage object' which can fail for a few reasons' including BadImageFormatExceptions (64-bit version installed) " is 138.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The length of the statement  "                    Log.Error("Presage failed to bootstrap - attempting to suppress finalisation. The suggestion method has been changed to NGram"' ex); " is 132.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowPreviousState from settings with value '{0}'"' Settings.Default.MainWindowPreviousState); " is 124.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowFloatingSizeAndPosition from settings with value '{0}'"' Settings.Default.MainWindowFloatingSizeAndPosition); " is 144.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowDockPosition from settings with value '{0}'"' Settings.Default.MainWindowDockPosition); " is 122.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowFullDockThicknessAsPercentageOfScreen from settings with value '{0}'"' Settings.Default.MainWindowFullDockThicknessAsPercentageOfScreen); " is 172.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness from settings with value '{0}'"' Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness); " is 204.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Getting MainWindowMinimisedPosition from settings with value '{0}'"' Settings.Default.MainWindowMinimisedPosition); " is 132.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateMainWindowManipulationService,The length of the statement  "                        Log.DebugFormat("Storing MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness to settings with value '{0}'"' t); " is 123.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttachUnhandledExceptionHandlers,The length of the statement  "            Current.DispatcherUnhandledException += (sender' args) => Log.Error("A DispatcherUnhandledException has been encountered..."' args.Exception); " is 142.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttachUnhandledExceptionHandlers,The length of the statement  "            AppDomain.CurrentDomain.UnhandledException += (sender' args) => Log.Error("An UnhandledException has been encountered..."' args.ExceptionObject as Exception); " is 158.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttachUnhandledExceptionHandlers,The length of the statement  "            TaskScheduler.UnobservedTaskException += (sender' args) => Log.Error("An UnobservedTaskException has been encountered..."' args.Exception); " is 139.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateInputService,The length of the statement  "                    throw new ArgumentException("'PointsSource' settings is missing or not recognised! Please correct and restart OptiKey."); " is 121.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "                message.AppendLine(string.Format(OptiKey.Properties.Resources.KEYBOARD_AND_DICTIONARY_LANGUAGE_DESCRIPTION' Settings.Default.KeyboardAndDictionaryLanguage.ToDescription())); " is 173.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "                message.AppendLine(string.Format(OptiKey.Properties.Resources.UI_LANGUAGE_DESCRIPTION' Settings.Default.UiLanguage.ToDescription())); " is 133.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "                message.AppendLine(string.Format(OptiKey.Properties.Resources.POINTING_SOURCE_DESCRIPTION' Settings.Default.PointsSource.ToDescription())); " is 139.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "                        keySelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds)); " is 166.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The length of the statement  "                        pointSelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds)); " is 163.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CheckForUpdates,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttemptToStartMaryTTSService,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AttemptToStartMaryTTSService,The length of the statement  "                        "Disabling MaryTTS and using System Voice '{1}' instead."' ExpectedMaryTTSLocationSuffix' Settings.Default.SpeechVoice); " is 120.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AlertIfPresageBitnessOrBootstrapOrVersionFailure,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<bool>(); //Used to make this method awaitable on the InteractionRequest callback " is 132.
Long Statement,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,AlertIfPresageBitnessOrBootstrapOrVersionFailure,The length of the statement  "                Log.Error("Invalid Presage installation' or problem starting Presage. Must install 'presage-0.9.1-32bit' or 'presage-0.9.2~beta20150909-32bit'. Changed SuggesionMethod to NGram."); " is 180.
Long Statement,JuliusSweetland.OptiKey.DataFilters,KalmanFilter,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\DataFilters\KalmanFilter.cs,Update,The length of the statement  "            EstimationConfidence = MeasurementNoise * (EstimationConfidence + ProcessNoise) / (MeasurementNoise + EstimationConfidence + ProcessNoise); " is 139.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "            return category == UnicodeCategory.NonSpacingMark //(All combining diacritic characters are non-spacing marks). Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn"(mark' nonspacing).The value is 5. " is 258.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "                || category == UnicodeCategory.SpacingCombiningMark //Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark' spacing combining). The value is 6. " is 265.
Long Statement,JuliusSweetland.OptiKey.Extensions,CharExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\CharExtensions.cs,IsCombiningCharacter,The length of the statement  "                || category == UnicodeCategory.EnclosingMark; //Enclosing mark character' which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark' enclosing). The value is 7. " is 269.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "                    case UnicodeCategory.NonSpacingMark: //(All combining diacritic characters are non-spacing marks). Nonspacing character that indicates modifications of a base character. Signified by the Unicode designation "Mn"(mark' nonspacing).The value is 5. " is 245.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "                    case UnicodeCategory.SpacingCombiningMark: //Spacing character that indicates modifications of a base character and affects the width of the glyph for that base character. Signified by the Unicode designation "Mc" (mark' spacing combining). The value is 6. " is 256.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,RemoveDiacritics,The length of the statement  "                    case UnicodeCategory.EnclosingMark: //Enclosing mark character' which is a nonspacing combining character that surrounds all previous characters up to and including a base character. Signified by the Unicode designation "Me" (mark' enclosing). The value is 7. " is 259.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The length of the statement  "                "CountBackToLastCharCategoryBoundary called with '{0}' - boundary calculated as {1} characters from end."' input' count); " is 121.
Long Statement,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,InProgressWord,The length of the statement  "                && !char.IsWhiteSpace(input[cursorIndex-1])) //Character before cursor position is not whitespace' i.e. at least 1 letter of the word is before the cursor position " is 163.
Long Statement,JuliusSweetland.OptiKey.Extensions,ObservableExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\ObservableExtensions.cs,PublishLivePointsOnly,The length of the statement  "                .StartWith(new Timestamped<Point?>(null' DateTimeOffset.Now.ToUniversalTime())); //Prefix the sequence with an initial value of NULL " is 132.
Long Statement,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,RestoreState,The length of the statement  "            Log.InfoFormat("Restoring KeyboardOutputService state for SimulateKeyStrokes={0}. Text:'{1}'' LastTextChange:'{2}'' LastTextChangeWasSuggestion:'{3}'' SuppressNextAutoSpace:'{4}'' ShiftStateSetAutomatically:'{5}'' Suggestions:'{6}'"' " is 233.
Long Statement,JuliusSweetland.OptiKey.Models,KeyboardOutputServiceState,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyboardOutputServiceState.cs,RestoreState,The length of the statement  "                simulateKeyStrokes' text' lastTextChange' lastTextChangeWasSuggestion' suppressNextAutoSpace' shiftStateSetAutomatically' suggestions.ToString("(null)")); " is 154.
Long Statement,JuliusSweetland.OptiKey.Models,KeyEnabledStates,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyEnabledStates.cs,SuggestionKeyIsValid,The length of the statement  "                && suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage * suggestionService.SuggestionsPerPage + index); " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,The length of the statement  "                    Log.Info("No stored KeyStateService state to restore for SimulateKeyStrokes=true. Defaulting Multi-Key Selection key state."); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,ReactToSimulateKeyStrokesChanges,The length of the statement  "                    Log.Info("No stored KeyStateService state to restore for SimulateKeyStrokes=false.  Defaulting Multi-Key Selection key state & releasing all publish only keys."); " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,AddKeyDownStatesChangeHandlers,The length of the statement  "                Settings.Default.MouseMagnifierLockedDown = KeyDownStates[KeyValues.MouseMagnifierKey].Value == Enums.KeyDownStates.LockedDown); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,KeyStateService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyStateService.cs,CalculateMultiKeySelectionSupported,The length of the statement  "                //Automatically turn multi-key capture back on again when appropriate if it is currently locked down (if it is just down then let it go) " is 136.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadDictionary,The length of the statement  "            Log.InfoFormat("LoadDictionary called. Keyboard language setting is '{0}'."' Settings.Default.KeyboardAndDictionaryLanguage); " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadDictionaryFromLanguageFile,The length of the statement  "             var originalDictionaryPath = Path.GetFullPath(string.Format(@"{0}{1}{2}"' OriginalDictionariesSubPath' Settings.Default.KeyboardAndDictionaryLanguage' DictionaryFileType)); " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,GetUserDictionaryPath,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' ApplicationDataSubPath); " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,ExistsInDictionary,The length of the statement  "                    .Any(dictionaryEntry => !string.IsNullOrWhiteSpace(dictionaryEntry) && dictionaryEntry.Trim().Equals(entryToFind.Trim())); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,AddEntryToDictionary,The length of the statement  "                        Log.DebugFormat("Adding new (not loaded from dictionary file) entry '{0}' to in-memory dictionary with hash '{1}'"' entry' hash); " is 129.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "            Log.DebugFormat("PerformIncrementOrDecrementOfEntryUsageCount called with entry '{0}' and isIncrement={1}"' text' isIncrement); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,IncrementOrDecrementOfEntryUsageCount,The length of the statement  "                                Log.Warn(string.Format("An attempt was made to decrement the usage count of entry '{0}'' but the usage count was zero so no action was taken."' match.Entry)); " is 158.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "                    if (index == charsWithCount.Count - 1 && reliableLastCharCleansed != null && cwc.Item1 == reliableLastCharCleansed.Value) " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,MapCaptureToEntries,The length of the statement  "                    ? Math.Max((int)Math.Floor(charsWithCountWithoutReliableFirstOrLast.Average(cwc => cwc.Item3))' minCount) //Coerce threshold up to minimum count from settings " is 158.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                            && (keyStateService.KeyEnabledStates == null || keyStateService.KeyEnabledStates[triggerSignal.PointAndKeyValue.KeyValue])) " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                                && keyStateService.KeyEnabledStates[KeyValues.MultiKeySelectionIsOnKey] //It is possible for MultiKeySelectionIsOnKey to be down/locked down even though it is disabled - check for this " is 184.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                                && !KeyValues.CombiningKeys.Any(key => keyStateService.KeyDownStates[key].Value.IsDownOrLockedDown())) //Do not start if any combining ("dead") keys are down " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The length of the statement  "                                Log.Debug("Multi-key selection is currently enabled and the key on which the trigger occurred is a letter. Publishing the selection and beginning a new multi-key selection capture."); " is 183.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "                    //Why am I wrapping this call in a Task.Run? Internally the MapCaptureToEntries method uses PLINQ which also blocks the UI thread - this frees it up. " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessMultiKeySelectionResult,The length of the statement  "                    //This cannot be done inside the MapCaptureToEntries method as the method takes a ref param' which cannot be used inside an anonymous delegate or lambda. " is 153.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishCurrentPosition,The length of the statement  "                Log.DebugFormat("Publishing CurrentPosition event with Point:{0} KeyValue:{1}"' currentPosition.Item1' currentPosition.Item2); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionResult,The length of the statement  "                Log.DebugFormat("Publishing Selection Result event with {0} point(s)' FunctionKey:'{1}'' String:'{2}'' Best match '{3}'' Suggestion count:{4}"' " is 143.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndLeftClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and left clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndLeftDoubleClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and double left clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 132.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndMiddleClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and middle clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndRightClick,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and right clicking{1}"' point' sleep ? " (with pauses between actions)" : null); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelUp,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling up by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 146.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelDown,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling down by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 148.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelLeft,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling left by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 148.
Long Statement,JuliusSweetland.OptiKey.Services,MouseOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MouseOutputService.cs,MoveAndScrollWheelRight,The length of the statement  "            Log.DebugFormat("Moving cursor to point '{0}' and scrolling right by {1} clicks{2}"' point' clicks' sleep ? " (with pauses between actions)" : null); " is 149.
Long Statement,JuliusSweetland.OptiKey.Services,MyGazePointService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,EventCallback,The length of the statement  "                    new DateTimeOffset(DateTime.UtcNow).ToUniversalTime())); //Event data does not include a useable timestamp as it would be meaningless " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,TobiiEyeXCalibrationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TobiiEyeXCalibrationService.cs,Calibrate,The length of the statement  "            var taskCompletionSource = new TaskCompletionSource<string>(); //Used to make this method awaitable on the InteractionRequest callback " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var yAdjustmentToBottom = distanceToBottomBoundary < 0 ? distanceToBottomBoundary : (amountInPx / Graphics.DipScalingFactorY).CoerceToUpperLimit(distanceToBottomBoundary); " is 171.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var yAdjustmentToTop = distanceToTopBoundary < 0 ? distanceToTopBoundary : (amountInPx / Graphics.DipScalingFactorY).CoerceToUpperLimit(distanceToTopBoundary); " is 159.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var xAdjustmentToLeft = distanceToLeftBoundary < 0 ? distanceToLeftBoundary : (amountInPx / Graphics.DipScalingFactorX).CoerceToUpperLimit(distanceToLeftBoundary); " is 163.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "            var xAdjustmentToRight = distanceToRightBoundary < 0 ? distanceToRightBoundary : (amountInPx / Graphics.DipScalingFactorX).CoerceToUpperLimit(distanceToRightBoundary); " is 167.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 176.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 172.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            var distanceToBottomBoundaryIfFloating = screenBoundsInDp.Bottom - (floatingSizeAndPosition.Top + floatingSizeAndPosition.Height); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            var distanceToRightBoundaryIfFloating = screenBoundsInDp.Right - (floatingSizeAndPosition.Left + floatingSizeAndPosition.Width); " is 128.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ResizeDockToSpecificHeight,The length of the statement  "            var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize()' heightAsPercentScreen); " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ResizeDockToCollapsed,The length of the statement  "            SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx); //PersistSizeAndPosition() is called indirectly by SetAppBarSizeAndPosition - no need to call explicitly " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ResizeDockToFull,The length of the statement  "            SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx); //PersistSizeAndPosition() is called indirectly by SetAppBarSizeAndPosition - no need to call explicitly " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Restore,The length of the statement  "            if (windowState != WindowStates.Maximised && windowState != WindowStates.Minimised && windowState != WindowStates.Hidden) return; " is 129.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height); " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width); " is 126.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height); " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width); " is 131.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height)); " is 228.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                    var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width)); " is 225.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)) " is 140.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100); " is 123.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 178.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)) " is 131.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100); " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen()); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)) " is 137.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100); " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                        (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)) " is 134.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The length of the statement  "                            saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen()); " is 174.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplyAndPersistSizeAndPosition,The length of the statement  "            Log.InfoFormat("ApplyAndPersistSizeAndPosition called with rect.Top:{0}' rect.Bottom:{1}' rect.Left:{2}' rect.Right:{3}"'  " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The length of the statement  "            var thicknessAsPercentage = (getFullDockThicknessAsPercentageOfScreen() * getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000; //Percentage of a percentage " is 171.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                    Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen); " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness(); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS  " is 125.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                    Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness); " is 146.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                    Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."' " is 151.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The length of the statement  "                        floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height); " is 185.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            Log.InfoFormat("Move called with direction:{0}' amountInPx:{1}' distanceToTopBoundaryIfFloating:{2}' distanceToBottomBoundaryIfFloating:{3}' distanceToLeftBoundaryIfFloating:{4}' distanceToRightBoundaryIfFloating: {5}' windowState:{6}' floatingSizeAndPosition.Top:{7}' floatingSizeAndPosition.Bottom:{8}' floatingSizeAndPosition.Left:{9}' floatingSizeAndPosition.Right:{10}"' " is 375.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "                direction' amountInPx' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating' windowState' floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right); " is 296.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            var yAdjustmentToBottom = distanceToBottomBoundaryIfFloating < 0 ? distanceToBottomBoundaryIfFloating : yAdjustmentAmount.CoerceToUpperLimit(distanceToBottomBoundaryIfFloating); " is 177.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            var yAdjustmentToTop = distanceToTopBoundaryIfFloating < 0 ? distanceToTopBoundaryIfFloating : yAdjustmentAmount.CoerceToUpperLimit(distanceToTopBoundaryIfFloating); " is 165.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            var xAdjustmentToLeft = distanceToLeftBoundaryIfFloating < 0 ? distanceToLeftBoundaryIfFloating : xAdjustmentAmount.CoerceToUpperLimit(distanceToLeftBoundaryIfFloating); " is 169.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The length of the statement  "            var xAdjustmentToRight = distanceToRightBoundaryIfFloating < 0 ? distanceToRightBoundaryIfFloating : xAdjustmentAmount.CoerceToUpperLimit(distanceToRightBoundaryIfFloating); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the statement  "            Log.InfoFormat("MoveToEdge called with direction:{0}' windowState:{1}' distanceToTopBoundaryIfFloating:{2}' distanceToBottomBoundaryIfFloating:{3}' distanceToLeftBoundaryIfFloating:{4}' distanceToRightBoundaryIfFloating: {5}"' " is 226.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The length of the statement  "                direction' windowState' distanceToTopBoundaryIfFloating' distanceToBottomBoundaryIfFloating' distanceToLeftBoundaryIfFloating' distanceToRightBoundaryIfFloating); " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("SetAppBarSizeAndPosition called with dockPosition:{0}' sizeAndPosition.Top:{1}' sizeAndPosition.Bottom:{2}' sizeAndPosition.Left:{3}' sizeAndPosition.Right:{4}"' " is 177.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("Screen bounds in px - Top:{0}' Left:{1}' Width:{2}' Height:{3}"' screenBoundsInPx.Top' screenBoundsInPx.Left' screenBoundsInPx.Width' screenBoundsInPx.Height); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("QueryPos returned barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' " is 120.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("Rect values adjusted (to compensate for other app bars) to barData.rc.Top:{0}' barData.rc.Bottom:{1}' barData.rc.Left:{2}' barData.rc.Right:{3}"' " is 161.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("finalDockLeftInDp:{0}' finalDockTopInDp:{1}' finalDockWidthInDp:{2}' finalDockHeightInDp:{3}"' finalDockLeftInDp' finalDockTopInDp' finalDockWidthInDp' finalDockHeightInDp); " is 189.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "            Log.InfoFormat("Screen bounds in dp - Top:{0}' Left:{1}' Width:{2}' Height:{3}"' screenBoundsInDp.Top' screenBoundsInDp.Left' screenBoundsInDp.Width' screenBoundsInDp.Height); " is 175.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "                Log.WarnFormat("Unable to set inappropriate window size - height:{0}' width:{1}; Width and height must all be positive values."' finalDockHeightInDp' finalDockWidthInDp); " is 170.
Long Statement,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The length of the statement  "      	    //as WPF will send a resize after a new appbar is added. We need to apply the received size & position after this happens. " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                    Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord); " is 173.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                                    var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove); " is 143.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                            dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word " is 155.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The length of the statement  "                            dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal " is 157.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "				Log.DebugFormat("Suppressing auto space before this capture as the KeyboardAndDictionaryLanguage {0} does not support auto space."' Settings.Default.KeyboardAndDictionaryLanguage); " is 180.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                && !(keyStateService.KeyDownStates[KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown() && char.IsLetter(newText.First()))) " is 133.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                //and the current capture is not a multi-key selection of a single letter (as we also want to inject the space for this scenario). " is 130.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                Log.Debug("Suppressing auto space before this capture as the user appears to be typing one char at a time. Also the last text change was not a suggestion' and the current capture is not a single letter captured with multi-key selection enabled."); " is 247.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                Log.Debug("Suppressing auto space before this capture as it follows a single character which is not a letter' or a closing or mid-sentence punctuation mark."); " is 159.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        Log.DebugFormat("In-progress word (including new text) can be combined/composed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWordWithNewProcessedText' adjustedAndComposedInProgressWordWithNewProcessedText); " is 237.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        //Remove changed in-progress word suffix string from external applications by outputting backspaces - the new suffix will be published seperately " is 145.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        for (var backCount = 0; backCount < countOfCharactersToRemove; backCount++) //Don't include newTextProcessed as it does not exist on Text yet " is 141.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The length of the statement  "                        newTextModified = adjustedAndComposedInProgressWordWithNewProcessedText.Substring(commonRootLength' adjustedAndComposedInProgressWordWithNewProcessedText.Length - commonRootLength); " is 181.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,AdjustInProgressWord,The length of the statement  "                            || (result.Length > index + 1 && result[index + 1].UnicodeCodePointRange() != UnicodeCodePointRanges.HangulVowel))) //Or next char exists and it is NOT a Hangul vowel " is 166.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SimulateKeyStrokesHasChanged,The length of the statement  "                Log.InfoFormat("No stored KeyboardOutputService state to restore for SimulateKeyStrokes={0} - defaulting state."' newStateKey); " is 127.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,GenerateSuggestions,The length of the statement  "                            suggestionChars[index] = char.ToUpper(suggestion[index]' Settings.Default.KeyboardAndDictionaryLanguage.ToCultureInfo()); " is 121.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,PublishKeyPress,The length of the statement  "                    Log.InfoFormat("Publishing '{0}' => as virtual key code {1}(0x{1:X}){2}{3}{4} (using VkKeyScanEx with keyboard layout:{5})"' " is 124.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SwapLastTextChangeForSuggestion,The length of the statement  "                    if (!Settings.Default.SuggestNextWords || !lastProcessedTextWasSuggestion && !string.IsNullOrEmpty(inProgressWord) && Char.IsLetterOrDigit(inProgressWord.Last())) " is 162.
Long Statement,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ApplyModifierKeys,The length of the statement  "                Log.DebugFormat("A key which prevents text capture is down - modifying '{0}' to null."' textToModify.ToPrintableString()); " is 122.
Long Statement,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The length of the statement  "                calRunner.Owner = parentWindow; //Setting the owner preserves the z-order of the parent and child windows if the focus is shifted away from the child window (otherwise the child popup will be hidden) " is 199.
Long Statement,JuliusSweetland.OptiKey.Static,Sound,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Static\Sound.cs,GetSoundLength,The length of the statement  "                    length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0))); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the statement  "                textBox.OnPropertyChanges<double>(FrameworkElement.ActualWidthProperty).Subscribe(_ => PositionCaret(textBox' caretElement)); " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.Behaviours,TextBoxBehaviours,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Behaviours\TextBoxBehaviours.cs,CaretElementChanged,The length of the statement  "                textBox.OnPropertyChanges<double>(FrameworkElement.ActualHeightProperty).Subscribe(_ => PositionCaret(textBox' caretElement)); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the statement  "                                    Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The length of the statement  "                                    Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1); " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKpath,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' ApplicationDataSubPath); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenTopLeftInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Left' screen.Bounds.Top)); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenBottomRightInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Right' screen.Bounds.Bottom)); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenTopLeftInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Left' screen.Bounds.Top)); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,SetSizeAndPosition,The length of the statement  "            var screenBottomRightInWpfCoords = window.GetTransformFromDevice().Transform(new Point(screen.Bounds.Right' screen.Bounds.Bottom)); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,OnLoaded,The length of the statement  "                .Where(cpp => IsOpen && SelectionProgress == 0) //Only set Point if popup is open and there isn't a current fixation in progress " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "                var dpiPoint = this.GetTransformFromDevice().Transform(pointCopy); //Offsets are in device independent pixels (DIP)' but the incoming Point is in pixels " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "                if(dpiPoint.X + Width > screenBottomRightInWpfCoords.X) //Width is set explicitly on the Popup from the Setting value. Cannot use ActualWidth as it will be 0 (Popup itself is not part of the visual tree) " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The length of the statement  "                if (dpiPoint.Y + Height > screenBottomRightInWpfCoords.Y) //Width is set explicitly on the Popup from the Setting value. Cannot use ActualWidth as it will be 0 (Popup itself is not part of the visual tree) " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "                            SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes) " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The length of the statement  "                            //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "            var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360; " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "                var range = (Settings.Default.ProgressIndicatorResizeStartProportion - Settings.Default.ProgressIndicatorResizeEndProportion) / 100d; " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The length of the statement  "                var range = (Settings.Default.ProgressIndicatorResizeEndProportion - Settings.Default.ProgressIndicatorResizeStartProportion) / 100d; " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "            //Display shift down text (upper case text) if shift is locked down' or down (but NOT when we are capturing a multi key selection) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,OnLoaded,The length of the statement  "            calculateDisplayShiftDownText(keyStateService.KeyDownStates[KeyValues.LeftShiftKey].Value' capturingStateManager.CapturingMultiKeySelection); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,AttachTextBlockHandlers,The length of the statement  "                var textBlockException = new XamlException("TextBlockScaler cannot find a TextBlock in its collection of child elements"); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,AttachTextBlockHandlers,The length of the statement  "            if (textBlock.IsLoaded) //Loaded event is fired from the root down; we may be here before the child TextBlock has loaded' so check " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,IsTextTrimmedAtThisFontSize,The length of the statement  "                MaxTextWidth = ActualWidth' //Limit the max width to the current width of this TextBlockScaler to produce wrapping behaviour " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,IsTextTrimmedAtThisFontSize,The length of the statement  "            return formattedText.Height > ActualHeight; //If the formatted text needs more height than we are providing then it would be trimmed " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,CalibrateWindowAction,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\CalibrateWindowAction.cs,Invoke,The length of the statement  "                Log.Error("CalibrateWindowAction was invoked' but the CalibrationService (dependency property) is not set. Calibration is not possible."); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "                var childWindow = new ManagementWindow(notificationWithServicesAndState.AudioService' notificationWithServicesAndState.DictionaryService); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.TriggerActions,OpenManagementWindowAction,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\TriggerActions\OpenManagementWindowAction.cs,Invoke,The length of the statement  "                    childWindow.Owner = parentWindow; //Setting the owner preserves the z-order of the parent and child windows when the focus is shifted back to the parent (otherwise the child popup will be hidden) " is 195.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,ProcessChangeKeyboardKeyValue,The length of the statement  "                DynamicKeyboard newDynKeyboard = new DynamicKeyboard(backAction' mainWindowManipulationService' keyStateService' keyValue.KeyboardFilename); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                                        RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume()); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                                keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                        && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage)) " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                        InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 122.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 120.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels); " is 124.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The length of the statement  "                    InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,ResetAndCleanupAfterMouseAction,The length of the statement  "                keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleServiceError,The length of the statement  "            Log.Error("Error event received from service. Raising ErrorNotificationRequest and playing ErrorSoundFile (from settings)"' exception); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleServiceError,The length of the statement  "            if (RaiseToastNotification(Resources.CRASH_TITLE' exception.Message' NotificationTypes.Error' () => inputService.RequestResume())) " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,RaiseAnyPendingErrorToastNotifications,The length of the statement  "                Log.ErrorFormat("Toast notification popup will be shown to display startup errors:{0}"' pendingErrorToastNotificationContent); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerFixationDefaultCompleteTimeInMs = Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds; " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerFixationCompleteTimesByIndividualKey = Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups = FromSetting(Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            KeySelectionTriggerIncompleteFixationTtlInMs = Settings.Default.KeySelectionTriggerIncompleteFixationTtl.TotalMilliseconds; " is 123.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            PointSelectionTriggerFixationLockOnTimeInMs = Settings.Default.PointSelectionTriggerFixationLockOnTime.TotalMilliseconds; " is 121.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,Load,The length of the statement  "            PointSelectionTriggerFixationCompleteTimeInMs = Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds; " is 125.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationLockOnTime = TimeSpan.FromMilliseconds(KeySelectionTriggerFixationLockOnTimeInMs); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime = TimeSpan.FromMilliseconds(KeySelectionTriggerFixationDefaultCompleteTimeInMs); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationCompleteTimesByIndividualKey = KeySelectionTriggerFixationCompleteTimesByIndividualKey; " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerFixationCompleteTimesByKeyValues = ToSetting(KeySelectionTriggerFixationCompleteTimeInMsByKeyValueGroups); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.KeySelectionTriggerIncompleteFixationTtl = TimeSpan.FromMilliseconds(KeySelectionTriggerIncompleteFixationTtlInMs); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.PointSelectionTriggerFixationLockOnTime = TimeSpan.FromMilliseconds(PointSelectionTriggerFixationLockOnTimeInMs); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.PointSelectionTriggerFixationCompleteTime = TimeSpan.FromMilliseconds(PointSelectionTriggerFixationCompleteTimeInMs); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.MultiKeySelectionFixationMinDwellTime = TimeSpan.FromMilliseconds(MultiKeySelectionFixationMinDwellTimeInMs); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ALPHA_1' KeyValues.Alpha1KeyboardKey' dictionary.ContainsKey(KeyValues.Alpha1KeyboardKey) ? dictionary[KeyValues.Alpha1KeyboardKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ALPHA_2' KeyValues.Alpha2KeyboardKey' dictionary.ContainsKey(KeyValues.Alpha2KeyboardKey) ? dictionary[KeyValues.Alpha2KeyboardKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BACK' KeyValues.BackFromKeyboardKey' dictionary.ContainsKey(KeyValues.BackFromKeyboardKey) ? dictionary[KeyValues.BackFromKeyboardKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONVERSATION_ALPHA_1' KeyValues.ConversationAlpha1KeyboardKey' dictionary.ContainsKey(KeyValues.ConversationAlpha1KeyboardKey) ? dictionary[KeyValues.ConversationAlpha1KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONVERSATION_ALPHA_2' KeyValues.ConversationAlpha2KeyboardKey' dictionary.ContainsKey(KeyValues.ConversationAlpha2KeyboardKey) ? dictionary[KeyValues.ConversationAlpha2KeyboardKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONVERSATION_NUMERIC_AND_SYMBOLS' KeyValues.ConversationNumericAndSymbolsKeyboardKey' dictionary.ContainsKey(KeyValues.ConversationNumericAndSymbolsKeyboardKey) ? dictionary[KeyValues.ConversationNumericAndSymbolsKeyboardKey] : (TimeSpan?)null)' " is 279.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CURRENCIES_1' KeyValues.Currencies1KeyboardKey' dictionary.ContainsKey(KeyValues.Currencies1KeyboardKey) ? dictionary[KeyValues.Currencies1KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CURRENCIES_2' KeyValues.Currencies2KeyboardKey' dictionary.ContainsKey(KeyValues.Currencies2KeyboardKey) ? dictionary[KeyValues.Currencies2KeyboardKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DIACRITICS_1' KeyValues.Diacritic1KeyboardKey' dictionary.ContainsKey(KeyValues.Diacritic1KeyboardKey) ? dictionary[KeyValues.Diacritic1KeyboardKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DIACRITICS_2' KeyValues.Diacritic2KeyboardKey' dictionary.ContainsKey(KeyValues.Diacritic2KeyboardKey) ? dictionary[KeyValues.Diacritic2KeyboardKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DIACRITICS_3' KeyValues.Diacritic3KeyboardKey' dictionary.ContainsKey(KeyValues.Diacritic3KeyboardKey) ? dictionary[KeyValues.Diacritic3KeyboardKey] : (TimeSpan?)null)' " is 202.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LANGUAGE_UPPER_CASE' KeyValues.LanguageKeyboardKey' dictionary.ContainsKey(KeyValues.LanguageKeyboardKey) ? dictionary[KeyValues.LanguageKeyboardKey] : (TimeSpan?)null)' " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MENU' KeyValues.MenuKeyboardKey' dictionary.ContainsKey(KeyValues.MenuKeyboardKey) ? dictionary[KeyValues.MenuKeyboardKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOUSE' KeyValues.MouseKeyboardKey' dictionary.ContainsKey(KeyValues.MouseKeyboardKey) ? dictionary[KeyValues.MouseKeyboardKey] : (TimeSpan?)null)' " is 180.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUMBERS_SYMBOLS_1' KeyValues.NumericAndSymbols1KeyboardKey' dictionary.ContainsKey(KeyValues.NumericAndSymbols1KeyboardKey) ? dictionary[KeyValues.NumericAndSymbols1KeyboardKey] : (TimeSpan?)null)' " is 231.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUMBERS_SYMBOLS_2' KeyValues.NumericAndSymbols2KeyboardKey' dictionary.ContainsKey(KeyValues.NumericAndSymbols2KeyboardKey) ? dictionary[KeyValues.NumericAndSymbols2KeyboardKey] : (TimeSpan?)null)' " is 231.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUMBERS_SYMBOLS_3' KeyValues.NumericAndSymbols3KeyboardKey' dictionary.ContainsKey(KeyValues.NumericAndSymbols3KeyboardKey) ? dictionary[KeyValues.NumericAndSymbols3KeyboardKey] : (TimeSpan?)null)' " is 231.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PHYSICAL_KEYS' KeyValues.PhysicalKeysKeyboardKey' dictionary.ContainsKey(KeyValues.PhysicalKeysKeyboardKey) ? dictionary[KeyValues.PhysicalKeysKeyboardKey] : (TimeSpan?)null)' " is 209.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SIZE_AND_POSITION' KeyValues.SizeAndPositionKeyboardKey' dictionary.ContainsKey(KeyValues.SizeAndPositionKeyboardKey) ? dictionary[KeyValues.SizeAndPositionKeyboardKey] : (TimeSpan?)null)' " is 222.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.COLLAPSE_DOCK' KeyValues.CollapseDockKey' dictionary.ContainsKey(KeyValues.CollapseDockKey) ? dictionary[KeyValues.CollapseDockKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOCK' KeyValues.ExpandDockKey' dictionary.ContainsKey(KeyValues.ExpandDockKey) ? dictionary[KeyValues.ExpandDockKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CATALAN_SPAIN' KeyValues.CatalanSpainKey' dictionary.ContainsKey(KeyValues.CatalanSpainKey) ? dictionary[KeyValues.CatalanSpainKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CROATIAN_CROATIA' KeyValues.CroatianCroatiaKey'dictionary.ContainsKey(KeyValues.CroatianCroatiaKey) ? dictionary[KeyValues.CroatianCroatiaKey] : (TimeSpan?) null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CZECH_CZECH_REPUBLIC' KeyValues.CzechCzechRepublicKey' dictionary.ContainsKey(KeyValues.CzechCzechRepublicKey) ? dictionary[KeyValues.CzechCzechRepublicKey] : (TimeSpan?) null)' " is 211.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DANISH_DENMARK' KeyValues.DanishDenmarkKey'dictionary.ContainsKey(KeyValues.DanishDenmarkKey) ? dictionary[KeyValues.DanishDenmarkKey] : (TimeSpan?) null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DUTCH_BELGIUM' KeyValues.DutchBelgiumKey' dictionary.ContainsKey(KeyValues.DutchBelgiumKey) ? dictionary[KeyValues.DutchBelgiumKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DUTCH_NETHERLANDS' KeyValues.DutchNetherlandsKey' dictionary.ContainsKey(KeyValues.DutchNetherlandsKey) ? dictionary[KeyValues.DutchNetherlandsKey] : (TimeSpan?)null)' " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ENGLISH_CANADA' KeyValues.EnglishCanadaKey' dictionary.ContainsKey(KeyValues.EnglishCanadaKey) ? dictionary[KeyValues.EnglishCanadaKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ENGLISH_UK' KeyValues.EnglishUKKey' dictionary.ContainsKey(KeyValues.EnglishUKKey) ? dictionary[KeyValues.EnglishUKKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ENGLISH_US' KeyValues.EnglishUSKey' dictionary.ContainsKey(KeyValues.EnglishUSKey) ? dictionary[KeyValues.EnglishUSKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.FRENCH_FRANCE' KeyValues.FrenchFranceKey' dictionary.ContainsKey(KeyValues.FrenchFranceKey) ? dictionary[KeyValues.FrenchFranceKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.GERMAN_GERMANY' KeyValues.GermanGermanyKey' dictionary.ContainsKey(KeyValues.GermanGermanyKey) ? dictionary[KeyValues.GermanGermanyKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.GREEK_GREECE' KeyValues.GreekGreeceKey' dictionary.ContainsKey(KeyValues.GreekGreeceKey) ? dictionary[KeyValues.GreekGreeceKey] : (TimeSpan?) null)' " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ITALIAN_ITALY' KeyValues.ItalianItalyKey' dictionary.ContainsKey(KeyValues.ItalianItalyKey) ? dictionary[KeyValues.ItalianItalyKey] : (TimeSpan?) null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.KOREAN_KOREA' KeyValues.KoreanKoreaKey' dictionary.ContainsKey(KeyValues.KoreanKoreaKey) ? dictionary[KeyValues.KoreanKoreaKey] : (TimeSpan?) null)' " is 182.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PORTUGUESE_PORTUGAL' KeyValues.PortuguesePortugalKey' dictionary.ContainsKey(KeyValues.PortuguesePortugalKey) ? dictionary[KeyValues.PortuguesePortugalKey] : (TimeSpan?) null)' " is 210.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RUSSIAN_RUSSIA' KeyValues.RussianRussiaKey' dictionary.ContainsKey(KeyValues.RussianRussiaKey) ? dictionary[KeyValues.RussianRussiaKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SLOVAK_SLOVAKIA' KeyValues.SlovakSlovakiaKey' dictionary.ContainsKey(KeyValues.SlovakSlovakiaKey) ? dictionary[KeyValues.SlovakSlovakiaKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SLOVENIAN_SLOVENIA' KeyValues.SlovenianSloveniaKey' dictionary.ContainsKey(KeyValues.SlovenianSloveniaKey) ? dictionary[KeyValues.SlovenianSloveniaKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SPANISH_SPAIN' KeyValues.SpanishSpainKey' dictionary.ContainsKey(KeyValues.SpanishSpainKey) ? dictionary[KeyValues.SpanishSpainKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.TURKISH_TURKEY' KeyValues.TurkishTurkeyKey' dictionary.ContainsKey(KeyValues.TurkishTurkeyKey) ? dictionary[KeyValues.TurkishTurkeyKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ADD_TO_DICTIONARY' KeyValues.AddToDictionaryKey' dictionary.ContainsKey(KeyValues.AddToDictionaryKey) ? dictionary[KeyValues.AddToDictionaryKey] : (TimeSpan?)null)' " is 198.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ATTENTION' KeyValues.AttentionKey' dictionary.ContainsKey(KeyValues.AttentionKey) ? dictionary[KeyValues.AttentionKey] : (TimeSpan?)null)' " is 172.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BACK_WORD' KeyValues.BackManyKey' dictionary.ContainsKey(KeyValues.BackManyKey) ? dictionary[KeyValues.BackManyKey] : (TimeSpan?)null)' " is 169.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BACK_ONE' KeyValues.BackOneKey' dictionary.ContainsKey(KeyValues.BackOneKey) ? dictionary[KeyValues.BackOneKey] : (TimeSpan?)null)' " is 165.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RE_CALIBRATE' KeyValues.CalibrateKey' dictionary.ContainsKey(KeyValues.CalibrateKey) ? dictionary[KeyValues.CalibrateKey] : (TimeSpan?)null)' " is 175.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CLEAR' KeyValues.ClearScratchpadKey' dictionary.ContainsKey(KeyValues.ClearScratchpadKey) ? dictionary[KeyValues.ClearScratchpadKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DECREASE_OPACITY' KeyValues.DecreaseOpacityKey' dictionary.ContainsKey(KeyValues.DecreaseOpacityKey) ? dictionary[KeyValues.DecreaseOpacityKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.INCREASE_OPACITY' KeyValues.IncreaseOpacityKey' dictionary.ContainsKey(KeyValues.IncreaseOpacityKey) ? dictionary[KeyValues.IncreaseOpacityKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MINIMISE' KeyValues.MinimiseKey' dictionary.ContainsKey(KeyValues.MinimiseKey) ? dictionary[KeyValues.MinimiseKey] : (TimeSpan?)null)' " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MULTI_KEY_SELECTION_UPPER_CASE' KeyValues.MultiKeySelectionIsOnKey' dictionary.ContainsKey(KeyValues.MultiKeySelectionIsOnKey) ? dictionary[KeyValues.MultiKeySelectionIsOnKey] : (TimeSpan?)null)' " is 229.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NO' KeyValues.NoQuestionResultKey' dictionary.ContainsKey(KeyValues.NoQuestionResultKey) ? dictionary[KeyValues.NoQuestionResultKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.QUIT' KeyValues.QuitKey' dictionary.ContainsKey(KeyValues.QuitKey) ? dictionary[KeyValues.QuitKey] : (TimeSpan?)null)' " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SLEEP' KeyValues.SleepKey' dictionary.ContainsKey(KeyValues.SleepKey) ? dictionary[KeyValues.SleepKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SPEAK' KeyValues.SpeakKey' dictionary.ContainsKey(KeyValues.SpeakKey) ? dictionary[KeyValues.SpeakKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.YES' KeyValues.YesQuestionResultKey' dictionary.ContainsKey(KeyValues.YesQuestionResultKey) ? dictionary[KeyValues.YesQuestionResultKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ALT' KeyValues.LeftAltKey' dictionary.ContainsKey(KeyValues.LeftAltKey) ? dictionary[KeyValues.LeftAltKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CTRL' KeyValues.LeftCtrlKey' dictionary.ContainsKey(KeyValues.LeftCtrlKey) ? dictionary[KeyValues.LeftCtrlKey] : (TimeSpan?)null)' " is 164.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHIFT' KeyValues.LeftShiftKey' dictionary.ContainsKey(KeyValues.LeftShiftKey) ? dictionary[KeyValues.LeftShiftKey] : (TimeSpan?)null)' " is 168.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.WIN' KeyValues.LeftWinKey' dictionary.ContainsKey(KeyValues.LeftWinKey) ? dictionary[KeyValues.LeftWinKey] : (TimeSpan?)null)' " is 160.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_CLICK' KeyValues.MouseLeftClickKey' dictionary.ContainsKey(KeyValues.MouseLeftClickKey) ? dictionary[KeyValues.MouseLeftClickKey] : (TimeSpan?)null)' " is 188.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_DOUBLE_CLICK' KeyValues.MouseLeftDoubleClickKey' dictionary.ContainsKey(KeyValues.MouseLeftDoubleClickKey) ? dictionary[KeyValues.MouseLeftDoubleClickKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_DOWN_UP' KeyValues.MouseLeftDownUpKey' dictionary.ContainsKey(KeyValues.MouseLeftDownUpKey) ? dictionary[KeyValues.MouseLeftDownUpKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MAGNETIC_CURSOR' KeyValues.MouseMagneticCursorKey' dictionary.ContainsKey(KeyValues.MouseMagneticCursorKey) ? dictionary[KeyValues.MouseMagneticCursorKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MIDDLE_CLICK' KeyValues.MouseMiddleClickKey' dictionary.ContainsKey(KeyValues.MouseMiddleClickKey) ? dictionary[KeyValues.MouseMiddleClickKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MIDDLE_DOWN_UP' KeyValues.MouseMiddleDownUpKey' dictionary.ContainsKey(KeyValues.MouseMiddleDownUpKey) ? dictionary[KeyValues.MouseMiddleDownUpKey] : (TimeSpan?)null)' " is 201.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_AMOUNT_IN_PIXEL' KeyValues.MouseMoveAmountInPixelsKey' dictionary.ContainsKey(KeyValues.MouseMoveAmountInPixelsKey) ? dictionary[KeyValues.MouseMoveAmountInPixelsKey] : (TimeSpan?)null)' " is 225.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN' KeyValues.MouseMoveToBottomKey' dictionary.ContainsKey(KeyValues.MouseMoveToBottomKey) ? dictionary[KeyValues.MouseMoveToBottomKey] : (TimeSpan?)null)' " is 196.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_TO' KeyValues.MouseMoveToKey' dictionary.ContainsKey(KeyValues.MouseMoveToKey) ? dictionary[KeyValues.MouseMoveToKey] : (TimeSpan?)null)' " is 176.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_LEFT' KeyValues.MouseMoveToLeftKey' dictionary.ContainsKey(KeyValues.MouseMoveToLeftKey) ? dictionary[KeyValues.MouseMoveToLeftKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_RIGHT' KeyValues.MouseMoveToRightKey' dictionary.ContainsKey(KeyValues.MouseMoveToRightKey) ? dictionary[KeyValues.MouseMoveToRightKey] : (TimeSpan?)null)' " is 194.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP' KeyValues.MouseMoveToTopKey' dictionary.ContainsKey(KeyValues.MouseMoveToTopKey) ? dictionary[KeyValues.MouseMoveToTopKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_CLICK' KeyValues.MouseRightClickKey' dictionary.ContainsKey(KeyValues.MouseRightClickKey) ? dictionary[KeyValues.MouseRightClickKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_DOWN_UP' KeyValues.MouseRightDownUpKey' dictionary.ContainsKey(KeyValues.MouseRightDownUpKey) ? dictionary[KeyValues.MouseRightDownUpKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CLICK_AND_DRAG' KeyValues.MouseDragKey' dictionary.ContainsKey(KeyValues.MouseDragKey) ? dictionary[KeyValues.MouseDragKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_CLICK' KeyValues.MouseMoveAndLeftClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndLeftClickKey) ? dictionary[KeyValues.MouseMoveAndLeftClickKey] : (TimeSpan?)null)' " is 209.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_DOUBLE_CLICK' KeyValues.MouseMoveAndLeftDoubleClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndLeftDoubleClickKey) ? dictionary[KeyValues.MouseMoveAndLeftDoubleClickKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MIDDLE_CLICK' KeyValues.MouseMoveAndMiddleClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndMiddleClickKey) ? dictionary[KeyValues.MouseMoveAndMiddleClickKey] : (TimeSpan?)null)' " is 217.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_CLICK' KeyValues.MouseMoveAndRightClickKey' dictionary.ContainsKey(KeyValues.MouseMoveAndRightClickKey) ? dictionary[KeyValues.MouseMoveAndRightClickKey] : (TimeSpan?)null)' " is 213.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_DOWN' KeyValues.MouseMoveAndScrollToBottomKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToBottomKey) ? dictionary[KeyValues.MouseMoveAndScrollToBottomKey] : (TimeSpan?)null)' " is 225.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_LEFT' KeyValues.MouseMoveAndScrollToLeftKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToLeftKey) ? dictionary[KeyValues.MouseMoveAndScrollToLeftKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_RIGHT' KeyValues.MouseMoveAndScrollToRightKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToRightKey) ? dictionary[KeyValues.MouseMoveAndScrollToRightKey] : (TimeSpan?)null)' " is 223.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_UP' KeyValues.MouseMoveAndScrollToTopKey' dictionary.ContainsKey(KeyValues.MouseMoveAndScrollToTopKey) ? dictionary[KeyValues.MouseMoveAndScrollToTopKey] : (TimeSpan?)null)' " is 214.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCROLL_AMOUNT_IN_CLICKS' KeyValues.MouseScrollAmountInClicksKey' dictionary.ContainsKey(KeyValues.MouseScrollAmountInClicksKey) ? dictionary[KeyValues.MouseScrollAmountInClicksKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MAGNIFIER' KeyValues.MouseMagnifierKey' dictionary.ContainsKey(KeyValues.MouseMagnifierKey) ? dictionary[KeyValues.MouseMagnifierKey] : (TimeSpan?)null)' " is 187.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.REPEAT_LAST' KeyValues.RepeatLastMouseActionKey' dictionary.ContainsKey(KeyValues.RepeatLastMouseActionKey) ? dictionary[KeyValues.RepeatLastMouseActionKey] : (TimeSpan?)null)' " is 210.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOWN_AND_LEFT' KeyValues.ExpandToBottomAndLeftKey' dictionary.ContainsKey(KeyValues.ExpandToBottomAndLeftKey) ? dictionary[KeyValues.ExpandToBottomAndLeftKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOWN_AND_RIGHT' KeyValues.ExpandToBottomAndRightKey' dictionary.ContainsKey(KeyValues.ExpandToBottomAndRightKey) ? dictionary[KeyValues.ExpandToBottomAndRightKey] : (TimeSpan?)null)' " is 223.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_DOWN' KeyValues.ExpandToBottomKey' dictionary.ContainsKey(KeyValues.ExpandToBottomKey) ? dictionary[KeyValues.ExpandToBottomKey] : (TimeSpan?)null)' " is 189.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_LEFT' KeyValues.ExpandToLeftKey' dictionary.ContainsKey(KeyValues.ExpandToLeftKey) ? dictionary[KeyValues.ExpandToLeftKey] : (TimeSpan?)null)' " is 183.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_RIGHT' KeyValues.ExpandToRightKey' dictionary.ContainsKey(KeyValues.ExpandToRightKey) ? dictionary[KeyValues.ExpandToRightKey] : (TimeSpan?)null)' " is 187.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_UP_AND_LEFT' KeyValues.ExpandToTopAndLeftKey' dictionary.ContainsKey(KeyValues.ExpandToTopAndLeftKey) ? dictionary[KeyValues.ExpandToTopAndLeftKey] : (TimeSpan?)null)' " is 208.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_UP_AND_RIGHT' KeyValues.ExpandToTopAndRightKey' dictionary.ContainsKey(KeyValues.ExpandToTopAndRightKey) ? dictionary[KeyValues.ExpandToTopAndRightKey] : (TimeSpan?)null)' " is 212.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.EXPAND_UP' KeyValues.ExpandToTopKey' dictionary.ContainsKey(KeyValues.ExpandToTopKey) ? dictionary[KeyValues.ExpandToTopKey] : (TimeSpan?)null)' " is 178.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ADJUST_AMOUNT_IN_PIXELS' KeyValues.MoveAndResizeAdjustmentAmountKey' dictionary.ContainsKey(KeyValues.MoveAndResizeAdjustmentAmountKey) ? dictionary[KeyValues.MoveAndResizeAdjustmentAmountKey] : (TimeSpan?)null)' " is 246.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_DOWN_AND_LEFT' KeyValues.MoveToBottomAndLeftBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndLeftBoundariesKey) ? dictionary[KeyValues.MoveToBottomAndLeftBoundariesKey] : (TimeSpan?)null)' " is 241.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN_AND_LEFT' KeyValues.MoveToBottomAndLeftKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndLeftKey) ? dictionary[KeyValues.MoveToBottomAndLeftKey] : (TimeSpan?)null)' " is 211.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_DOWN_AND_RIGHT' KeyValues.MoveToBottomAndRightBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndRightBoundariesKey) ? dictionary[KeyValues.MoveToBottomAndRightBoundariesKey] : (TimeSpan?)null)' " is 245.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN_AND_RIGHT' KeyValues.MoveToBottomAndRightKey' dictionary.ContainsKey(KeyValues.MoveToBottomAndRightKey) ? dictionary[KeyValues.MoveToBottomAndRightKey] : (TimeSpan?)null)' " is 215.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_DOWN' KeyValues.MoveToBottomBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToBottomBoundaryKey) ? dictionary[KeyValues.MoveToBottomBoundaryKey] : (TimeSpan?)null)' " is 205.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_DOWN' KeyValues.MoveToBottomKey' dictionary.ContainsKey(KeyValues.MoveToBottomKey) ? dictionary[KeyValues.MoveToBottomKey] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_LEFT' KeyValues.MoveToLeftBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToLeftBoundaryKey) ? dictionary[KeyValues.MoveToLeftBoundaryKey] : (TimeSpan?)null)' " is 199.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_LEFT' KeyValues.MoveToLeftKey' dictionary.ContainsKey(KeyValues.MoveToLeftKey) ? dictionary[KeyValues.MoveToLeftKey] : (TimeSpan?)null)' " is 175.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_RIGHT' KeyValues.MoveToRightBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToRightBoundaryKey) ? dictionary[KeyValues.MoveToRightBoundaryKey] : (TimeSpan?)null)' " is 203.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_RIGHT' KeyValues.MoveToRightKey' dictionary.ContainsKey(KeyValues.MoveToRightKey) ? dictionary[KeyValues.MoveToRightKey] : (TimeSpan?)null)' " is 179.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_UP_AND_LEFT' KeyValues.MoveToTopAndLeftBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToTopAndLeftBoundariesKey) ? dictionary[KeyValues.MoveToTopAndLeftBoundariesKey] : (TimeSpan?)null)' " is 230.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP_AND_LEFT' KeyValues.MoveToTopAndLeftKey' dictionary.ContainsKey(KeyValues.MoveToTopAndLeftKey) ? dictionary[KeyValues.MoveToTopAndLeftKey] : (TimeSpan?)null)' " is 200.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_UP_AND_RIGHT' KeyValues.MoveToTopAndRightBoundariesKey' dictionary.ContainsKey(KeyValues.MoveToTopAndRightBoundariesKey) ? dictionary[KeyValues.MoveToTopAndRightBoundariesKey] : (TimeSpan?)null)' " is 234.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP_AND_RIGHT' KeyValues.MoveToTopAndRightKey' dictionary.ContainsKey(KeyValues.MoveToTopAndRightKey) ? dictionary[KeyValues.MoveToTopAndRightKey] : (TimeSpan?)null)' " is 204.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.JUMP_UP' KeyValues.MoveToTopBoundaryKey' dictionary.ContainsKey(KeyValues.MoveToTopBoundaryKey) ? dictionary[KeyValues.MoveToTopBoundaryKey] : (TimeSpan?)null)' " is 194.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.MOVE_UP' KeyValues.MoveToTopKey' dictionary.ContainsKey(KeyValues.MoveToTopKey) ? dictionary[KeyValues.MoveToTopKey] : (TimeSpan?)null)' " is 170.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_UP_AND_RIGHT' KeyValues.ShrinkFromBottomAndLeftKey' dictionary.ContainsKey(KeyValues.ShrinkFromBottomAndLeftKey) ? dictionary[KeyValues.ShrinkFromBottomAndLeftKey] : (TimeSpan?)null)' " is 224.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_UP_AND_LEFT' KeyValues.ShrinkFromBottomAndRightKey' dictionary.ContainsKey(KeyValues.ShrinkFromBottomAndRightKey) ? dictionary[KeyValues.ShrinkFromBottomAndRightKey] : (TimeSpan?)null)' " is 226.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_UP' KeyValues.ShrinkFromBottomKey' dictionary.ContainsKey(KeyValues.ShrinkFromBottomKey) ? dictionary[KeyValues.ShrinkFromBottomKey] : (TimeSpan?)null)' " is 193.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_RIGHT' KeyValues.ShrinkFromLeftKey' dictionary.ContainsKey(KeyValues.ShrinkFromLeftKey) ? dictionary[KeyValues.ShrinkFromLeftKey] : (TimeSpan?)null)' " is 190.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_LEFT' KeyValues.ShrinkFromRightKey' dictionary.ContainsKey(KeyValues.ShrinkFromRightKey) ? dictionary[KeyValues.ShrinkFromRightKey] : (TimeSpan?)null)' " is 192.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_DOWN_AND_RIGHT' KeyValues.ShrinkFromTopAndLeftKey' dictionary.ContainsKey(KeyValues.ShrinkFromTopAndLeftKey) ? dictionary[KeyValues.ShrinkFromTopAndLeftKey] : (TimeSpan?)null)' " is 217.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_DOWN_AND_LEFT' KeyValues.ShrinkFromTopAndRightKey' dictionary.ContainsKey(KeyValues.ShrinkFromTopAndRightKey) ? dictionary[KeyValues.ShrinkFromTopAndRightKey] : (TimeSpan?)null)' " is 219.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SHRINK_DOWN' KeyValues.ShrinkFromTopKey' dictionary.ContainsKey(KeyValues.ShrinkFromTopKey) ? dictionary[KeyValues.ShrinkFromTopKey] : (TimeSpan?)null)' " is 186.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DOWN_ARROW' KeyValues.ArrowDownKey' dictionary.ContainsKey(KeyValues.ArrowDownKey) ? dictionary[KeyValues.ArrowDownKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.LEFT_ARROW' KeyValues.ArrowLeftKey' dictionary.ContainsKey(KeyValues.ArrowLeftKey) ? dictionary[KeyValues.ArrowLeftKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.RIGHT_ARROW' KeyValues.ArrowRightKey' dictionary.ContainsKey(KeyValues.ArrowRightKey) ? dictionary[KeyValues.ArrowRightKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.UP_ARROW' KeyValues.ArrowUpKey' dictionary.ContainsKey(KeyValues.ArrowUpKey) ? dictionary[KeyValues.ArrowUpKey] : (TimeSpan?)null)' " is 165.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.BREAK' KeyValues.BreakKey' dictionary.ContainsKey(KeyValues.BreakKey) ? dictionary[KeyValues.BreakKey] : (TimeSpan?)null)' " is 156.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.DEL' KeyValues.DeleteKey' dictionary.ContainsKey(KeyValues.DeleteKey) ? dictionary[KeyValues.DeleteKey] : (TimeSpan?)null)' " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.END' KeyValues.EndKey' dictionary.ContainsKey(KeyValues.EndKey) ? dictionary[KeyValues.EndKey] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.ESC' KeyValues.EscapeKey' dictionary.ContainsKey(KeyValues.EscapeKey) ? dictionary[KeyValues.EscapeKey] : (TimeSpan?)null)' " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F10' KeyValues.F10Key' dictionary.ContainsKey(KeyValues.F10Key) ? dictionary[KeyValues.F10Key] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F11' KeyValues.F11Key' dictionary.ContainsKey(KeyValues.F11Key) ? dictionary[KeyValues.F11Key] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F12' KeyValues.F12Key' dictionary.ContainsKey(KeyValues.F12Key) ? dictionary[KeyValues.F12Key] : (TimeSpan?)null)' " is 148.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F1' KeyValues.F1Key' dictionary.ContainsKey(KeyValues.F1Key) ? dictionary[KeyValues.F1Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F2' KeyValues.F2Key' dictionary.ContainsKey(KeyValues.F2Key) ? dictionary[KeyValues.F2Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F3' KeyValues.F3Key' dictionary.ContainsKey(KeyValues.F3Key) ? dictionary[KeyValues.F3Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F4' KeyValues.F4Key' dictionary.ContainsKey(KeyValues.F4Key) ? dictionary[KeyValues.F4Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F5' KeyValues.F5Key' dictionary.ContainsKey(KeyValues.F5Key) ? dictionary[KeyValues.F5Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F6' KeyValues.F6Key' dictionary.ContainsKey(KeyValues.F6Key) ? dictionary[KeyValues.F6Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F7' KeyValues.F7Key' dictionary.ContainsKey(KeyValues.F7Key) ? dictionary[KeyValues.F7Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F8' KeyValues.F8Key' dictionary.ContainsKey(KeyValues.F8Key) ? dictionary[KeyValues.F8Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.F9' KeyValues.F9Key' dictionary.ContainsKey(KeyValues.F9Key) ? dictionary[KeyValues.F9Key] : (TimeSpan?)null)' " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.HOME' KeyValues.HomeKey' dictionary.ContainsKey(KeyValues.HomeKey) ? dictionary[KeyValues.HomeKey] : (TimeSpan?)null)' " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.INS' KeyValues.InsertKey' dictionary.ContainsKey(KeyValues.InsertKey) ? dictionary[KeyValues.InsertKey] : (TimeSpan?)null)' " is 157.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.CONTEXTUAL_MENU_KEY' KeyValues.MenuKey' dictionary.ContainsKey(KeyValues.MenuKey) ? dictionary[KeyValues.MenuKey] : (TimeSpan?)null)' " is 167.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NUM_LK' KeyValues.NumberLockKey' dictionary.ContainsKey(KeyValues.NumberLockKey) ? dictionary[KeyValues.NumberLockKey] : (TimeSpan?)null)' " is 172.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PG_DN' KeyValues.PgDnKey' dictionary.ContainsKey(KeyValues.PgDnKey) ? dictionary[KeyValues.PgDnKey] : (TimeSpan?)null)' " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PG_UP' KeyValues.PgUpKey' dictionary.ContainsKey(KeyValues.PgUpKey) ? dictionary[KeyValues.PgUpKey] : (TimeSpan?)null)' " is 153.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PRNT_SCR' KeyValues.PrintScreenKey' dictionary.ContainsKey(KeyValues.PrintScreenKey) ? dictionary[KeyValues.PrintScreenKey] : (TimeSpan?)null)' " is 177.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SCRN_LK' KeyValues.ScrollLockKey' dictionary.ContainsKey(KeyValues.ScrollLockKey) ? dictionary[KeyValues.ScrollLockKey] : (TimeSpan?)null)' " is 173.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.NEXT' KeyValues.NextSuggestionsKey' dictionary.ContainsKey(KeyValues.NextSuggestionsKey) ? dictionary[KeyValues.NextSuggestionsKey] : (TimeSpan?)null)' " is 185.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.PREV' KeyValues.PreviousSuggestionsKey' dictionary.ContainsKey(KeyValues.PreviousSuggestionsKey) ? dictionary[KeyValues.PreviousSuggestionsKey] : (TimeSpan?)null)' " is 197.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_1' KeyValues.Suggestion1Key' dictionary.ContainsKey(KeyValues.Suggestion1Key) ? dictionary[KeyValues.Suggestion1Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_2' KeyValues.Suggestion2Key' dictionary.ContainsKey(KeyValues.Suggestion2Key) ? dictionary[KeyValues.Suggestion2Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_3' KeyValues.Suggestion3Key' dictionary.ContainsKey(KeyValues.Suggestion3Key) ? dictionary[KeyValues.Suggestion3Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_4' KeyValues.Suggestion4Key' dictionary.ContainsKey(KeyValues.Suggestion4Key) ? dictionary[KeyValues.Suggestion4Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_5' KeyValues.Suggestion5Key' dictionary.ContainsKey(KeyValues.Suggestion5Key) ? dictionary[KeyValues.Suggestion5Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,FromSetting,The length of the statement  "                    new KeyValueAndTimeSpan(Resources.SUGGESTION_6' KeyValues.Suggestion6Key' dictionary.ContainsKey(KeyValues.Suggestion6Key) ? dictionary[KeyValues.Suggestion6Key] : (TimeSpan?)null)' " is 181.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,Load,The length of the statement  "            MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness = Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness; " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.ViewModels.Management,VisualsViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\VisualsViewModel.cs,ApplyChanges,The length of the statement  "            Settings.Default.MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness = MainWindowCollapsedDockThicknessAsPercentageOfFullDockThickness; " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Catalan,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Catalan\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/catalan/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Catalan,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Catalan\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/catalan/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,ConversationConfirm,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\ConversationConfirm.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/conversationconfirm.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Language,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Language.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/language.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/dynamickeyboard.xaml"' System.UriKind.Relative); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/dynamickeyboardselector.xaml"' System.UriKind.Relative); " is 146.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Minimised,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Minimised.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/minimised.xaml"' System.UriKind.Relative); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Mouse,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Mouse.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/mouse.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,WebBrowsing,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\WebBrowsing.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/webbrowsing.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,SizeAndPosition,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\SizeAndPosition.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/sizeandposition.xaml"' System.UriKind.Relative); " is 138.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Menu,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Menu.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/menu.xaml"' System.UriKind.Relative); " is 127.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Diacritics3,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Diacritics3.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/diacritics3.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Diacritics2,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Diacritics2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/diacritics2.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Diacritics1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Diacritics1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/diacritics1.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Currencies2,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Currencies2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/currencies2.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,NumericAndSymbols1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\NumericAndSymbols1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/numericandsymbols1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,Currencies1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\Currencies1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/currencies1.xaml"' System.UriKind.Relative); " is 134.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,PhysicalKeys,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\PhysicalKeys.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/physicalkeys.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,NumericAndSymbols3,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\NumericAndSymbols3.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/numericandsymbols3.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,YesNoQuestion,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\YesNoQuestion.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/yesnoquestion.xaml"' System.UriKind.Relative); " is 136.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,NumericAndSymbols2,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\NumericAndSymbols2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/numericandsymbols2.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,ConversationNumericAndSymbols,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\ConversationNumericAndSymbols.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/common/conversationnumericandsymbols.xaml"' System.UriKind.Relative); " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Czech,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Czech\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/czech/alpha1.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Czech,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Czech\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/czech/conversationalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Danish,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Danish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/danish/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Danish,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Danish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/danish/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,CommuniKate,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\CommuniKate.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/communikate.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,AlphabeticalAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\AlphabeticalAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/alphabeticalalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,AlphabeticalConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\AlphabeticalConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/alphabeticalconversationalpha1.xaml" + " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,SimplifiedConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\SimplifiedConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/simplifiedconversationalpha1.xaml"' System.UriKind.Relative); " is 152.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,SimplifiedAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\SimplifiedAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/simplifiedalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.English,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\English\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/english/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,Alpha2,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Korean\Alpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/alpha2.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Korean\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,ConversationAlpha2,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Korean\ConversationAlpha2.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/conversationalpha2.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Korean,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Korean\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/korean/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Portuguese,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Portuguese\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/portuguese/alpha1.xaml"' System.UriKind.Relative); " is 133.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Portuguese,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Portuguese\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/portuguese/conversationalpha1.xaml"' System.UriKind.Relative); " is 145.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovak,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Slovak\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovak/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovak,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Slovak\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovak/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovenian,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Slovenian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovenian/alpha1.xaml"' System.UriKind.Relative); " is 132.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Slovenian,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Slovenian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/slovenian/conversationalpha1.xaml"' System.UriKind.Relative); " is 144.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Croatian,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Croatian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/croatian/alpha1.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Croatian,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Croatian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/croatian/conversationalpha1.xaml"' System.UriKind.Relative); " is 143.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,BelgiumAlpha,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Dutch\BelgiumAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/belgiumalpha1.xaml"' System.UriKind.Relative); " is 135.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,NetherlandsAlpha,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Dutch\NetherlandsAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/netherlandsalpha1.xaml"' System.UriKind.Relative); " is 139.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,BelgiumConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Dutch\BelgiumConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/belgiumconversationalpha1.xaml"' System.UriKind.Relative); " is 147.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Dutch,NetherlandsConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Dutch\NetherlandsConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/dutch/netherlandsconversationalpha1.xaml"' System.UriKind.Relative); " is 151.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Italian,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Italian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/italian/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Italian,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Italian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/italian/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Turkish,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Turkish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/turkish/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Turkish,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Turkish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/turkish/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Greek,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Greek\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/greek/alpha1.xaml"' System.UriKind.Relative); " is 128.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Greek,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Greek\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/greek/conversationalpha1.xaml"' System.UriKind.Relative); " is 140.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Russian,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Russian\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/russian/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Russian,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Russian\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/russian/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.French,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\French\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/french/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.French,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\French\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/french/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\German\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/alpha1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.German,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\German\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/german/conversationalpha1.xaml"' System.UriKind.Relative); " is 141.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Spanish,Alpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Spanish\Alpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/spanish/alpha1.xaml"' System.UriKind.Relative); " is 130.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Keyboards.Spanish,ConversationAlpha1,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Spanish\ConversationAlpha1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/keyboards/spanish/conversationalpha1.xaml"' System.UriKind.Relative); " is 142.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Management,OtherView,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Management\OtherView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/management/otherview.xaml"' System.UriKind.Relative); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.Views.Management,DictionaryView,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Management\DictionaryView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/views/management/dictionaryview.xaml"' System.UriKind.Relative); " is 131.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,ConfirmationWindow,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\ConfirmationWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/OptiKey;component/ui/windows/confirmationwindow.xaml"' System.UriKind.Relative); " is 126.
Long Statement,JuliusSweetland.OptiKey.UI.Windows,MainWindow,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\MainWindow.xaml.cs,Quit,The length of the statement  "            if (MessageBox.Show(Properties.Resources.QUIT_MESSAGE' Properties.Resources.QUIT' MessageBoxButton.YesNo) == MessageBoxResult.Yes) " is 130.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,PresageInstallationProblemsDetected,The conditional expression  "(osBitness == "64-Bit" && presagePath != @"C:\Program Files (x86)\presage")                      || (osBitness == "32-Bit" && presagePath != @"C:\Program Files\presage")"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The conditional expression  "ignoreSingleTrailingSpace                  && input.Length >= 2                  && input[input.Length - 1].ToCharCategory() == CharCategories.Space                  && input[input.Length - 2].ToCharCategory() == CharCategories.LetterOrDigitOrSymbolOrPunctuation"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,InProgressWord,The conditional expression  "!string.IsNullOrWhiteSpace(input)                  && cursorIndex > 0                  && cursorIndex <= input.Length                  && !char.IsWhiteSpace(input[cursorIndex-1])"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The conditional expression  "MultiKeySelectionSupported                                  && keyStateService.KeyEnabledStates[KeyValues.MultiKeySelectionIsOnKey] //It is possible for MultiKeySelectionIsOnKey to be down/locked down even though it is disabled - check for this                                  && keyStateService.KeyDownStates[KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown()                                  && triggerSignal.PointAndKeyValue.KeyValue != null                                  && KeyValues.MultiKeySelectionKeys.Contains(triggerSignal.PointAndKeyValue.KeyValue)                                  && !KeyValues.CombiningKeys.Any(key => keyStateService.KeyDownStates[key].Value.IsDownOrLockedDown())"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,ProcessSelectionTrigger,The conditional expression  "(triggerSignal.Signal >= 1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextHigh)                      || (triggerSignal.Signal <= -1 && Settings.Default.MultiKeySelectionTriggerStopSignal == TriggerStopSignals.NextLow)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,SampleCallback,The conditional expression  "!double.IsNaN(leftX) && leftX > 0                      && !double.IsNaN(leftY) && leftY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,SampleCallback,The conditional expression  "!double.IsNaN(rightX) && rightX > 0                      && !double.IsNaN(rightY) && rightY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,MyGazePointService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\MyGazePointService.cs,EventCallback,The conditional expression  "pointEvent != null                  && !double.IsNaN(eventData.positionX)                  && eventData.positionX > 0                  && !double.IsNaN(eventData.positionY)                  && eventData.positionY > 0"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The conditional expression  "dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The conditional expression  "dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The conditional expression  "floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessText,The conditional expression  "lastProcessedText.Length == 1                  && newText.Length == 1                  && !lastProcessedTextWasSuggestion                  && !(keyStateService.KeyDownStates[KeyValues.MultiKeySelectionIsOnKey].Value.IsDownOrLockedDown() && char.IsLetter(newText.First()))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,AdjustInProgressWord,The conditional expression  "result[index - 1].UnicodeCodePointRange() == UnicodeCodePointRanges.HangulVowel //Previous char is a Hangul vowel                              && (result.Length <= index + 1 //There isn't a char after this one                              || (result.Length > index + 1 && result[index + 1].UnicodeCodePointRange() != UnicodeCodePointRanges.HangulVowel))"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SwapLastTextChangeForSuggestion,The conditional expression  "!Settings.Default.SuggestNextWords || !lastProcessedTextWasSuggestion && !string.IsNullOrEmpty(inProgressWord) && Char.IsLetterOrDigit(inProgressWord.Last())"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,SwapText,The conditional expression  "!string.IsNullOrEmpty(textToSwapOut)                  && !string.IsNullOrEmpty(textToSwapIn)                  && Text != null                  && Text.Length >= textToSwapOut.Length"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,AutoAddSpace,The conditional expression  "Settings.Default.AutoAddSpace                  && Text != null                  && Text.Any()                  && !suppressNextAutoSpace"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.Services,TheEyeTribePointService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribePointService.cs,OnGazeUpdate,The conditional expression  "GazeManager.Instance.IsCalibrated                  && pointEvent != null                  && !double.IsNaN(data.SmoothedCoordinates.X)                  && !double.IsNaN(data.SmoothedCoordinates.Y)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,TranslateMagnifiedSelectionPoint,The conditional expression  "imagePoint.X >= 0 && imagePoint.X < imageWidth                  && imagePoint.Y >= 0 && imagePoint.Y < imageHeight"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,CalculatePosition,The conditional expression  "IsOpen                  && pointCopy.X >= screenTopLeft.X                  && pointCopy.X <= screenBottomRight.X                  && pointCopy.Y >= screenTopLeft.Y                  && pointCopy.Y <= screenBottomRight.Y"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The conditional expression  "canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,TextBlockScaler,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\TextBlockScaler.cs,CalculateTextBlockFontSize,The conditional expression  "fontSize > 0                     && IsTextTrimmedAtThisFontSize(fontSize)                     && (MinFontSize == null || fontSize > MinFontSize.Value)"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,TraverseAllKeysAndBuildPointToKeyValueMap,The conditional expression  "key.IsVisible                      && PresentationSource.FromVisual(key) != null                      && key.Value != null                      && key.Value.HasContent()"  is complex.
Complex Conditional,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,SetupInputServiceEventHandlers,The conditional expression  "SelectionMode == SelectionModes.Key                      && (singleKeyValue != null || (multiKeySelection != null && multiKeySelection.Any()))"  is complex.
Empty Catch Block,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,HandleCorruptSettings,The method has an empty catch block.
Empty Catch Block,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,ProcessChangeKeyboardKeyValue,The method has an empty catch block.
Empty Catch Block,JuliusSweetland.OptiKey.UI.ViewModels,ManagementViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\ManagementViewModel.cs,Ok,The method has an empty catch block.
Magic Number,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The following statement contains a magic number: if (ignoreSingleTrailingSpace                  && input.Length >= 2                  && input[input.Length - 1].ToCharCategory() == CharCategories.Space                  && input[input.Length - 2].ToCharCategory() == CharCategories.LetterOrDigitOrSymbolOrPunctuation)              {                  count = 1;              }
Magic Number,JuliusSweetland.OptiKey.Extensions,StringExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Extensions\StringExtensions.cs,CountBackToLastCharCategoryBoundary,The following statement contains a magic number: if (ignoreSingleTrailingSpace                  && input.Length >= 2                  && input[input.Length - 1].ToCharCategory() == CharCategories.Space                  && input[input.Length - 2].ToCharCategory() == CharCategories.LetterOrDigitOrSymbolOrPunctuation)              {                  count = 1;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 127) ^ (Key != null ? Key.GetHashCode() : 0);                  hash = (hash * 127) ^ (Type.GetHashCode());                  hash = (hash * 127) ^ (DurationMs.GetHashCode());                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 127) ^ (Key != null ? Key.GetHashCode() : 0);                  hash = (hash * 127) ^ (Type.GetHashCode());                  hash = (hash * 127) ^ (DurationMs.GetHashCode());                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 127) ^ (Key != null ? Key.GetHashCode() : 0);                  hash = (hash * 127) ^ (Type.GetHashCode());                  hash = (hash * 127) ^ (DurationMs.GetHashCode());                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyPressKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyPressKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 127) ^ (Key != null ? Key.GetHashCode() : 0);                  hash = (hash * 127) ^ (Type.GetHashCode());                  hash = (hash * 127) ^ (DurationMs.GetHashCode());                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 389) ^ (KeyboardFilename != null ? KeyboardFilename.GetHashCode() : 0);                  hash = (hash * 7) ^ BuiltInKeyboard.GetHashCode();                  hash = (hash * 13) ^ Replace.GetHashCode();                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 389) ^ (KeyboardFilename != null ? KeyboardFilename.GetHashCode() : 0);                  hash = (hash * 7) ^ BuiltInKeyboard.GetHashCode();                  hash = (hash * 13) ^ Replace.GetHashCode();                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 389) ^ (KeyboardFilename != null ? KeyboardFilename.GetHashCode() : 0);                  hash = (hash * 7) ^ BuiltInKeyboard.GetHashCode();                  hash = (hash * 13) ^ Replace.GetHashCode();                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,ChangeKeyboardKeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\ChangeKeyboardKeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = (hash * 389) ^ (KeyboardFilename != null ? KeyboardFilename.GetHashCode() : 0);                  hash = (hash * 7) ^ BuiltInKeyboard.GetHashCode();                  hash = (hash * 13) ^ Replace.GetHashCode();                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hash = (hash * 397) ^ KeyValue.GetHashCode(); //Struct so not nullable                  hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hash = (hash * 397) ^ KeyValue.GetHashCode(); //Struct so not nullable                  hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hash = (hash * 397) ^ KeyValue.GetHashCode(); //Struct so not nullable                  hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValueAndTimeSpan,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValueAndTimeSpan.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (Name != null ? Name.GetHashCode() : 0);                  hash = (hash * 397) ^ KeyValue.GetHashCode(); //Struct so not nullable                  hash = (hash * 397) ^ (TimeSpanTotalMilliseconds != null ? TimeSpanTotalMilliseconds.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode() : 0);                  hash = (hash * 397) ^ (String != null ? String.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode() : 0);                  hash = (hash * 397) ^ (String != null ? String.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Models,KeyValue,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Models\KeyValue.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 13;                  hash = (hash * 397) ^ (FunctionKey != null ? FunctionKey.GetHashCode() : 0);                  hash = (hash * 397) ^ (String != null ? String.GetHashCode() : 0);                  return hash;              }
Magic Number,JuliusSweetland.OptiKey.Native,PInvoke,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Native\PInvoke.cs,GetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)              {                  return GetWindowLong32(hWnd' nIndex);              }
Magic Number,JuliusSweetland.OptiKey.Services.Audio,SoundPlayerEx,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\Audio\SoundPlayerEx.cs,PlayAsync,The following statement contains a magic number: try              {                  await Task.Run(() =>                  {                      try                      {                          double lenMs = Sound.GetSoundLength(SoundLocation);                          DateTime stopAt = DateTime.Now.AddMilliseconds(lenMs);                          Log.DebugFormat("Sound ends at {0}."' stopAt);                          this.Play();                          while (DateTime.Now < stopAt)                          {                              ct.ThrowIfCancellationRequested();                              //The delay helps reduce processor usage while "spinning"                              Task.Delay(10).Wait();                          }                      }                      catch (OperationCanceledException)                      {                          base.Stop();                          Log.DebugFormat("Sound manually stoped. Generating a new CancellationTokenSource");                          // Create new CancellationTokenSource                          tokenSource.Dispose();                          tokenSource = new CancellationTokenSource();                          ct = tokenSource.Token;                      }                  }' ct);              }              catch (Exception ex)              {                  Log.Error("Error when calling SoundPlayerEx.PlayAsync (MaryTTS)."' ex);                  onError(ex);              }              finally              {                  OnSoundFinished();              }
Magic Number,JuliusSweetland.OptiKey.Services.Suggestions,NGramAutoComplete,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\Suggestions\NGramAutoComplete.cs,CalculateScore,The following statement contains a magic number: return 2 * numberOfMatches / (numberOfRootNGrams + numberOfEntryNGrams);
Magic Number,JuliusSweetland.OptiKey.Services.Suggestions,PresageSuggestions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\Suggestions\PresageSuggestions.cs,callback_get_past_stream,The following statement contains a magic number: int l = root.Length > 500 ? root.Length - 500 : 0;
Magic Number,JuliusSweetland.OptiKey.Services.Suggestions,PresageSuggestions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\Suggestions\PresageSuggestions.cs,callback_get_past_stream,The following statement contains a magic number: int l = root.Length > 500 ? root.Length - 500 : 0;
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,AudioService,The following statement contains a magic number: Bass.BASS_Init(-1' 44100' BASSInit.BASS_DEVICE_DEFAULT' IntPtr.Zero);
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,GetAvailableMaryTTSVoices,The following statement contains a magic number: if (Settings.Default.MaryTTSEnabled)              {                  Log.Info("GetAvailableMaryTTSVoices called");                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://localhost:59125/voices");                    //Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    //Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = (HttpWebResponse)request.GetResponse();                    //Get the stream associated with the response.                  Stream receiveStream = response.GetResponseStream();                    //Pipes the stream to a higher level stream reader with the required encoding format.                   StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                  string responseText = readStream.ReadToEnd();                  availableVoices = responseText.Split(new[] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries).ToList();                    Log.InfoFormat("GetAvailableMaryTTSVoices returing {0} voices"' availableVoices.Count);              }
Magic Number,JuliusSweetland.OptiKey.Services,AudioService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\AudioService.cs,GetAvailableMaryTTSVoices,The following statement contains a magic number: if (Settings.Default.MaryTTSEnabled)              {                  Log.Info("GetAvailableMaryTTSVoices called");                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://localhost:59125/voices");                    //Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    //Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = (HttpWebResponse)request.GetResponse();                    //Get the stream associated with the response.                  Stream receiveStream = response.GetResponseStream();                    //Pipes the stream to a higher level stream reader with the required encoding format.                   StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                  string responseText = readStream.ReadToEnd();                  availableVoices = responseText.Split(new[] { "\r\n" }' StringSplitOptions.RemoveEmptyEntries).ToList();                    Log.InfoFormat("GetAvailableMaryTTSVoices returing {0} voices"' availableVoices.Count);              }
Magic Number,JuliusSweetland.OptiKey.Services,DictionaryService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\DictionaryService.cs,LoadUserDictionaryFromFile,The following statement contains a magic number: try              {                  using (reader = new StreamReader(filePath))                  {                      while (reader.Peek() >= 0)                      {                          line = reader.ReadLine();                            var entryWithUsageCount = line.Trim().Split('|');                          if (entryWithUsageCount.Length == 2)                          {                              var entry = entryWithUsageCount[0];                              if (!int.TryParse(entryWithUsageCount[1]' out usageCount))                              {                                  usageCount = 0;                              }                                hash = entry.NormaliseAndRemoveRepeatingCharactersAndHandlePhrases(false);                              managedSuggestions.AddEntry(entry' new DictionaryEntry(entry' usageCount)' hash);                          }                      }                  }                    if (managedSuggestions.GetWordsHashes().Count == 0)                  {                      // Loading from user dictionary yield empty dict' then try load from                       // source of truth -- this will flush any previous user entry counts.                      LoadDictionaryFromLanguageFile();                  }              }              catch (Exception exception)              {                  PublishError(this' exception);              }              finally              {                  if (reader != null)                  {                      reader.Dispose();                  }              }
Magic Number,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null)              {                  if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1)                  {                      Log.DebugFormat("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);                  }                    selectionProgressEvent(this' selectionProgress);              }
Magic Number,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null)              {                  if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1)                  {                      Log.DebugFormat("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);                  }                    selectionProgressEvent(this' selectionProgress);              }
Magic Number,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null)              {                  if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1)                  {                      Log.DebugFormat("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);                  }                    selectionProgressEvent(this' selectionProgress);              }
Magic Number,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,PublishSelectionProgress,The following statement contains a magic number: if (selectionProgressEvent != null)              {                  if ((selectionProgress.Item2 < 0.1) || (selectionProgress.Item2 - 0.5) < 0.1 || (selectionProgress.Item2 - 1) < 0.1)                  {                      Log.DebugFormat("Publishing SelectionProgress event: {0} : {1}"' selectionProgress.Item1' selectionProgress.Item2);                  }                    selectionProgressEvent(this' selectionProgress);              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity += increment ? 0.1 : -0.1;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity += increment ? 0.1 : -0.1;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,IncrementOrDecrementOpacity,The following statement contains a magic number: opacity = opacity.CoerceToLowerLimit(0.1);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetOpacity,The following statement contains a magic number: opacity = opacity.CoerceToLowerLimit(0.1);
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following statement contains a magic number: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,The following statement contains a magic number: if (overrideThicknessAsPercentage.HasValue)              {                  thicknessAsPercentage = overrideThicknessAsPercentage.Value / 100;              }              else              {                  thicknessAsPercentage = size == DockSizes.Full                      ? getFullDockThicknessAsPercentageOfScreen() / 100                      : (getFullDockThicknessAsPercentageOfScreen() *                         getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000; //Percentage of a percentage              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,The following statement contains a magic number: if (overrideThicknessAsPercentage.HasValue)              {                  thicknessAsPercentage = overrideThicknessAsPercentage.Value / 100;              }              else              {                  thicknessAsPercentage = size == DockSizes.Full                      ? getFullDockThicknessAsPercentageOfScreen() / 100                      : (getFullDockThicknessAsPercentageOfScreen() *                         getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000; //Percentage of a percentage              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateDockSizeAndPositionInPx,The following statement contains a magic number: if (overrideThicknessAsPercentage.HasValue)              {                  thicknessAsPercentage = overrideThicknessAsPercentage.Value / 100;              }              else              {                  thicknessAsPercentage = size == DockSizes.Full                      ? getFullDockThicknessAsPercentageOfScreen() / 100                      : (getFullDockThicknessAsPercentageOfScreen() *                         getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000; //Percentage of a percentage              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: var thicknessAsPercentage = (getFullDockThicknessAsPercentageOfScreen() * getCollapsedDockThicknessAsPercentageOfFullDockThickness()) / 10000;
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CalculateMinimisedSizeAndPosition,The following statement contains a magic number: switch (minimisedEdge == MinimisedEdges.SameAsDockedPosition ? getDockPosition().ToMinimisedEdge() : minimisedEdge)              {                  case MinimisedEdges.Top:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Top;                      break;                    case MinimisedEdges.Bottom:                      if (screenBoundsInDp.Height > screenBoundsInDp.Width)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is taller than it is wide                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left + (screenBoundsInDp.Width / 2) - (width / 2);                      y = screenBoundsInDp.Bottom - height;                      break;                    case MinimisedEdges.Left:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Left;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;                    default: //case DockEdges.Right:                      if (screenBoundsInDp.Width > screenBoundsInDp.Height)                      {                          //Ensure the minimise button's long edge is against the docked edge'                          //so swap width and height if aspect ratio is wider than it is high                          var temp = width;                          width = height;                          height = temp;                      }                      x = screenBoundsInDp.Right - width;                      y = screenBoundsInDp.Top + (screenBoundsInDp.Height / 2) - (height / 2);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,CoerceSavedStateAndApply,The following statement contains a magic number: if (windowState != WindowStates.Maximised                  && windowState != WindowStates.Minimised                  && windowState != WindowStates.Hidden)              {                  //Coerce state                  var fullDockThicknessAsPercentageOfScreen = getFullDockThicknessAsPercentageOfScreen();                  if (fullDockThicknessAsPercentageOfScreen < MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN                       || fullDockThicknessAsPercentageOfScreen >= 100)                  {                      Log.WarnFormat("Saved full cked thickness of {0} is invalid. Restoring to default."' fullDockThicknessAsPercentageOfScreen);                      fullDockThicknessAsPercentageOfScreen = 50;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                  }                  double collapsedDockThicknessAsPercentageOfFullDockThickness = getCollapsedDockThicknessAsPercentageOfFullDockThickness();                  if (collapsedDockThicknessAsPercentageOfFullDockThickness < MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS                       || collapsedDockThicknessAsPercentageOfFullDockThickness >= 100)                  {                      Log.WarnFormat("Saved collased docked thickness of {0} is invalid. Restoring to default."' collapsedDockThicknessAsPercentageOfFullDockThickness);                      collapsedDockThicknessAsPercentageOfFullDockThickness = 20;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                  }                  Rect floatingSizeAndPosition = getFloatingSizeAndPosition();                  if (floatingSizeAndPosition == default(Rect) ||                      floatingSizeAndPosition.Left < screenBoundsInDp.Left ||                      floatingSizeAndPosition.Right > screenBoundsInDp.Right ||                      floatingSizeAndPosition.Top < screenBoundsInDp.Top ||                      floatingSizeAndPosition.Bottom > screenBoundsInDp.Bottom ||                      floatingSizeAndPosition.Width < (screenBoundsInDp.Width * (MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100)) ||                      floatingSizeAndPosition.Height < (screenBoundsInDp.Height * (MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100)))                  {                      //Default to two-thirds of the screen's width and height' positioned centrally                      Log.WarnFormat("Saved floating size and position was invalid (Top:{0}' Bottom:{1}' Left:{2}' Right:{3}' Width:{4}' Height:{5}). Restoring to default."'                          floatingSizeAndPosition.Top' floatingSizeAndPosition.Bottom' floatingSizeAndPosition.Left' floatingSizeAndPosition.Right' floatingSizeAndPosition.Width' floatingSizeAndPosition.Height);                      floatingSizeAndPosition = new Rect(                          screenBoundsInDp.Left + screenBoundsInDp.Width / 6'                          screenBoundsInDp.Top + screenBoundsInDp.Height / 6'                          2 * (screenBoundsInDp.Width / 3)' 2 * (screenBoundsInDp.Height / 3));                      saveFloatingSizeAndPosition(floatingSizeAndPosition);                  }                  }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following statement contains a magic number: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                                                    if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardCurrentContext = "";                      break;                    case FunctionKeys.SimplifiedAlphaABCDEFGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABCDEFGHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKLMNOPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKLMNOPQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTUVWXYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STUVWXYZ";                      break;                    case FunctionKeys.SimplifiedAlphaABC:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABC";                      break;                    case FunctionKeys.SimplifiedAlphaDEF:                      Settings.Default.SimplifiedKeyboardCurrentContext = "DEF";                      break;                    case FunctionKeys.SimplifiedAlphaGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "GHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKL:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKL";                      break;                    case FunctionKeys.SimplifiedAlphaMNO:                      Settings.Default.SimplifiedKeyboardCurrentContext = "MNO";                      break;                    case FunctionKeys.SimplifiedAlphaPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "PQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTU:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STU";                      break;                    case FunctionKeys.SimplifiedAlphaVWX:                      Settings.Default.SimplifiedKeyboardCurrentContext = "VWX";                      break;                    case FunctionKeys.SimplifiedAlphaYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "YZ";                      break;                    case FunctionKeys.SimplifiedAlphaNum:                      Settings.Default.SimplifiedKeyboardCurrentContext = "Num";                      break;                    case FunctionKeys.SimplifiedAlpha123:                      Settings.Default.SimplifiedKeyboardCurrentContext = "123";                      break;                    case FunctionKeys.SimplifiedAlpha456:                      Settings.Default.SimplifiedKeyboardCurrentContext = "456";                      break;                    case FunctionKeys.SimplifiedAlpha789:                      Settings.Default.SimplifiedKeyboardCurrentContext = "789";                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                                                    if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardCurrentContext = "";                      break;                    case FunctionKeys.SimplifiedAlphaABCDEFGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABCDEFGHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKLMNOPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKLMNOPQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTUVWXYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STUVWXYZ";                      break;                    case FunctionKeys.SimplifiedAlphaABC:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABC";                      break;                    case FunctionKeys.SimplifiedAlphaDEF:                      Settings.Default.SimplifiedKeyboardCurrentContext = "DEF";                      break;                    case FunctionKeys.SimplifiedAlphaGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "GHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKL:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKL";                      break;                    case FunctionKeys.SimplifiedAlphaMNO:                      Settings.Default.SimplifiedKeyboardCurrentContext = "MNO";                      break;                    case FunctionKeys.SimplifiedAlphaPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "PQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTU:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STU";                      break;                    case FunctionKeys.SimplifiedAlphaVWX:                      Settings.Default.SimplifiedKeyboardCurrentContext = "VWX";                      break;                    case FunctionKeys.SimplifiedAlphaYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "YZ";                      break;                    case FunctionKeys.SimplifiedAlphaNum:                      Settings.Default.SimplifiedKeyboardCurrentContext = "Num";                      break;                    case FunctionKeys.SimplifiedAlpha123:                      Settings.Default.SimplifiedKeyboardCurrentContext = "123";                      break;                    case FunctionKeys.SimplifiedAlpha456:                      Settings.Default.SimplifiedKeyboardCurrentContext = "456";                      break;                    case FunctionKeys.SimplifiedAlpha789:                      Settings.Default.SimplifiedKeyboardCurrentContext = "789";                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                                                    if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardCurrentContext = "";                      break;                    case FunctionKeys.SimplifiedAlphaABCDEFGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABCDEFGHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKLMNOPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKLMNOPQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTUVWXYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STUVWXYZ";                      break;                    case FunctionKeys.SimplifiedAlphaABC:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABC";                      break;                    case FunctionKeys.SimplifiedAlphaDEF:                      Settings.Default.SimplifiedKeyboardCurrentContext = "DEF";                      break;                    case FunctionKeys.SimplifiedAlphaGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "GHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKL:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKL";                      break;                    case FunctionKeys.SimplifiedAlphaMNO:                      Settings.Default.SimplifiedKeyboardCurrentContext = "MNO";                      break;                    case FunctionKeys.SimplifiedAlphaPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "PQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTU:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STU";                      break;                    case FunctionKeys.SimplifiedAlphaVWX:                      Settings.Default.SimplifiedKeyboardCurrentContext = "VWX";                      break;                    case FunctionKeys.SimplifiedAlphaYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "YZ";                      break;                    case FunctionKeys.SimplifiedAlphaNum:                      Settings.Default.SimplifiedKeyboardCurrentContext = "Num";                      break;                    case FunctionKeys.SimplifiedAlpha123:                      Settings.Default.SimplifiedKeyboardCurrentContext = "123";                      break;                    case FunctionKeys.SimplifiedAlpha456:                      Settings.Default.SimplifiedKeyboardCurrentContext = "456";                      break;                    case FunctionKeys.SimplifiedAlpha789:                      Settings.Default.SimplifiedKeyboardCurrentContext = "789";                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,KeyboardOutputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\KeyboardOutputService.cs,ProcessFunctionKey,The following statement contains a magic number: switch (functionKey)              {                  case FunctionKeys.BackMany:                      if (!string.IsNullOrEmpty(Text))                      {                          var backManyCount = Text.CountBackToLastCharCategoryBoundary();                            dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backManyCount' backManyCount).Trim());                            var textAfterBackMany = Text.Substring(0' Text.Length - backManyCount);                          var textChangedByBackMany = Text != textAfterBackMany;                          Text = textAfterBackMany;                            if (backManyCount == 0) backManyCount = 1; //Always publish at least one backspace                            for (int i = 0; i < backManyCount; i++)                          {                              PublishKeyPress(FunctionKeys.BackOne);                              ReleaseUnlockedKeys();                          }                            if (textChangedByBackMany                              || string.IsNullOrEmpty(Text))                          {                              AutoPressShiftIfAppropriate();                          }                            StoreLastProcessedText(null);                          GenerateSuggestions(true);                            Log.Debug("Suppressing next auto space.");                          suppressNextAutoSpace = true;                      }                      else                      {                          //Scratchpad is empty' but publish 1 backspace anyway' as per the behaviour for 'BackOne'                          PublishKeyPress(FunctionKeys.BackOne);                      }                        lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.BackOne:                      var backOneCount = string.IsNullOrEmpty(lastProcessedText)                          ? 1 //Default to removing one character if no lastProcessedText                          : lastProcessedText.Length;                        var textChangedByBackOne = false;                        if (!string.IsNullOrEmpty(Text))                      {                          if (Text.Length < backOneCount)                          {                              backOneCount = Text.Length; //Coallesce backCount if somehow the Text length is less                          }                                                    if (backOneCount == 1)                          {                              var inProgressWord = Text.InProgressWord(Text.Length);                              if (inProgressWord != null)                              {                                  //Attempt to break-apart/decompose in-progress word using normalisation                                  var decomposedInProgressWord = inProgressWord.Decompose();                                  if (decomposedInProgressWord != inProgressWord)                                  {                                      Log.DebugFormat("In-progress word can be broken apart/decomposed using normalisation. It will be normalised from '{0}' to '{1}'."' inProgressWord' decomposedInProgressWord);                                        //Remove in-progress word from Text                                      Text = Text.Substring(0' Text.Length - inProgressWord.Length);                                        //Add back the decomposed in-progress word' minus the last character' composed again (to recombine if possible)                                      var characterToRemove = decomposedInProgressWord.Last();                                      var newInProgressWord = string.Concat(decomposedInProgressWord.Substring(0' decomposedInProgressWord.Length - 1).Compose()' characterToRemove);                                      Text = string.Concat(Text' newInProgressWord);                                        //Remove composed string from external applications by outputting backspaces' then replace with decomposed word                                      for (var backCount = 0; backCount < inProgressWord.Length; backCount++)                                      {                                          PublishKeyPress(FunctionKeys.BackOne);                                      }                                      foreach (var c in newInProgressWord)                                      {                                          PublishKeyPress(c);                                      }                                  }                              }                          }                            var textAfterBackOne = Text.Substring(0' Text.Length - backOneCount);                          textChangedByBackOne = Text != textAfterBackOne;                            if (backOneCount > 1)                          {                              //Removing more than one character - only decrement removed string                              dictionaryService.DecrementEntryUsageCount(Text.Substring(Text.Length - backOneCount' backOneCount).Trim());                          }                          else if (!string.IsNullOrEmpty(lastProcessedText)                              && lastProcessedText.Length == 1                              && !char.IsWhiteSpace(lastProcessedText[0]))                          {                              dictionaryService.DecrementEntryUsageCount(Text.InProgressWord(Text.Length)); //We are removing a non-whitespace character - decrement the in progress word                              dictionaryService.IncrementEntryUsageCount(textAfterBackOne.InProgressWord(Text.Length)); //And increment the in progress word that is left after the removal                          }                            Text = textAfterBackOne;                      }                        for (int i = 0; i < backOneCount; i++)                      {                          PublishKeyPress(FunctionKeys.BackOne);                          ReleaseUnlockedKeys();                      }                        if (textChangedByBackOne                          || string.IsNullOrEmpty(Text))                      {                          AutoPressShiftIfAppropriate();                      }                        StoreLastProcessedText(null);                      GenerateSuggestions(false);                        Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      break;                    case FunctionKeys.ClearScratchpad:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      lastProcessedTextWasSuggestion = false;                      GenerateSuggestions(false);                      break;                    case FunctionKeys.ConversationConfirmYes:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.YES;                      break;                    case FunctionKeys.ConversationConfirmNo:                      Text = null;                      StoreLastProcessedText(null);                      ClearSuggestions();                      AutoPressShiftIfAppropriate();                      Log.Debug("Suppressing next auto space.");                      suppressNextAutoSpace = true;                      Text = Resources.NO;                      break;                    case FunctionKeys.SimplifiedAlphaClear:                      Settings.Default.SimplifiedKeyboardCurrentContext = "";                      break;                    case FunctionKeys.SimplifiedAlphaABCDEFGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABCDEFGHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKLMNOPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKLMNOPQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTUVWXYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STUVWXYZ";                      break;                    case FunctionKeys.SimplifiedAlphaABC:                      Settings.Default.SimplifiedKeyboardCurrentContext = "ABC";                      break;                    case FunctionKeys.SimplifiedAlphaDEF:                      Settings.Default.SimplifiedKeyboardCurrentContext = "DEF";                      break;                    case FunctionKeys.SimplifiedAlphaGHI:                      Settings.Default.SimplifiedKeyboardCurrentContext = "GHI";                      break;                    case FunctionKeys.SimplifiedAlphaJKL:                      Settings.Default.SimplifiedKeyboardCurrentContext = "JKL";                      break;                    case FunctionKeys.SimplifiedAlphaMNO:                      Settings.Default.SimplifiedKeyboardCurrentContext = "MNO";                      break;                    case FunctionKeys.SimplifiedAlphaPQR:                      Settings.Default.SimplifiedKeyboardCurrentContext = "PQR";                      break;                    case FunctionKeys.SimplifiedAlphaSTU:                      Settings.Default.SimplifiedKeyboardCurrentContext = "STU";                      break;                    case FunctionKeys.SimplifiedAlphaVWX:                      Settings.Default.SimplifiedKeyboardCurrentContext = "VWX";                      break;                    case FunctionKeys.SimplifiedAlphaYZ:                      Settings.Default.SimplifiedKeyboardCurrentContext = "YZ";                      break;                    case FunctionKeys.SimplifiedAlphaNum:                      Settings.Default.SimplifiedKeyboardCurrentContext = "Num";                      break;                    case FunctionKeys.SimplifiedAlpha123:                      Settings.Default.SimplifiedKeyboardCurrentContext = "123";                      break;                    case FunctionKeys.SimplifiedAlpha456:                      Settings.Default.SimplifiedKeyboardCurrentContext = "456";                      break;                    case FunctionKeys.SimplifiedAlpha789:                      Settings.Default.SimplifiedKeyboardCurrentContext = "789";                      break;                    case FunctionKeys.Suggestion1:                      SwapLastTextChangeForSuggestion(0);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion2:                      SwapLastTextChangeForSuggestion(1);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion3:                      SwapLastTextChangeForSuggestion(2);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion4:                      SwapLastTextChangeForSuggestion(3);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion5:                      SwapLastTextChangeForSuggestion(4);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.Suggestion6:                      SwapLastTextChangeForSuggestion(5);                      lastProcessedTextWasSuggestion = true;                      break;                    case FunctionKeys.LeftShift:                      shiftStateSetAutomatically = false;                      GenerateSuggestions(lastProcessedTextWasSuggestion);                      break;                    default:                      if (functionKey.ToVirtualKeyCode() != null)                      {                          //Key corresponds to physical keyboard key                          GenerateSuggestions(false);                            //If the key cannot be pressed or locked down (these are handled in                          //ReactToPublishableKeyDownStateChanges) then publish it and release unlocked keys                          var keyValue = new KeyValue(functionKey);                          if (!KeyValues.KeysWhichCanBePressedOrLockedDown.Contains(keyValue))                          {                              PublishKeyPress(functionKey);                              ReleaseUnlockedKeys();                          }                      }                        lastProcessedTextWasSuggestion = false;                      break;              }
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: try              {                  Log.DebugFormat("Simulating moving mouse to point '{0}'"' point);                    var virtualScreenWidthInPixels = SystemParameters.VirtualScreenWidth * Graphics.DipScalingFactorX;                  var virtualScreenHeightInPixels = SystemParameters.VirtualScreenHeight * Graphics.DipScalingFactorY;                    //N.B. InputSimulator does not deal in pixels. The position should be a scaled point between 0 and 65535.                   //https://inputsimulator.codeplex.com/discussions/86530                  inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop(                      Math.Ceiling(65535 * (point.X / virtualScreenWidthInPixels))'                      Math.Ceiling(65535 * (point.Y / virtualScreenHeightInPixels)));              }              catch (Exception exception)              {                  PublishError(this' exception);              }
Magic Number,JuliusSweetland.OptiKey.Services,PublishService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\PublishService.cs,MouseMouseToPoint,The following statement contains a magic number: try              {                  Log.DebugFormat("Simulating moving mouse to point '{0}'"' point);                    var virtualScreenWidthInPixels = SystemParameters.VirtualScreenWidth * Graphics.DipScalingFactorX;                  var virtualScreenHeightInPixels = SystemParameters.VirtualScreenHeight * Graphics.DipScalingFactorY;                    //N.B. InputSimulator does not deal in pixels. The position should be a scaled point between 0 and 65535.                   //https://inputsimulator.codeplex.com/discussions/86530                  inputSimulator.Mouse.MoveMouseToPositionOnVirtualDesktop(                      Math.Ceiling(65535 * (point.X / virtualScreenWidthInPixels))'                      Math.Ceiling(65535 * (point.Y / virtualScreenHeightInPixels)));              }              catch (Exception exception)              {                  PublishError(this' exception);              }
Magic Number,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following statement contains a magic number: calRunner.Width = 100;
Magic Number,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following statement contains a magic number: calRunner.Height = 100;
Magic Number,JuliusSweetland.OptiKey.Static,Sound,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: if (fileName.StartsWith("http://localhost:59125/process?"))              {                  string timeURL = fileName.Replace("OUTPUT_TYPE=AUDIO"' "OUTPUT_TYPE=REALISED_DURATIONS");                  List<string> realised_durations = new List<string>();                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(timeURL);                    // Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    // Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = null;                    try                  {                      response = (HttpWebResponse)request.GetResponse();                  }                  catch                  {                      Log.Error("Unable to use MaryTTS voice synthesiser.");                      if (File.Exists(Settings.Default.MaryTTSLocation))                      {                          Log.Error("Trying to restart MaryTTS server.");                          Process proc = new Process                          {                              StartInfo = new ProcessStartInfo                              {                                  UseShellExecute = true'                                  WindowStyle = ProcessWindowStyle.Minimized' // cannot close it if set to hidden                                  CreateNoWindow = true'                                  FileName = Settings.Default.MaryTTSLocation                              }                          };                          try                          {                              proc.Start();                          }                          catch                          {                              Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              Settings.Default.MaryTTSEnabled = false;                          }                            if (proc.StartTime <= DateTime.Now && !proc.HasExited)                          {                              Log.InfoFormat("Restarted MaryTTS server at {0}."' proc.StartTime);                              proc.CloseOnApplicationExit(Log' "MaryTTS");                          }                          else                          {                              var errorMsg = string.Format(                                  "Failed to started MaryTTS (server not running). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                                if (proc.HasExited)                              {                                  errorMsg = string.Format(                                  "Failed to started MaryTTS (server was closed). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              }                                Log.Error(errorMsg);                              Settings.Default.MaryTTSEnabled = false;                          }                      }                      else                      {                          Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                              Settings.Default.SpeechVoice);                          Settings.Default.MaryTTSEnabled = false;                      }                  }                    if (response != null)                  {                      // Get the stream associated with the response.                      Stream receiveStream = response.GetResponseStream();                        // Pipes the stream to a higher level stream reader with the required encoding format.                       StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                      string responseText = readStream.ReadToEnd();                        realised_durations = responseText.Split('\n').ToList();                        // retrieve the time of the last syllable                      length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));                      return length;                  }              }              else              {                  StringBuilder lengthBuf = new StringBuilder(32);                    PInvoke.mciSendString(string.Format("open \"{0}\" type waveaudio alias wave"' fileName)' null' 0' IntPtr.Zero);                  PInvoke.mciSendString("status wave length"' lengthBuf' lengthBuf.Capacity' IntPtr.Zero);                  PInvoke.mciSendString("close wave"' null' 0' IntPtr.Zero);                    int.TryParse(lengthBuf.ToString()' out length);                  return length;              }
Magic Number,JuliusSweetland.OptiKey.Static,Sound,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: if (fileName.StartsWith("http://localhost:59125/process?"))              {                  string timeURL = fileName.Replace("OUTPUT_TYPE=AUDIO"' "OUTPUT_TYPE=REALISED_DURATIONS");                  List<string> realised_durations = new List<string>();                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(timeURL);                    // Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    // Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = null;                    try                  {                      response = (HttpWebResponse)request.GetResponse();                  }                  catch                  {                      Log.Error("Unable to use MaryTTS voice synthesiser.");                      if (File.Exists(Settings.Default.MaryTTSLocation))                      {                          Log.Error("Trying to restart MaryTTS server.");                          Process proc = new Process                          {                              StartInfo = new ProcessStartInfo                              {                                  UseShellExecute = true'                                  WindowStyle = ProcessWindowStyle.Minimized' // cannot close it if set to hidden                                  CreateNoWindow = true'                                  FileName = Settings.Default.MaryTTSLocation                              }                          };                          try                          {                              proc.Start();                          }                          catch                          {                              Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              Settings.Default.MaryTTSEnabled = false;                          }                            if (proc.StartTime <= DateTime.Now && !proc.HasExited)                          {                              Log.InfoFormat("Restarted MaryTTS server at {0}."' proc.StartTime);                              proc.CloseOnApplicationExit(Log' "MaryTTS");                          }                          else                          {                              var errorMsg = string.Format(                                  "Failed to started MaryTTS (server not running). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                                if (proc.HasExited)                              {                                  errorMsg = string.Format(                                  "Failed to started MaryTTS (server was closed). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              }                                Log.Error(errorMsg);                              Settings.Default.MaryTTSEnabled = false;                          }                      }                      else                      {                          Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                              Settings.Default.SpeechVoice);                          Settings.Default.MaryTTSEnabled = false;                      }                  }                    if (response != null)                  {                      // Get the stream associated with the response.                      Stream receiveStream = response.GetResponseStream();                        // Pipes the stream to a higher level stream reader with the required encoding format.                       StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                      string responseText = readStream.ReadToEnd();                        realised_durations = responseText.Split('\n').ToList();                        // retrieve the time of the last syllable                      length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));                      return length;                  }              }              else              {                  StringBuilder lengthBuf = new StringBuilder(32);                    PInvoke.mciSendString(string.Format("open \"{0}\" type waveaudio alias wave"' fileName)' null' 0' IntPtr.Zero);                  PInvoke.mciSendString("status wave length"' lengthBuf' lengthBuf.Capacity' IntPtr.Zero);                  PInvoke.mciSendString("close wave"' null' 0' IntPtr.Zero);                    int.TryParse(lengthBuf.ToString()' out length);                  return length;              }
Magic Number,JuliusSweetland.OptiKey.Static,Sound,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: if (fileName.StartsWith("http://localhost:59125/process?"))              {                  string timeURL = fileName.Replace("OUTPUT_TYPE=AUDIO"' "OUTPUT_TYPE=REALISED_DURATIONS");                  List<string> realised_durations = new List<string>();                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(timeURL);                    // Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    // Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = null;                    try                  {                      response = (HttpWebResponse)request.GetResponse();                  }                  catch                  {                      Log.Error("Unable to use MaryTTS voice synthesiser.");                      if (File.Exists(Settings.Default.MaryTTSLocation))                      {                          Log.Error("Trying to restart MaryTTS server.");                          Process proc = new Process                          {                              StartInfo = new ProcessStartInfo                              {                                  UseShellExecute = true'                                  WindowStyle = ProcessWindowStyle.Minimized' // cannot close it if set to hidden                                  CreateNoWindow = true'                                  FileName = Settings.Default.MaryTTSLocation                              }                          };                          try                          {                              proc.Start();                          }                          catch                          {                              Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              Settings.Default.MaryTTSEnabled = false;                          }                            if (proc.StartTime <= DateTime.Now && !proc.HasExited)                          {                              Log.InfoFormat("Restarted MaryTTS server at {0}."' proc.StartTime);                              proc.CloseOnApplicationExit(Log' "MaryTTS");                          }                          else                          {                              var errorMsg = string.Format(                                  "Failed to started MaryTTS (server not running). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                                if (proc.HasExited)                              {                                  errorMsg = string.Format(                                  "Failed to started MaryTTS (server was closed). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              }                                Log.Error(errorMsg);                              Settings.Default.MaryTTSEnabled = false;                          }                      }                      else                      {                          Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                              Settings.Default.SpeechVoice);                          Settings.Default.MaryTTSEnabled = false;                      }                  }                    if (response != null)                  {                      // Get the stream associated with the response.                      Stream receiveStream = response.GetResponseStream();                        // Pipes the stream to a higher level stream reader with the required encoding format.                       StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                      string responseText = readStream.ReadToEnd();                        realised_durations = responseText.Split('\n').ToList();                        // retrieve the time of the last syllable                      length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));                      return length;                  }              }              else              {                  StringBuilder lengthBuf = new StringBuilder(32);                    PInvoke.mciSendString(string.Format("open \"{0}\" type waveaudio alias wave"' fileName)' null' 0' IntPtr.Zero);                  PInvoke.mciSendString("status wave length"' lengthBuf' lengthBuf.Capacity' IntPtr.Zero);                  PInvoke.mciSendString("close wave"' null' 0' IntPtr.Zero);                    int.TryParse(lengthBuf.ToString()' out length);                  return length;              }
Magic Number,JuliusSweetland.OptiKey.Static,Sound,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: if (fileName.StartsWith("http://localhost:59125/process?"))              {                  string timeURL = fileName.Replace("OUTPUT_TYPE=AUDIO"' "OUTPUT_TYPE=REALISED_DURATIONS");                  List<string> realised_durations = new List<string>();                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(timeURL);                    // Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    // Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = null;                    try                  {                      response = (HttpWebResponse)request.GetResponse();                  }                  catch                  {                      Log.Error("Unable to use MaryTTS voice synthesiser.");                      if (File.Exists(Settings.Default.MaryTTSLocation))                      {                          Log.Error("Trying to restart MaryTTS server.");                          Process proc = new Process                          {                              StartInfo = new ProcessStartInfo                              {                                  UseShellExecute = true'                                  WindowStyle = ProcessWindowStyle.Minimized' // cannot close it if set to hidden                                  CreateNoWindow = true'                                  FileName = Settings.Default.MaryTTSLocation                              }                          };                          try                          {                              proc.Start();                          }                          catch                          {                              Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              Settings.Default.MaryTTSEnabled = false;                          }                            if (proc.StartTime <= DateTime.Now && !proc.HasExited)                          {                              Log.InfoFormat("Restarted MaryTTS server at {0}."' proc.StartTime);                              proc.CloseOnApplicationExit(Log' "MaryTTS");                          }                          else                          {                              var errorMsg = string.Format(                                  "Failed to started MaryTTS (server not running). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                                if (proc.HasExited)                              {                                  errorMsg = string.Format(                                  "Failed to started MaryTTS (server was closed). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              }                                Log.Error(errorMsg);                              Settings.Default.MaryTTSEnabled = false;                          }                      }                      else                      {                          Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                              Settings.Default.SpeechVoice);                          Settings.Default.MaryTTSEnabled = false;                      }                  }                    if (response != null)                  {                      // Get the stream associated with the response.                      Stream receiveStream = response.GetResponseStream();                        // Pipes the stream to a higher level stream reader with the required encoding format.                       StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                      string responseText = readStream.ReadToEnd();                        realised_durations = responseText.Split('\n').ToList();                        // retrieve the time of the last syllable                      length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));                      return length;                  }              }              else              {                  StringBuilder lengthBuf = new StringBuilder(32);                    PInvoke.mciSendString(string.Format("open \"{0}\" type waveaudio alias wave"' fileName)' null' 0' IntPtr.Zero);                  PInvoke.mciSendString("status wave length"' lengthBuf' lengthBuf.Capacity' IntPtr.Zero);                  PInvoke.mciSendString("close wave"' null' 0' IntPtr.Zero);                    int.TryParse(lengthBuf.ToString()' out length);                  return length;              }
Magic Number,JuliusSweetland.OptiKey.Static,Sound,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Static\Sound.cs,GetSoundLength,The following statement contains a magic number: if (fileName.StartsWith("http://localhost:59125/process?"))              {                  string timeURL = fileName.Replace("OUTPUT_TYPE=AUDIO"' "OUTPUT_TYPE=REALISED_DURATIONS");                  List<string> realised_durations = new List<string>();                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(timeURL);                    // Set some reasonable limits on resources used by this request                  request.MaximumAutomaticRedirections = 4;                  request.MaximumResponseHeadersLength = 4;                    // Set credentials to use for this request.                  request.Credentials = CredentialCache.DefaultCredentials;                  HttpWebResponse response = null;                    try                  {                      response = (HttpWebResponse)request.GetResponse();                  }                  catch                  {                      Log.Error("Unable to use MaryTTS voice synthesiser.");                      if (File.Exists(Settings.Default.MaryTTSLocation))                      {                          Log.Error("Trying to restart MaryTTS server.");                          Process proc = new Process                          {                              StartInfo = new ProcessStartInfo                              {                                  UseShellExecute = true'                                  WindowStyle = ProcessWindowStyle.Minimized' // cannot close it if set to hidden                                  CreateNoWindow = true'                                  FileName = Settings.Default.MaryTTSLocation                              }                          };                          try                          {                              proc.Start();                          }                          catch                          {                              Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              Settings.Default.MaryTTSEnabled = false;                          }                            if (proc.StartTime <= DateTime.Now && !proc.HasExited)                          {                              Log.InfoFormat("Restarted MaryTTS server at {0}."' proc.StartTime);                              proc.CloseOnApplicationExit(Log' "MaryTTS");                          }                          else                          {                              var errorMsg = string.Format(                                  "Failed to started MaryTTS (server not running). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                                if (proc.HasExited)                              {                                  errorMsg = string.Format(                                  "Failed to started MaryTTS (server was closed). Disabling MaryTTS and using System Voice '{0}' instead."'                                  Settings.Default.SpeechVoice);                              }                                Log.Error(errorMsg);                              Settings.Default.MaryTTSEnabled = false;                          }                      }                      else                      {                          Log.ErrorFormat("Failed to restart MaryTTS server. Disabling MaryTTS and using System Voice '{0}' instead."'                              Settings.Default.SpeechVoice);                          Settings.Default.MaryTTSEnabled = false;                      }                  }                    if (response != null)                  {                      // Get the stream associated with the response.                      Stream receiveStream = response.GetResponseStream();                        // Pipes the stream to a higher level stream reader with the required encoding format.                       StreamReader readStream = new StreamReader(receiveStream' Encoding.UTF8);                      string responseText = readStream.ReadToEnd();                        realised_durations = responseText.Split('\n').ToList();                        // retrieve the time of the last syllable                      length = (int)(1000 * Convert.ToSingle(realised_durations.ElementAt(realised_durations.Count() - 2).Split(' ').ToList().ElementAt(0)));                      return length;                  }              }              else              {                  StringBuilder lengthBuf = new StringBuilder(32);                    PInvoke.mciSendString(string.Format("open \"{0}\" type waveaudio alias wave"' fileName)' null' 0' IntPtr.Zero);                  PInvoke.mciSendString("status wave length"' lengthBuf' lengthBuf.Capacity' IntPtr.Zero);                  PInvoke.mciSendString("close wave"' null' 0' IntPtr.Zero);                    int.TryParse(lengthBuf.ToString()' out length);                  return length;              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,CKPageFileChanged,The following statement contains a magic number: if (key != null)              {                  var value = dependencyPropertyChangedEventArgs.NewValue as string;                  string extractPath = CKpath();                    string pagefile = value;                  Log.DebugFormat("Trying to read page file: {0}."' pagefile);                  if (value == null || !File.Exists(pagefile))                  {                      string contents = new StreamReader(extractPath + "manifest.json"' Encoding.UTF8).ReadToEnd();                      Pageset manifest = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<Pageset>(contents);                      pagefile = extractPath + manifest.root;                  }                                    {                      Log.DebugFormat("Page file to read: {0}."' pagefile);                      string contents = new StreamReader(pagefile' Encoding.UTF8).ReadToEnd();                      CKOBF CKPageOBF = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<CKOBF>(contents);                      int ButtonCount = CKPageOBF.buttons.Count();                      Log.DebugFormat("Page contains {0} buttons."' ButtonCount - 3);                      string image;                      string path;                        List<string> Colours = new List<string>();                      List<string> Images = new List<string>();                      List<string> Paths = new List<string>();                      List<bool> Ismenukeys = new List<bool>();                      List<string> Texts = new List<string>();                      List<Load_board> Boards = new List<Load_board>();                        string defaultColour = "rgb(128' 128' 128)";                      // some alternative default colours:                      // "rgb(68' 68' 68)"; // "rgb(191' 191' 191)"; // "Transparent"; //"#000000"; //                      string pageColour = defaultColour;                      string defaultPath = null;                      bool defaultIsMenuKey = false;                        int BlankButtonCount = 23 - ButtonCount;                      Log.DebugFormat("There are {0} empty button(s) on this page."' BlankButtonCount);                      Buttons blankbutton;                        // CK 20 pagesets have keys in four rows and five columns                       // with an extra row at the top for the scratchpad and two other keys                        int ButtonNo = 3;                      // start at three to skip the scratchpad row keys                        for (int Row = 1; Row < 5; ++Row)                      { // start at one to skip the scratchpad row                          for (int Column = 0; Column < 5; ++Column)                          { // all five columns are used                                // assume the current button is blank                              bool CurrentButtonIsBlank = true;                                if (ButtonNo < CKPageOBF.buttons.Count)                              { // if the stored keys in CKPageOBF total more than the current button number                                  if (CKPageOBF.buttons.ElementAt(ButtonNo).id == Column.ToString() + Row.ToString())                                  { // check if the position of the current key matches the current position                                        // if the positions match then t isn't blank                                      CurrentButtonIsBlank = false;                                        if (CKPageOBF.buttons.ElementAt(ButtonNo).load_board == null && pageColour.Equals(defaultColour))                                      { // if this non-blank key is the first non-menu key then use its background colour for all the subsequent blank keys                                          pageColour = CKPageOBF.buttons.ElementAt(ButtonNo).background_color;                                      }                                  }                              }                                if (CurrentButtonIsBlank)                              { // if the current key is blank insert it                                  if (BlankButtonCount == 1)                                  { // if this is the last blank key insert the back button                                      blankbutton = new Buttons()                                      {                                          background_color = "rgb(204'255'204)"'                                          label = "BACK"'                                          image_id = "back.png"'                                          load_board = new Load_board()                                          {                                              path = "boards/" + Settings.Default.CommuniKateKeyboardPrevious1Context                                          }                                      };                                      Log.DebugFormat("Back button added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color);                                  }                                  else                                  {                                      blankbutton = new Buttons()                                      {                                          background_color = pageColour                                      };                                      Log.DebugFormat("Blank button number {3} added at column {0} row {1} with background colour {2}."' Column + 1' Row' blankbutton.background_color' BlankButtonCount - 1);                                  }                                  blankbutton.id = Column.ToString() + Row.ToString();                                  CKPageOBF.buttons.Insert(ButtonNo' blankbutton);                                  --BlankButtonCount;                              }                                // store the individual properties of the current button                              Colours.Add(dec2hex(CKPageOBF.buttons.ElementAt(ButtonNo).background_color));                              image = CKPageOBF.buttons.ElementAt(ButtonNo).image_id == ""                                   ? CKPageOBF.buttons.ElementAt(ButtonNo).image_id                                   : CKpath() + "images/" + CKPageOBF.buttons.ElementAt(ButtonNo).image_id;                              Images.Add(image);                              Boards.Add(CKPageOBF.buttons.ElementAt(ButtonNo).load_board);                              Texts.Add(CKPageOBF.buttons.ElementAt(ButtonNo).label);                              if (Boards.Last() != null && Boards.Last().path != null)                              {                                  path = Boards.Last().path.Substring(7);                                  if (path.StartsWith("+"))                                      Paths.Add(Texts.Last() + path);                                  else                                      Paths.Add(path);                                  Ismenukeys.Add(true);                                  Log.DebugFormat("Button {0} is a menu key for board {1}."' ButtonNo - 2' path);                              }                              else                              {                                  Paths.Add(defaultPath);                                  Ismenukeys.Add(defaultIsMenuKey);                              }                              ++ButtonNo;                          }                      }                        int buttonid = 0;                      key.CKBaCo_00 = Colours.ElementAt(buttonid);                      key.CKText_00 = Texts.ElementAt(buttonid);                      key.CKImSo_00 = Images.ElementAt(buttonid);                      key.CKKeCo_00 = Paths.ElementAt(buttonid);                      key.CKMenuKey_00 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_01 = Colours.ElementAt(buttonid);                      key.CKText_01 = Texts.ElementAt(buttonid);                      key.CKImSo_01 = Images.ElementAt(buttonid);                      key.CKKeCo_01 = Paths.ElementAt(buttonid);                      key.CKMenuKey_01 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_02 = Colours.ElementAt(buttonid);                      key.CKText_02 = Texts.ElementAt(buttonid);                      key.CKImSo_02 = Images.ElementAt(buttonid);                      key.CKKeCo_02 = Paths.ElementAt(buttonid);                      key.CKMenuKey_02 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_03 = Colours.ElementAt(buttonid);                      key.CKText_03 = Texts.ElementAt(buttonid);                      key.CKImSo_03 = Images.ElementAt(buttonid);                      key.CKKeCo_03 = Paths.ElementAt(buttonid);                      key.CKMenuKey_03 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_04 = Colours.ElementAt(buttonid);                      key.CKText_04 = Texts.ElementAt(buttonid);                      key.CKImSo_04 = Images.ElementAt(buttonid);                      key.CKKeCo_04 = Paths.ElementAt(buttonid);                      key.CKMenuKey_04 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_10 = Colours.ElementAt(buttonid);                      key.CKText_10 = Texts.ElementAt(buttonid);                      key.CKImSo_10 = Images.ElementAt(buttonid);                      key.CKKeCo_10 = Paths.ElementAt(buttonid);                      key.CKMenuKey_10 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_11 = Colours.ElementAt(buttonid);                      key.CKText_11 = Texts.ElementAt(buttonid);                      key.CKImSo_11 = Images.ElementAt(buttonid);                      key.CKKeCo_11 = Paths.ElementAt(buttonid);                      key.CKMenuKey_11 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_12 = Colours.ElementAt(buttonid);                      key.CKText_12 = Texts.ElementAt(buttonid);                      key.CKImSo_12 = Images.ElementAt(buttonid);                      key.CKKeCo_12 = Paths.ElementAt(buttonid);                      key.CKMenuKey_12 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_13 = Colours.ElementAt(buttonid);                      key.CKText_13 = Texts.ElementAt(buttonid);                      key.CKImSo_13 = Images.ElementAt(buttonid);                      key.CKKeCo_13 = Paths.ElementAt(buttonid);                      key.CKMenuKey_13 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_14 = Colours.ElementAt(buttonid);                      key.CKText_14 = Texts.ElementAt(buttonid);                      key.CKImSo_14 = Images.ElementAt(buttonid);                      key.CKKeCo_14 = Paths.ElementAt(buttonid);                      key.CKMenuKey_14 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_20 = Colours.ElementAt(buttonid);                      key.CKText_20 = Texts.ElementAt(buttonid);                      key.CKImSo_20 = Images.ElementAt(buttonid);                      key.CKKeCo_20 = Paths.ElementAt(buttonid);                      key.CKMenuKey_20 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_21 = Colours.ElementAt(buttonid);                      key.CKText_21 = Texts.ElementAt(buttonid);                      key.CKImSo_21 = Images.ElementAt(buttonid);                      key.CKKeCo_21 = Paths.ElementAt(buttonid);                      key.CKMenuKey_21 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_22 = Colours.ElementAt(buttonid);                      key.CKText_22 = Texts.ElementAt(buttonid);                      key.CKImSo_22 = Images.ElementAt(buttonid);                      key.CKKeCo_22 = Paths.ElementAt(buttonid);                      key.CKMenuKey_22 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_23 = Colours.ElementAt(buttonid);                      key.CKText_23 = Texts.ElementAt(buttonid);                      key.CKImSo_23 = Images.ElementAt(buttonid);                      key.CKKeCo_23 = Paths.ElementAt(buttonid);                      key.CKMenuKey_23 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_24 = Colours.ElementAt(buttonid);                      key.CKText_24 = Texts.ElementAt(buttonid);                      key.CKImSo_24 = Images.ElementAt(buttonid);                      key.CKKeCo_24 = Paths.ElementAt(buttonid);                      key.CKMenuKey_24 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_30 = Colours.ElementAt(buttonid);                      key.CKText_30 = Texts.ElementAt(buttonid);                      key.CKImSo_30 = Images.ElementAt(buttonid);                      key.CKKeCo_30 = Paths.ElementAt(buttonid);                      key.CKMenuKey_30 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_31 = Colours.ElementAt(buttonid);                      key.CKText_31 = Texts.ElementAt(buttonid);                      key.CKImSo_31 = Images.ElementAt(buttonid);                      key.CKKeCo_31 = Paths.ElementAt(buttonid);                      key.CKMenuKey_31 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_32 = Colours.ElementAt(buttonid);                      key.CKText_32 = Texts.ElementAt(buttonid);                      key.CKImSo_32 = Images.ElementAt(buttonid);                      key.CKKeCo_32 = Paths.ElementAt(buttonid);                      key.CKMenuKey_32 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_33 = Colours.ElementAt(buttonid);                      key.CKText_33 = Texts.ElementAt(buttonid);                      key.CKImSo_33 = Images.ElementAt(buttonid);                      key.CKKeCo_33 = Paths.ElementAt(buttonid);                      key.CKMenuKey_33 = Ismenukeys.ElementAt(buttonid);                        ++buttonid;                      key.CKBaCo_34 = Colours.ElementAt(buttonid);                      key.CKText_34 = Texts.ElementAt(buttonid);                      key.CKImSo_34 = Images.ElementAt(buttonid);                      key.CKKeCo_34 = Paths.ElementAt(buttonid);                      key.CKMenuKey_34 = Ismenukeys.ElementAt(buttonid);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,dec2hex,The following statement contains a magic number: if (string.IsNullOrEmpty(dec))              {                  return "#000000";              }              else if (dec.StartsWith("#"))              {                  if (dec.Length == 7)                      return dec;                  else                      return "#000000";              }              else if (dec.Contains("Transparent"))              {                  return "Transparent";              }              else              {                  if (dec.StartsWith("rgb("))                      dec = dec.Substring(4);                  if (dec.EndsWith(")"))                      dec = dec.Substring(0' dec.Length - 1);                  List<string> deccolours = dec.Split(''').ToList<string>();                  if (deccolours.Count != 3)                      return "#000000";                  int intR = (int)Convert.ToSingle(deccolours.ElementAt(0));                  int intG = (int)Convert.ToSingle(deccolours.ElementAt(1));                  int intB = (int)Convert.ToSingle(deccolours.ElementAt(2));                  byte byteR = Convert.ToByte(intR);                  byte byteG = Convert.ToByte(intG);                  byte byteB = Convert.ToByte(intB);                  return "#" + byteR.ToString("X2") + byteG.ToString("X2") + byteB.ToString("X2");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,dec2hex,The following statement contains a magic number: if (string.IsNullOrEmpty(dec))              {                  return "#000000";              }              else if (dec.StartsWith("#"))              {                  if (dec.Length == 7)                      return dec;                  else                      return "#000000";              }              else if (dec.Contains("Transparent"))              {                  return "Transparent";              }              else              {                  if (dec.StartsWith("rgb("))                      dec = dec.Substring(4);                  if (dec.EndsWith(")"))                      dec = dec.Substring(0' dec.Length - 1);                  List<string> deccolours = dec.Split(''').ToList<string>();                  if (deccolours.Count != 3)                      return "#000000";                  int intR = (int)Convert.ToSingle(deccolours.ElementAt(0));                  int intG = (int)Convert.ToSingle(deccolours.ElementAt(1));                  int intB = (int)Convert.ToSingle(deccolours.ElementAt(2));                  byte byteR = Convert.ToByte(intR);                  byte byteG = Convert.ToByte(intG);                  byte byteB = Convert.ToByte(intB);                  return "#" + byteR.ToString("X2") + byteG.ToString("X2") + byteB.ToString("X2");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,dec2hex,The following statement contains a magic number: if (string.IsNullOrEmpty(dec))              {                  return "#000000";              }              else if (dec.StartsWith("#"))              {                  if (dec.Length == 7)                      return dec;                  else                      return "#000000";              }              else if (dec.Contains("Transparent"))              {                  return "Transparent";              }              else              {                  if (dec.StartsWith("rgb("))                      dec = dec.Substring(4);                  if (dec.EndsWith(")"))                      dec = dec.Substring(0' dec.Length - 1);                  List<string> deccolours = dec.Split(''').ToList<string>();                  if (deccolours.Count != 3)                      return "#000000";                  int intR = (int)Convert.ToSingle(deccolours.ElementAt(0));                  int intG = (int)Convert.ToSingle(deccolours.ElementAt(1));                  int intB = (int)Convert.ToSingle(deccolours.ElementAt(2));                  byte byteR = Convert.ToByte(intR);                  byte byteG = Convert.ToByte(intG);                  byte byteB = Convert.ToByte(intB);                  return "#" + byteR.ToString("X2") + byteG.ToString("X2") + byteB.ToString("X2");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CK20Page,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CK20Page.xaml.cs,dec2hex,The following statement contains a magic number: if (string.IsNullOrEmpty(dec))              {                  return "#000000";              }              else if (dec.StartsWith("#"))              {                  if (dec.Length == 7)                      return dec;                  else                      return "#000000";              }              else if (dec.Contains("Transparent"))              {                  return "Transparent";              }              else              {                  if (dec.StartsWith("rgb("))                      dec = dec.Substring(4);                  if (dec.EndsWith(")"))                      dec = dec.Substring(0' dec.Length - 1);                  List<string> deccolours = dec.Split(''').ToList<string>();                  if (deccolours.Count != 3)                      return "#000000";                  int intR = (int)Convert.ToSingle(deccolours.ElementAt(0));                  int intG = (int)Convert.ToSingle(deccolours.ElementAt(1));                  int intB = (int)Convert.ToSingle(deccolours.ElementAt(2));                  byte byteR = Convert.ToByte(intR);                  byte byteG = Convert.ToByte(intG);                  byte byteB = Convert.ToByte(intB);                  return "#" + byteR.ToString("X2") + byteG.ToString("X2") + byteB.ToString("X2");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,AnimateTarget,The following statement contains a magic number: var introAnimation = new DoubleAnimation(0' 1' new Duration(TimeSpan.FromSeconds(0.5))' FillBehavior.Stop);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ToastNotificationPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ToastNotificationPopup.cs,AnimateTarget,The following statement contains a magic number: var outroAnimation = new DoubleAnimation(1' 0' new Duration(TimeSpan.FromSeconds(0.5))' FillBehavior.Stop)              {                  BeginTime = TimeSpan.FromSeconds(displayTimeInSeconds)              };
Magic Number,JuliusSweetland.OptiKey.UI.Controls,MagnifyPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\MagnifyPopup.cs,OnLoaded,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => window.LocationChanged += h'                   h => window.LocationChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.Debug("Window's LocationChanged event detected.");                      screen = window.GetScreen();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,CursorPopup,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\CursorPopup.cs,OnLoaded,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => window.LocationChanged += h'                   h => window.LocationChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.Debug("Window's LocationChanged event detected.");                      Screen = window.GetScreen();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,OnRender,The following statement contains a magic number: if (PointsToDisplay != null)              {                  Log.Debug("PointsToDisplay is not empty - rendering points");                    var canvasWidth = (int)ActualWidth;                  var canvasHeight = (int)ActualHeight;                    if (canvasWidth > 0 && canvasHeight > 0)                  {                      //Create the bitModeScreenCoordinateToKeyMap                      var wb = new WriteableBitmap(canvasWidth' canvasHeight' 96' 96' PixelFormats.Bgra32' null);                        //Create a new image                      var img = new Image                      {                          Source = wb'                          Stretch = Stretch.None'                          HorizontalAlignment = HorizontalAlignment.Left'                          VerticalAlignment = VerticalAlignment.Top                      };                        //Set scaling mode' edge mode and z index on canvas                      RenderOptions.SetBitmapScalingMode(img' BitmapScalingMode.NearestNeighbor);                      RenderOptions.SetEdgeMode(img' EdgeMode.Aliased);                      SetZIndex(img' -100);                        //Each "dot" is 3x3 rectangle (centered on the coordinate detected)                      var rect = new Int32Rect(0' 0' 3' 3);                      int size = rect.Width * rect.Height * 4;                      var pixels = new byte[size];                        int screenCoordinatesIndex = 0;                      int screenCoordinatesIndexUpperBound = PointsToDisplay.Count - 1;                        foreach (Point capturedCoordinate in PointsToDisplay)                      {                          Point canvasPoint = PointFromScreen(capturedCoordinate); //Convert screen to canvas point                            if (canvasPoint.X >= 0 && canvasPoint.X < canvasWidth                              && canvasPoint.Y >= 0 && canvasPoint.Y < canvasHeight)                          {                              SetPixelValuesToRainbow(pixels' rect' screenCoordinatesIndex' screenCoordinatesIndexUpperBound); //Set up pixel colours (as RGB and Alpha array of bytes)                                //We are drawing a 3x3 dot so try to start one pixel up and left (center pixel of rectangle will be the co-ordinate)                              //If coord in against the top or left side (x=0 and/or y=0) this cannot be done' so just place as close as possible                              //If coord in against the bottom or right side (x>=canvasWidth-1 and/or y>=canvasHeight-1) this cannot be done either' so just place as close as possible                              rect.X = (int)canvasPoint.X == 0                                  ? (int)canvasPoint.X                                  : (int)canvasPoint.X > 0 && (int)canvasPoint.X < canvasWidth - 1                                      ? (int)canvasPoint.X - 1                                      : (int)canvasPoint.X - 2;                                rect.Y = (int)canvasPoint.Y == 0                                  ? (int)canvasPoint.Y                                  : (int)canvasPoint.Y > 0 && (int)canvasPoint.Y < canvasHeight - 1                                      ? (int)canvasPoint.Y - 1                                      : (int)canvasPoint.Y - 2;                                wb.WritePixels(rect' pixels' rect.Width * 4' 0);                                screenCoordinatesIndex++;                          }                      }                        dc.DrawImage(wb' new Rect(0' 0' canvasWidth' canvasHeight));                  }              }              else              {                  Log.Debug("OnRender - PointsToDisplay is empty - nothing to render");              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: const double sl = 0.5;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: const double l = 0.5;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,PointVisualiser,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\PointVisualiser.cs,SetPixelValuesToRainbow,The following statement contains a magic number: for (int i = 0; i < rect.Height * rect.Width; ++i)              {                  pixels[i * 4 + 0] = rgb.B; // Blue                  pixels[i * 4 + 1] = rgb.G; // Green                  pixels[i * 4 + 2] = rgb.R; // Red                  pixels[i * 4 + 3] = 255; // Alpha              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var angle = Settings.Default.ProgressIndicatorBehaviour == ProgressIndicatorBehaviours.FillPie ? (Value / MaxValue) * 360 : 360;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var centreX = ActualWidth / 2;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: var centreY = ActualHeight / 2;
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: if (angle >= 360)              {                  piePath = new Path                  {                      Fill = this.Fill'                      //Stroke = this.Stroke'                      //StrokeThickness = 1'                      Data = new GeometryGroup                      {                          //FillRule = FillRule.EvenOdd'                          Children = new GeometryCollection                          {                              new EllipseGeometry                              {                                  Center = new Point(centreX' centreY)'                                  RadiusX = radius'                                  RadiusY = radius                              }                          }                      }                  };              }              else              {                  var innerArcStartPoint = OffsetEx(ComputeCartesianCoordinate(0' 0)' centreX' centreY);                  var innerArcEndPoint = OffsetEx(ComputeCartesianCoordinate(angle' 0)' centreX' centreY);                  var outerArcStartPoint = OffsetEx(ComputeCartesianCoordinate(0' radius)' centreX' centreY);                  var outerArcEndPoint = OffsetEx(ComputeCartesianCoordinate(angle' radius)' centreX' centreY);                    bool largeArc = angle > 180.0;                  var outerArcSize = new Size(radius' radius);                  var innerArcSize = new Size(0' 0);                    piePath = new Path                  {                      Fill = this.Fill'                      //Stroke = this.Stroke'                      //StrokeThickness = 1'                      Data = new PathGeometry                      {                          Figures = new PathFigureCollection                          {                              new PathFigure                              {                                  StartPoint = innerArcStartPoint'                                  Segments = new PathSegmentCollection                                  {                                      new LineSegment                                      {                                          Point = outerArcStartPoint                                      }'                                      new ArcSegment                                      {                                          Point = outerArcEndPoint'                                          Size = outerArcSize'                                          IsLargeArc = largeArc'                                          SweepDirection = SweepDirection.Clockwise'                                          RotationAngle = 0                                      }'                                      new LineSegment                                      {                                          Point = innerArcEndPoint                                      }'                                      new ArcSegment                                      {                                          Point = innerArcStartPoint'                                          Size = innerArcSize'                                          IsLargeArc = largeArc'                                          SweepDirection = SweepDirection.Counterclockwise'                                          RotationAngle = 0                                      }                                  }                              }                          }                      }                  };              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,Render,The following statement contains a magic number: if (angle >= 360)              {                  piePath = new Path                  {                      Fill = this.Fill'                      //Stroke = this.Stroke'                      //StrokeThickness = 1'                      Data = new GeometryGroup                      {                          //FillRule = FillRule.EvenOdd'                          Children = new GeometryCollection                          {                              new EllipseGeometry                              {                                  Center = new Point(centreX' centreY)'                                  RadiusX = radius'                                  RadiusY = radius                              }                          }                      }                  };              }              else              {                  var innerArcStartPoint = OffsetEx(ComputeCartesianCoordinate(0' 0)' centreX' centreY);                  var innerArcEndPoint = OffsetEx(ComputeCartesianCoordinate(angle' 0)' centreX' centreY);                  var outerArcStartPoint = OffsetEx(ComputeCartesianCoordinate(0' radius)' centreX' centreY);                  var outerArcEndPoint = OffsetEx(ComputeCartesianCoordinate(angle' radius)' centreX' centreY);                    bool largeArc = angle > 180.0;                  var outerArcSize = new Size(radius' radius);                  var innerArcSize = new Size(0' 0);                    piePath = new Path                  {                      Fill = this.Fill'                      //Stroke = this.Stroke'                      //StrokeThickness = 1'                      Data = new PathGeometry                      {                          Figures = new PathFigureCollection                          {                              new PathFigure                              {                                  StartPoint = innerArcStartPoint'                                  Segments = new PathSegmentCollection                                  {                                      new LineSegment                                      {                                          Point = outerArcStartPoint                                      }'                                      new ArcSegment                                      {                                          Point = outerArcEndPoint'                                          Size = outerArcSize'                                          IsLargeArc = largeArc'                                          SweepDirection = SweepDirection.Clockwise'                                          RotationAngle = 0                                      }'                                      new LineSegment                                      {                                          Point = innerArcEndPoint                                      }'                                      new ArcSegment                                      {                                          Point = innerArcStartPoint'                                          Size = innerArcSize'                                          IsLargeArc = largeArc'                                          SweepDirection = SweepDirection.Counterclockwise'                                          RotationAngle = 0                                      }                                  }                              }                          }                      }                  };              }
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,ComputeCartesianCoordinate,The following statement contains a magic number: double angleRad = (Math.PI / 180.0) * (angle - 90);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,ProgressIndicator,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\ProgressIndicator.cs,ComputeCartesianCoordinate,The following statement contains a magic number: double angleRad = (Math.PI / 180.0) * (angle - 90);
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToSizeChanges,The following statement contains a magic number: Observable.FromEventPattern<SizeChangedEventHandler' SizeChangedEventArgs>                  (h => SizeChanged += h'                  h => SizeChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(ep =>                  {                      Log.InfoFormat("SizeChanged event detected from {0} to {1}."' ep.EventArgs.PreviousSize' ep.EventArgs.NewSize);                      BuildPointToKeyMap();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowMoves,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => parentWindow.LocationChanged += h'                  h => parentWindow.LocationChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.Info("Window's LocationChanged event detected.");                      BuildPointToKeyMap();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,SubscribeToParentWindowStateChanges,The following statement contains a magic number: Observable.FromEventPattern<EventHandler' EventArgs>                  (h => parentWindow.StateChanged += h'                  h => parentWindow.StateChanged -= h)                  .Throttle(TimeSpan.FromSeconds(0.1))                  .ObserveOnDispatcher()                  .Subscribe(_ =>                  {                      Log.InfoFormat("Window's StateChange event detected. New state: {0}."' parentWindow.WindowState);                      BuildPointToKeyMap();                  });
Magic Number,JuliusSweetland.OptiKey.UI.Controls,Output,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Output.xaml.cs,Output,The following statement contains a magic number: Loaded += (sender' args) => NumberOfSuggestionsDisplayed = 4;
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,CalculateScratchpadWidth,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\CalculateScratchpadWidth.cs,Convert,The following statement contains a magic number: if (values == null || values.Length != 2)              {                  return new GridLength(DefaultGridLength' GridUnitType.Star);              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,FontSizeToFitLines,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\FontSizeToFitLines.cs,Convert,The following statement contains a magic number: if (values != null                   && values.Count() == 3                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var noOfLines = (int)values[0];                  var height = (double)values[1];                  var fontFamily = (FontFamily)values[2];                    var lineHeight = height/noOfLines;                    return lineHeight / fontFamily.LineSpacing;              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,FontSizeToFitLines,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\FontSizeToFitLines.cs,Convert,The following statement contains a magic number: if (values != null                   && values.Count() == 3                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var noOfLines = (int)values[0];                  var height = (double)values[1];                  var fontFamily = (FontFamily)values[2];                    var lineHeight = height/noOfLines;                    return lineHeight / fontFamily.LineSpacing;              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,MinimiseAndDockPositionToSymbolOrientation,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\MinimiseAndDockPositionToSymbolOrientation.cs,Convert,The following statement contains a magic number: if (values.Length == 2                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var minimisedPosition = (MinimisedEdges)values[0];                  var dockPosition = (DockEdges)values[1];                    switch (minimisedPosition == MinimisedEdges.SameAsDockedPosition ? dockPosition.ToMinimisedEdge() : minimisedPosition)                  {                      case MinimisedEdges.Right:                          return SymbolOrientations.Right;                        case MinimisedEdges.Bottom:                          return SymbolOrientations.Bottom;                        case MinimisedEdges.Left:                          return SymbolOrientations.Left;                        default: //case MinimisedEdges.Top:                          return SymbolOrientations.Top;                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,WidthGreaterThanHeight,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\WidthGreaterThanHeight.cs,Convert,The following statement contains a magic number: if (values.Length == 2                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var width = (double)values[0];                  var height = (double)values[1];                  return width >= height;                  }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,LengthDividedBySpan,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\LengthDividedBySpan.cs,Convert,The following statement contains a magic number: if (values != null                   && values.Length == 2                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var length = (double)values[0];                  var span = (double)values[1];                    return length / span;              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: if (values != null                  && values.Count() == 4                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var suggestions = values[0] as List<string>;                  var suggestionsPage = (int) values[1];                  var suggestionsPerPage = (int) values[2];                  var suggestionIndex = (int) values[3];                    if (suggestions != null)                  {                      var index = (suggestionsPage * suggestionsPerPage) + suggestionIndex;                        if (suggestions.Count > index)                      {                          return suggestions[index];                      }                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: if (values != null                  && values.Count() == 4                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var suggestions = values[0] as List<string>;                  var suggestionsPage = (int) values[1];                  var suggestionsPerPage = (int) values[2];                  var suggestionIndex = (int) values[3];                    if (suggestions != null)                  {                      var index = (suggestionsPage * suggestionsPerPage) + suggestionIndex;                        if (suggestions.Count > index)                      {                          return suggestions[index];                      }                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.ValueConverters,SuggestionsPaged,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ValueConverters\SuggestionsPaged.cs,Convert,The following statement contains a magic number: if (values != null                  && values.Count() == 4                  && values.All(v => v != DependencyProperty.UnsetValue))              {                  var suggestions = values[0] as List<string>;                  var suggestionsPage = (int) values[1];                  var suggestionsPerPage = (int) values[2];                  var suggestionIndex = (int) values[3];                    if (suggestions != null)                  {                      var index = (suggestionsPage * suggestionsPerPage) + suggestionIndex;                        if (suggestions.Count > index)                      {                          return suggestions[index];                      }                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.ViewModels,MainViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\MainViewModel.ServiceEventHandlers.cs,HandleFunctionKeySelectionResult,The following statement contains a magic number: switch (singleKeyValue.FunctionKey.Value)              {                  case FunctionKeys.AddToDictionary:                      AddTextToDictionary();                      break;                    case FunctionKeys.Alpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to Alpha1.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.Alpha2Keyboard:                      Log.Info("Changing keyboard to Alpha2.");                      Keyboard = new Alpha2();                      break;                    case FunctionKeys.Attention:                      audioService.PlaySound(Settings.Default.AttentionSoundFile'                           Settings.Default.AttentionSoundVolume);                      break;                    case FunctionKeys.BackFromKeyboard:                      Log.Info("Navigating back from keyboard.");                      var navigableKeyboard = Keyboard as IBackAction;                      if (navigableKeyboard != null && navigableKeyboard.BackAction != null)                      {                          navigableKeyboard.BackAction();                      }                      else                      {                          Log.Error("Keyboard doesn't have back action' going back to initial keyboard instead");                          Keyboard = new Alpha1();                          if (Settings.Default.EnableCommuniKateKeyboardLayout)                          {                              Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                              Settings.Default.CommuniKateKeyboardCurrentContext = null;                              Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                              Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                          }                                                  InitialiseKeyboard(this.mainWindowManipulationService);                                           }                      break;                    case FunctionKeys.Calibrate:                      if (CalibrationService != null)                      {                          Log.Info("Calibrate requested.");                                                        var question = CalibrationService.CanBeCompletedWithoutManualIntervention                              ? Resources.CALIBRATION_CONFIRMATION_MESSAGE                              : Resources.CALIBRATION_REQUIRES_MANUAL_INTERACTION;                                                        Keyboard = new YesNoQuestion(                              question'                              () =>                              {                                  inputService.RequestSuspend();                                  CalibrateRequest.Raise(new NotificationWithCalibrationResult()' calibrationResult =>                                  {                                      if (calibrationResult.Success)                                      {                                          audioService.PlaySound(Settings.Default.InfoSoundFile' Settings.Default.InfoSoundVolume);                                          RaiseToastNotification(Resources.SUCCESS' calibrationResult.Message' NotificationTypes.Normal' () => inputService.RequestResume());                                      }                                      else                                      {                                          audioService.PlaySound(Settings.Default.ErrorSoundFile' Settings.Default.ErrorSoundVolume);                                          RaiseToastNotification(Resources.CRASH_TITLE' calibrationResult.Exception != null                                                  ? calibrationResult.Exception.Message                                                  : calibrationResult.Message ?? Resources.UNKNOWN_CALIBRATION_ERROR'                                               NotificationTypes.Error'                                               () => inputService.RequestResume());                                      }                                  });                                  Keyboard = currentKeyboard;                              }'                              () =>                              {                                  Keyboard = currentKeyboard;                              });                      }                      break;                    case FunctionKeys.CatalanSpain:                      Log.Info("Changing keyboard language to CatalanSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CatalanSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.CollapseDock:                      Log.Info("Collapsing dock.");                      mainWindowManipulationService.ResizeDockToCollapsed();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Collapsed;                      }                      break;                    case FunctionKeys.CommuniKateKeyboard:                      Settings.Default.CommuniKateKeyboardCurrentContext = null;                      Settings.Default.UsingCommuniKateKeyboardLayout = true;                      Log.Info("Changing keyboard to CommuniKate.");                      Keyboard = new Alpha1();                      break;                    case FunctionKeys.ConversationAlpha1Keyboard:                      if (Settings.Default.EnableCommuniKateKeyboardLayout)                      {                          Settings.Default.UsingCommuniKateKeyboardLayout = Settings.Default.UseCommuniKateKeyboardLayoutByDefault;                          Settings.Default.CommuniKateKeyboardCurrentContext = null;                          Settings.Default.CommuniKateKeyboardPrevious1Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious2Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious3Context = "_null_";                          Settings.Default.CommuniKateKeyboardPrevious4Context = "_null_";                      }                      Log.Info("Changing keyboard to ConversationAlpha1.");                      var opacityBeforeConversationAlpha1 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha1BackAction = currentKeyboard is ConversationAlpha2                          ? ((ConversationAlpha2)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha1);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha1);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha1(conversationAlpha1BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationAlpha2Keyboard:                      Log.Info("Changing keyboard to ConversationAlpha2.");                      var opacityBeforeConversationAlpha2 = mainWindowManipulationService.GetOpacity();                      Action conversationAlpha2BackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationNumericAndSymbols                              ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationConfirm                                      ? ((ConversationConfirm)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationAlpha2);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationAlpha2);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationAlpha2(conversationAlpha2BackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationConfirmKeyboard:                      Log.Info("Changing keyboard to ConversationConfirm.");                      var opacityBeforeConversationConfirm = mainWindowManipulationService.GetOpacity();                      Action conversationConfirmBackAction = currentKeyboard is ConversationAlpha1                          ? ((ConversationAlpha1)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha2                              ? ((ConversationAlpha2)currentKeyboard).BackAction                              : currentKeyboard is SimplifiedConversationAlpha                                  ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                  : currentKeyboard is ConversationNumericAndSymbols                                      ? ((ConversationNumericAndSymbols)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationConfirm);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationConfirm);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationConfirm(conversationConfirmBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.ConversationNumericAndSymbolsKeyboard:                      Log.Info("Changing keyboard to ConversationNumericAndSymbols.");                      var opacityBeforeConversationNumericAndSymbols = mainWindowManipulationService.GetOpacity();                      Action conversationNumericAndSymbolsBackAction = currentKeyboard is ConversationConfirm                          ? ((ConversationConfirm)currentKeyboard).BackAction                          : currentKeyboard is ConversationAlpha1                              ? ((ConversationAlpha1)currentKeyboard).BackAction                              : currentKeyboard is ConversationAlpha2                                  ? ((ConversationAlpha2)currentKeyboard).BackAction                                  : currentKeyboard is SimplifiedConversationAlpha                                      ? ((SimplifiedConversationAlpha)currentKeyboard).BackAction                                      : () =>                                      {                                          Log.Info("Restoring window size.");                                          mainWindowManipulationService.Restore();                                          Log.InfoFormat("Restoring window opacity to {0}"' opacityBeforeConversationNumericAndSymbols);                                          mainWindowManipulationService.SetOpacity(opacityBeforeConversationNumericAndSymbols);                                          Keyboard = currentKeyboard;                                      };                      Keyboard = new ConversationNumericAndSymbols(conversationNumericAndSymbolsBackAction);                      Log.Info("Maximising window.");                      mainWindowManipulationService.Maximise();                      Log.InfoFormat("Setting opacity to 1 (fully opaque)");                      mainWindowManipulationService.SetOpacity(1);                      break;                    case FunctionKeys.CroatianCroatia:                      Log.Info("Changing keyboard language to CroatianCroatia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CroatianCroatia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Currencies1Keyboard:                      Log.Info("Changing keyboard to Currencies1.");                      Keyboard = new Currencies1();                      break;                    case FunctionKeys.Currencies2Keyboard:                      Log.Info("Changing keyboard to Currencies2.");                      Keyboard = new Currencies2();                      break;                    case FunctionKeys.DynamicKeyboard:                      {                          Log.Info("Changing keyboard to DynamicKeyboard.");                            var currentKeyboard2 = Keyboard;                            Action reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          Action backAction = () =>                          {                              Keyboard = currentKeyboard2;                                reinstateModifiers();                                // Clear the scratchpad when leaving keyboard                              // (proper scratchpad functionality not supported in dynamic keyboards presently                              keyboardOutputService.ProcessFunctionKey(FunctionKeys.ClearScratchpad);                          };                            int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex + 1;                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                      case FunctionKeys.DynamicKeyboardPrev:                      {                          Log.Info("Changing keyboard to prev DynamicKeyboard.");                            Action backAction;                          var currentKeyboard2 = Keyboard;                          int pageIndex = 0;                          if (Keyboard is DynamicKeyboardSelector)                          {                              var kb = Keyboard as DynamicKeyboardSelector;                              backAction = kb.BackAction;                              pageIndex = kb.PageIndex - 1;                          }                          else                          {                              Log.Error("Unexpectedly entering DynamicKeyboardPrev from somewhere other than DynamicKeyboard");                              backAction = () =>                              {                                  Keyboard = currentKeyboard2;                              };                          }                          Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                      }                      break;                case FunctionKeys.DynamicKeyboardNext:                  {                      Log.Info("Changing keyboard to next DynamicKeyboard.");                        Action backAction;                      var currentKeyboard2 = Keyboard;                      int pageIndex = 0;                      if (Keyboard is DynamicKeyboardSelector)                      {                          var kb = Keyboard as DynamicKeyboardSelector;                          backAction = kb.BackAction;                          pageIndex = kb.PageIndex + 1;                      }                      else                      {                          Log.Error("Unexpectedly entering DynamicKeyboardNext from somewhere other than DynamicKeyboard");                          backAction = () =>                          {                              Keyboard = currentKeyboard2;                          };                      }                      Keyboard = new DynamicKeyboardSelector(backAction' pageIndex);                  }                  break;                    case FunctionKeys.CzechCzechRepublic:                      Log.Info("Changing keyboard language to CzechCzechRepublic.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.CzechCzechRepublic;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DanishDenmark:                      Log.Info("Changing keyboard language to DanishDenmark.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DanishDenmark;                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DecreaseOpacity:                      Log.Info("Decreasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(false);                      break;                    case FunctionKeys.Diacritic1Keyboard:                      Log.Info("Changing keyboard to Diacritic1.");                      Keyboard = new Diacritics1();                      break;                    case FunctionKeys.Diacritic2Keyboard:                      Log.Info("Changing keyboard to Diacritic2.");                      Keyboard = new Diacritics2();                      break;                    case FunctionKeys.Diacritic3Keyboard:                      Log.Info("Changing keyboard to Diacritic3.");                      Keyboard = new Diacritics3();                      break;                    case FunctionKeys.DutchBelgium:                      Log.Info("Changing keyboard language to DutchBelgium.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchBelgium;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.DutchNetherlands:                      Log.Info("Changing keyboard language to DutchNetherlands.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.DutchNetherlands;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishCanada:                      Log.Info("Changing keyboard language to EnglishCanada.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishCanada;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUK:                      Log.Info("Changing keyboard language to EnglishUK.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUK;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.EnglishUS:                      Log.Info("Changing keyboard language to EnglishUS.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.EnglishUS;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ExpandDock:                      Log.Info("Expanding dock.");                      mainWindowManipulationService.ResizeDockToFull();                      if (Keyboard is ViewModels.Keyboards.Mouse)                      {                          Settings.Default.MouseKeyboardDockSize = DockSizes.Full;                      }                      break;                    case FunctionKeys.ExpandToBottom:                      Log.InfoFormat("Expanding to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndLeft:                      Log.InfoFormat("Expanding to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToBottomAndRight:                      Log.InfoFormat("Expanding to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToLeft:                      Log.InfoFormat("Expanding to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToRight:                      Log.InfoFormat("Expanding to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTop:                      Log.InfoFormat("Expanding to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndLeft:                      Log.InfoFormat("Expanding to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ExpandToTopAndRight:                      Log.InfoFormat("Expanding to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Expand(ExpandToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.FrenchFrance:                      Log.Info("Changing keyboard language to FrenchFrance.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.FrenchFrance;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GermanGermany:                      Log.Info("Changing keyboard language to GermanGermany.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GermanGermany;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.GreekGreece:                      Log.Info("Changing keyboard language to GreekGreece.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.GreekGreece;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.IncreaseOpacity:                      Log.Info("Increasing opacity.");                      mainWindowManipulationService.IncrementOrDecrementOpacity(true);                      break;                    case FunctionKeys.ItalianItaly:                      Log.Info("Changing keyboard language to ItalianItaly.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.ItalianItaly;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.KoreanKorea:                      Log.Info("Changing keyboard language to KoreanKorea.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.KoreanKorea;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.LanguageKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Language.");                      Keyboard = new Language(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.MenuKeyboard:                      Log.Info("Restoring window size.");                      mainWindowManipulationService.Restore();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Minimise:                      Log.Info("Minimising window.");                      mainWindowManipulationService.Minimise();                      Log.Info("Changing keyboard to Minimised.");                      Keyboard = new Minimised(() =>                      {                          Log.Info("Restoring window size.");                          mainWindowManipulationService.Restore();                          Keyboard = currentKeyboard;                      });                      break;                    case FunctionKeys.MouseDrag:                      Log.Info("Mouse drag selected.");                      SetupFinalClickAction(firstFinalPoint =>                      {                          if (firstFinalPoint != null)                          {                              audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                                                                //This class reacts to the point selection event AFTER the MagnifyPopup reacts to it.                              //This means that if the MagnifyPopup sets the nextPointSelectionAction from the                              //MagnifiedPointSelectionAction then it will be called immediately i.e. for the same point.                              //The workaround is to set the nextPointSelectionAction to a lambda which sets the NEXT                              //nextPointSelectionAction. This means the immediate call to the lambda just sets up the                              //delegate for the subsequent call.                              nextPointSelectionAction = repeatFirstClickOrSecondClickAction =>                              {                                  Action<Point> deferIfMagnifyingElseDoNow = repeatFirstClickOrSecondClickPoint =>                                  {                                      Action<Point?> secondFinalClickAction = secondFinalPoint =>                                      {                                          if (secondFinalPoint != null)                                          {                                              Action<Point' Point> simulateDrag = (fp1' fp2) =>                                              {                                                  Log.InfoFormat("Performing mouse drag between points ({0}'{1}) and {2}'{3})."' fp1.X' fp1.Y' fp2.X' fp2.Y);                                                  Action reinstateModifiers = () => { };                                                  if (keyStateService.SimulateKeyStrokes                                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                                  {                                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                                  }                                                  mouseOutputService.MoveTo(fp1);                                                  mouseOutputService.LeftButtonDown();                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterLeftMouseButtonDownBeforeMove);                                                  audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                                                  mouseOutputService.MoveTo(fp2);                                                  Thread.Sleep(Settings.Default.MouseDragDelayAfterMoveBeforeLeftMouseButtonUp);                                                  mouseOutputService.LeftButtonUp();                                                  reinstateModifiers();                                              };                                                lastMouseActionStateManager.LastMouseAction =                                                  () => simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                              simulateDrag(firstFinalPoint.Value' secondFinalPoint.Value);                                          }                                            ResetAndCleanupAfterMouseAction();                                      };                                        if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                      {                                          ShowCursor = false; //See MouseMoveAndLeftClick case for explanation of this                                          MagnifiedPointSelectionAction = secondFinalClickAction;                                          MagnifyAtPoint = repeatFirstClickOrSecondClickPoint;                                          ShowCursor = true;                                      }                                      else                                      {                                          secondFinalClickAction(repeatFirstClickOrSecondClickPoint);                                      }                                        nextPointSelectionAction = null;                                  };                                    if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value.IsDownOrLockedDown())                                  {                                      nextPointSelectionAction = deferIfMagnifyingElseDoNow;                                  }                                  else                                  {                                      deferIfMagnifyingElseDoNow(repeatFirstClickOrSecondClickAction);                                  }                              };                          }                          else                          {                              //Reset and clean up if we are not continuing to 2nd point                              SelectionMode = SelectionModes.Key;                              nextPointSelectionAction = null;                              ShowCursor = false;                              if (keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value == KeyDownStates.Down)                              {                                  keyStateService.KeyDownStates[KeyValues.MouseMagnifierKey].Value = KeyDownStates.Up; //Release magnifier if down but not locked down                              }                          }                            //Reset and clean up                          MagnifyAtPoint = null;                          MagnifiedPointSelectionAction = null;                      }' finalClickInSeries: false);                      break;                    case FunctionKeys.MouseKeyboard:                      {                          Log.Info("Changing keyboard to Mouse.");                          Action backAction;                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysWhenInMouseKeyboard)                          {                              var restoreModifierStates = keyStateService.ReleaseModifiers(Log);                              backAction = () =>                              {                                  restoreModifierStates();                                  Keyboard = currentKeyboard;                              };                          }                          else                          {                              backAction = () => Keyboard = currentKeyboard;                          }                          Keyboard = new Mouse(backAction);                          //Reinstate mouse keyboard docked state (if docked)                          if (Settings.Default.MainWindowState == WindowStates.Docked)                          {                              if (Settings.Default.MouseKeyboardDockSize == DockSizes.Full                                  && Settings.Default.MainWindowDockSize != DockSizes.Full)                              {                                  mainWindowManipulationService.ResizeDockToFull();                              }                              else if (Settings.Default.MouseKeyboardDockSize == DockSizes.Collapsed                                  && Settings.Default.MainWindowDockSize != DockSizes.Collapsed)                              {                                  mainWindowManipulationService.ResizeDockToCollapsed();                              }                          }                      }                      break;                    case FunctionKeys.MouseLeftClick:                      var leftClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left click selected at point ({0}'{1})."' leftClickPoint.X' leftClickPoint.Y);                      Action performLeftClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.LeftButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftClick();                      performLeftClick();                      break;                    case FunctionKeys.MouseLeftDoubleClick:                      var leftDoubleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse left double click selected at point ({0}'{1})."' leftDoubleClickPoint.X' leftDoubleClickPoint.Y);                      Action performLeftDoubleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(leftDoubleClickPoint);                          audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                          mouseOutputService.LeftButtonDoubleClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performLeftDoubleClick();                      performLeftDoubleClick();                      break;                    case FunctionKeys.MouseLeftDownUp:                      var leftDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseLeftDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse left button down at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.LeftButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse left button at point ({0}'{1})."' leftDownUpPoint.X' leftDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.LeftButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMiddleClick:                      var middleClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse middle click selected at point ({0}'{1})."' middleClickPoint.X' middleClickPoint.Y);                      Action performMiddleClick = () =>                      {                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(middleClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.MiddleButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performMiddleClick();                      performMiddleClick();                      break;                    case FunctionKeys.MouseMiddleDownUp:                      var middleDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseMiddleDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse middle button down at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.MiddleButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse middle button at point ({0}'{1})."' middleDownUpPoint.X' middleDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.MiddleButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MouseMoveAndLeftClick:                      Log.Info("Mouse move and left click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndLeftClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndLeftDoubleClick:                      Log.Info("Mouse move and left double click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse left double click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseDoubleClickSoundFile' Settings.Default.MouseDoubleClickSoundVolume);                                  mouseOutputService.MoveAndLeftDoubleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                                                        ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAndMiddleClick:                      Log.Info("Mouse move and middle click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse middle click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndMiddleClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                                            case FunctionKeys.MouseMoveAndRightClick:                      Log.Info("Mouse move and right click selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateClick = fp =>                              {                                  Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                                  mouseOutputService.MoveAndRightClick(fp' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateClick(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateClick(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveAmountInPixels:                      Log.Info("Progressing MouseMoveAmountInPixels.");                      switch (Settings.Default.MouseMoveAmountInPixels)                      {                          case 1:                              Settings.Default.MouseMoveAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MouseMoveAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MouseMoveAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MouseMoveAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MouseMoveAmountInPixels = 100;                              break;                            default:                              Settings.Default.MouseMoveAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseMoveAndScrollToBottom:                      Log.Info("Mouse move and scroll to bottom selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToBottom = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to bottom at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToBottom(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification:true);                      break;                    case FunctionKeys.MouseMoveAndScrollToLeft:                      Log.Info("Mouse move and scroll to left selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToLeft = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to left at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelLeft(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToLeft(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToLeft(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToRight:                      Log.Info("Mouse move and scroll to right selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToRight = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to right at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelRight(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToRight(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToRight(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                    case FunctionKeys.MouseMoveAndScrollToTop:                      Log.Info("Mouse move and scroll to top selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateScrollToTop = fp =>                              {                                  Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                  mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(finalPoint.Value);                              ShowCursor = false; //Hide cursor popup before performing action as it is possible for it to be performed on the popup                              simulateScrollToTop(finalPoint.Value);                          }                            ResetAndCleanupAfterMouseAction();                      }' suppressMagnification: true);                      break;                        case FunctionKeys.MouseScrollToTop:                            var currentPoint = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPoint.X' currentPoint.Y);                          Action<Point?> performScroll = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToTop = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelUp(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToTop(point.Value);                                  simulateScrollToTop(point.Value);                              }                          };                          performScroll(currentPoint);                          ResetAndCleanupAfterMouseAction();                            break;                        case FunctionKeys.MouseScrollToBottom:                            var currentPointScroll = mouseOutputService.GetCursorPosition();                          Log.InfoFormat("Mouse scroll to top selected at point ({0}'{1})."' currentPointScroll.X' currentPointScroll.Y);                          Action<Point?> performScrollDown = point =>                          {                              if (point != null)                              {                                  Action<Point> simulateScrollToBottom = fp =>                                  {                                      Log.InfoFormat("Performing mouse scroll to top at point ({0}'{1})."' fp.X' fp.Y);                                      audioService.PlaySound(Settings.Default.MouseScrollSoundFile' Settings.Default.MouseScrollSoundVolume);                                      mouseOutputService.MoveAndScrollWheelDown(fp' Settings.Default.MouseScrollAmountInClicks' true);                                  };                                  lastMouseActionStateManager.LastMouseAction = () => simulateScrollToBottom(point.Value);                                  simulateScrollToBottom(point.Value);                              }                          };                          performScrollDown(currentPointScroll);                          ResetAndCleanupAfterMouseAction();                            break;                    case FunctionKeys.MouseMoveTo:                      Log.Info("Mouse move to selected.");                      SetupFinalClickAction(finalPoint =>                      {                          if (finalPoint != null)                          {                              Action<Point> simulateMoveTo = fp =>                              {                                  Log.InfoFormat("Performing mouse move to point ({0}'{1})."' fp.X' fp.Y);                                  Action reinstateModifiers = () => { };                                  if (keyStateService.SimulateKeyStrokes                                      && Settings.Default.SuppressModifierKeysForAllMouseActions)                                  {                                      reinstateModifiers = keyStateService.ReleaseModifiers(Log);                                  }                                  mouseOutputService.MoveTo(fp);                                  reinstateModifiers();                              };                              lastMouseActionStateManager.LastMouseAction = () => simulateMoveTo(finalPoint.Value);                              simulateMoveTo(finalPoint.Value);                          }                          ResetAndCleanupAfterMouseAction();                      });                      break;                    case FunctionKeys.MouseMoveToBottom:                      Log.Info("Mouse move to bottom selected.");                      Action simulateMoveToBottom = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y + Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToBottom;                      simulateMoveToBottom();                      break;                    case FunctionKeys.MouseMoveToLeft:                      Log.Info("Mouse move to left selected.");                      Action simulateMoveToLeft = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X - Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToLeft;                      simulateMoveToLeft();                      break;                    case FunctionKeys.MouseMoveToRight:                      Log.Info("Mouse move to right selected.");                      Action simulateMoveToRight = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X + Settings.Default.MouseMoveAmountInPixels' cursorPosition.Y);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToRight;                      simulateMoveToRight();                      break;                    case FunctionKeys.MouseMoveToTop:                      Log.Info("Mouse move to top selected.");                      Action simulateMoveToTop = () =>                      {                          var cursorPosition = mouseOutputService.GetCursorPosition();                          var moveToPoint = new Point(cursorPosition.X' cursorPosition.Y - Settings.Default.MouseMoveAmountInPixels);                          Log.InfoFormat("Performing mouse move to point ({0}'{1})."' moveToPoint.X' moveToPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(moveToPoint);                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = simulateMoveToTop;                      simulateMoveToTop();                      break;                    case FunctionKeys.MouseRightClick:                      var rightClickPoint = mouseOutputService.GetCursorPosition();                      Log.InfoFormat("Mouse right click selected at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                      Action performRightClick = () =>                      {                          Log.InfoFormat("Performing mouse right click at point ({0}'{1})."' rightClickPoint.X' rightClickPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          mouseOutputService.MoveTo(rightClickPoint);                          audioService.PlaySound(Settings.Default.MouseClickSoundFile' Settings.Default.MouseClickSoundVolume);                          mouseOutputService.RightButtonClick();                          reinstateModifiers();                      };                      lastMouseActionStateManager.LastMouseAction = () => performRightClick();                      performRightClick();                      break;                    case FunctionKeys.MouseRightDownUp:                      var rightDownUpPoint = mouseOutputService.GetCursorPosition();                      if (keyStateService.KeyDownStates[KeyValues.MouseRightDownUpKey].Value.IsDownOrLockedDown())                      {                          Log.InfoFormat("Pressing mouse right button down at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseDownSoundFile' Settings.Default.MouseDownSoundVolume);                          mouseOutputService.RightButtonDown();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      else                      {                          Log.InfoFormat("Releasing mouse right button at point ({0}'{1})."' rightDownUpPoint.X' rightDownUpPoint.Y);                          Action reinstateModifiers = () => { };                          if (keyStateService.SimulateKeyStrokes                              && Settings.Default.SuppressModifierKeysForAllMouseActions)                          {                              reinstateModifiers = keyStateService.ReleaseModifiers(Log);                          }                          audioService.PlaySound(Settings.Default.MouseUpSoundFile' Settings.Default.MouseUpSoundVolume);                          mouseOutputService.RightButtonUp();                          reinstateModifiers();                          lastMouseActionStateManager.LastMouseAction = null;                      }                      break;                    case FunctionKeys.MoveAndResizeAdjustmentAmount:                      Log.Info("Progressing MoveAndResizeAdjustmentAmount.");                      switch (Settings.Default.MoveAndResizeAdjustmentAmountInPixels)                      {                          case 1:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 5;                              break;                            case 5:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 10;                              break;                            case 10:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 25;                              break;                            case 25:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 50;                              break;                            case 50:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 100;                              break;                            default:                              Settings.Default.MoveAndResizeAdjustmentAmountInPixels = 1;                              break;                      }                      break;                    case FunctionKeys.MouseScrollAmountInClicks:                      Log.Info("Progressing MouseScrollAmountInClicks.");                      switch (Settings.Default.MouseScrollAmountInClicks)                      {                          case 1:                              Settings.Default.MouseScrollAmountInClicks = 3;                              break;                            case 3:                              Settings.Default.MouseScrollAmountInClicks = 5;                              break;                            case 5:                              Settings.Default.MouseScrollAmountInClicks = 10;                              break;                            case 10:                              Settings.Default.MouseScrollAmountInClicks = 25;                              break;                            default:                              Settings.Default.MouseScrollAmountInClicks = 1;                              break;                      }                      break;                    case FunctionKeys.MoveToBottom:                      Log.InfoFormat("Moving to bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeft:                      Log.InfoFormat("Moving to bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndLeftBoundaries:                      Log.Info("Moving to bottom and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomLeft' null);                      break;                    case FunctionKeys.MoveToBottomAndRight:                      Log.InfoFormat("Moving to bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToBottomAndRightBoundaries:                      Log.Info("Moving to bottom and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.BottomRight' null);                      break;                    case FunctionKeys.MoveToBottomBoundary:                      Log.Info("Moving to bottom boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Bottom' null);                      break;                    case FunctionKeys.MoveToLeft:                      Log.InfoFormat("Moving to left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToLeftBoundary:                      Log.Info("Moving to left boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Left' null);                      break;                    case FunctionKeys.MoveToRight:                      Log.InfoFormat("Moving to right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToRightBoundary:                      Log.Info("Moving to right boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Right' null);                      break;                    case FunctionKeys.MoveToTop:                      Log.InfoFormat("Moving to top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeft:                      Log.InfoFormat("Moving to top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndLeftBoundaries:                      Log.Info("Moving to top and left boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopLeft' null);                      break;                    case FunctionKeys.MoveToTopAndRight:                      Log.InfoFormat("Moving to top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Move(MoveToDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.MoveToTopAndRightBoundaries:                      Log.Info("Moving to top and right boundaries.");                      mainWindowManipulationService.Move(MoveToDirections.TopRight' null);                      break;                    case FunctionKeys.MoveToTopBoundary:                      Log.Info("Moving to top boundary.");                      mainWindowManipulationService.Move(MoveToDirections.Top' null);                      break;                                            case FunctionKeys.NextSuggestions:                      Log.Info("Incrementing suggestions page.");                        if (suggestionService.Suggestions != null                          && (suggestionService.Suggestions.Count > (suggestionService.SuggestionsPage + 1) * SuggestionService.SuggestionsPerPage))                      {                          suggestionService.SuggestionsPage++;                      }                      break;                    case FunctionKeys.NoQuestionResult:                      HandleYesNoQuestionResult(false);                      break;                    case FunctionKeys.NumericAndSymbols1Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols1.");                      Keyboard = new NumericAndSymbols1();                      break;                    case FunctionKeys.NumericAndSymbols2Keyboard:                      Log.Info("Changing keyboard to NumericAndSymbols2.");                      Keyboard = new NumericAndSymbols2();                      break;                    case FunctionKeys.NumericAndSymbols3Keyboard:                      Log.Info("Changing keyboard to Symbols3.");                      Keyboard = new NumericAndSymbols3();                      break;                    case FunctionKeys.PhysicalKeysKeyboard:                      Log.Info("Changing keyboard to PhysicalKeys.");                      Keyboard = new PhysicalKeys();                      break;                    case FunctionKeys.PortuguesePortugal:                      Log.Info("Changing keyboard language to PortuguesePortugal.");                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.PortuguesePortugal;                      Log.Info("Changing keyboard to Menu");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.PreviousSuggestions:                      Log.Info("Decrementing suggestions page.");                        if (suggestionService.SuggestionsPage > 0)                      {                          suggestionService.SuggestionsPage--;                      }                      break;                    case FunctionKeys.Quit:                      Log.Info("Quit key selected.");                      var keyboardBeforeQuit = Keyboard;                      Keyboard = new YesNoQuestion(Resources.QUIT_MESSAGE'                          () =>                          {                              Keyboard = new YesNoQuestion(Resources.QUIT_CONFIRMATION_MESSAGE'                                  () => Application.Current.Shutdown()'                                  () => { Keyboard = keyboardBeforeQuit; });                          }'                          () => { Keyboard = keyboardBeforeQuit; });                      break;                    case FunctionKeys.RepeatLastMouseAction:                      if (lastMouseActionStateManager.LastMouseAction != null)                      {                          lastMouseActionStateManager.LastMouseAction();                      }                      break;                    case FunctionKeys.RussianRussia:                      Log.Info("Changing keyboard language to RussianRussia.");                          InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.RussianRussia;                          InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.ShrinkFromBottom:                      Log.InfoFormat("Shrinking from bottom by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Bottom' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndLeft:                      Log.InfoFormat("Shrinking from bottom and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromBottomAndRight:                      Log.InfoFormat("Shrinking from bottom and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.BottomRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromLeft:                      Log.InfoFormat("Shrinking from left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Left' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromRight:                      Log.InfoFormat("Shrinking from right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Right' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTop:                      Log.InfoFormat("Shrinking from top by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.Top' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndLeft:                      Log.InfoFormat("Shrinking from top and left by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopLeft' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.ShrinkFromTopAndRight:                      Log.InfoFormat("Shrinking from top and right by {0}px."' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      mainWindowManipulationService.Shrink(ShrinkFromDirections.TopRight' Settings.Default.MoveAndResizeAdjustmentAmountInPixels);                      break;                    case FunctionKeys.SizeAndPositionKeyboard:                      Log.Info("Changing keyboard to Size & Position.");                      Keyboard = new SizeAndPosition(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovakSlovakia:                      Log.Info("Changing keyboard language to SlovakSlovakia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovakSlovakia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SlovenianSlovenia:                      Log.Info("Changing keyboard language to SlovenianSlovenia.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SlovenianSlovenia;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.SpanishSpain:                      Log.Info("Changing keyboard language to SpanishSpain.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.SpanishSpain;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.Speak:                      var speechStarted = audioService.SpeakNewOrInterruptCurrentSpeech(                          keyboardOutputService.Text'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStarted ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmYes:                      var speechStartedYes = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.YES'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedYes ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.ConversationConfirmNo:                      var speechStartedNo = audioService.SpeakNewOrInterruptCurrentSpeech(                          Resources.NO'                          () => { KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = KeyDownStates.Up; }'                          Settings.Default.SpeechVolume'                          Settings.Default.SpeechRate'                          Settings.Default.SpeechVoice);                      KeyStateService.KeyDownStates[KeyValues.SpeakKey].Value = speechStartedNo ? KeyDownStates.Down : KeyDownStates.Up;                      break;                    case FunctionKeys.TurkishTurkey:                      Log.Info("Changing keyboard language to TurkishTurkey.");                      InputService.RequestSuspend(); //Reloading the dictionary locks the UI thread' so suspend input service to prevent accidental selections until complete                      Settings.Default.KeyboardAndDictionaryLanguage = Languages.TurkishTurkey;                      InputService.RequestResume();                      Log.Info("Changing keyboard to Menu.");                      Keyboard = new Menu(() => Keyboard = currentKeyboard);                      break;                    case FunctionKeys.WebBrowsingKeyboard:                      Log.Info("Changing keyboard to WebBrowsing.");                      Keyboard = new WebBrowsing();                      break;                    case FunctionKeys.YesQuestionResult:                      HandleYesNoQuestionResult(true);                      break;              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SplitAndWrapExceptionInfo,The following statement contains a magic number: var maxLineLength = len/3.5;
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: AddRowsToGrid(4);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: AddColsToGrid(4);
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.Text = heading;                  this.PlaceKeyInPosition(newKey' 0' 1' 1' 2);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.Text = content;                  this.PlaceKeyInPosition(newKey' 1' 0' 2' 4);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.Text = content;                  this.PlaceKeyInPosition(newKey' 1' 0' 2' 4);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.SymbolGeometry = (System.Windows.Media.Geometry) App.Current.Resources["BackIcon"];                  newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.BACK;                  newKey.Value = KeyValues.BackFromKeyboardKey;                  this.PlaceKeyInPosition(newKey' 3' 3);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.SymbolGeometry = (System.Windows.Media.Geometry) App.Current.Resources["BackIcon"];                  newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.BACK;                  newKey.Value = KeyValues.BackFromKeyboardKey;                  this.PlaceKeyInPosition(newKey' 3' 3);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  this.PlaceKeyInPosition(newKey' 0' 3' 1' 1);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  this.PlaceKeyInPosition(newKey' 3' 0' 1' 1);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  this.PlaceKeyInPosition(newKey' 3' 1' 1' 2);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,SetupErrorLayout,The following statement contains a magic number: {                  Key newKey = new Key();                  this.PlaceKeyInPosition(newKey' 3' 1' 1' 2);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TopGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.OutputPanel = ((JuliusSweetland.OptiKey.UI.Controls.Output)(target));              return;              case 3:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.TopGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.OutputPanel = ((JuliusSweetland.OptiKey.UI.Controls.Output)(target));              return;              case 3:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: int maxKeyboardsPerPage = (this.mCols - 2) * this.mRows;
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: if (totalNumKeyboards > 0)              {                  for (int i = 0; i < maxKeyboardsPerPage; i++)                  {                      var r = i / (this.mCols - 2); // integer division                      var c = 1 + (i % (this.mCols - 2));                        if (i < nKBs)                      {                          KeyboardInfo kbInfo = folder.keyboards.ElementAt(firstKB + i);                          // Add key to link to keyboard                          this.AddKeyboardKey(kbInfo' r' c);                      }                      else                      {                          // Add empty/inactive key for consistent aesthetic                          this.AddKey(new Key()' r' c);                      }                  }              }              else              {                  // Error layout for when there are no keyboards                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NO_KEYBOARDS_FOUND;                      this.AddKey(newKey' 0' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = DynamicKeyboard.StringWithValidNewlines(JuliusSweetland.OptiKey.Properties.Resources.KEYBOARD_FOLDER_CAN_BE_CHANGED_SPLIT_LINE);                      this.AddKey(newKey' 1' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText2";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.DYNAMIC_KEYBOARDS_LOCATION_LABEL;                      newKey.Text += "\n";                      newKey.Text += Settings.Default.DynamicKeyboardsLocation;                      this.AddKey(newKey' 2' 1' 1' 2);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: if (totalNumKeyboards > 0)              {                  for (int i = 0; i < maxKeyboardsPerPage; i++)                  {                      var r = i / (this.mCols - 2); // integer division                      var c = 1 + (i % (this.mCols - 2));                        if (i < nKBs)                      {                          KeyboardInfo kbInfo = folder.keyboards.ElementAt(firstKB + i);                          // Add key to link to keyboard                          this.AddKeyboardKey(kbInfo' r' c);                      }                      else                      {                          // Add empty/inactive key for consistent aesthetic                          this.AddKey(new Key()' r' c);                      }                  }              }              else              {                  // Error layout for when there are no keyboards                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NO_KEYBOARDS_FOUND;                      this.AddKey(newKey' 0' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = DynamicKeyboard.StringWithValidNewlines(JuliusSweetland.OptiKey.Properties.Resources.KEYBOARD_FOLDER_CAN_BE_CHANGED_SPLIT_LINE);                      this.AddKey(newKey' 1' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText2";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.DYNAMIC_KEYBOARDS_LOCATION_LABEL;                      newKey.Text += "\n";                      newKey.Text += Settings.Default.DynamicKeyboardsLocation;                      this.AddKey(newKey' 2' 1' 1' 2);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: if (totalNumKeyboards > 0)              {                  for (int i = 0; i < maxKeyboardsPerPage; i++)                  {                      var r = i / (this.mCols - 2); // integer division                      var c = 1 + (i % (this.mCols - 2));                        if (i < nKBs)                      {                          KeyboardInfo kbInfo = folder.keyboards.ElementAt(firstKB + i);                          // Add key to link to keyboard                          this.AddKeyboardKey(kbInfo' r' c);                      }                      else                      {                          // Add empty/inactive key for consistent aesthetic                          this.AddKey(new Key()' r' c);                      }                  }              }              else              {                  // Error layout for when there are no keyboards                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NO_KEYBOARDS_FOUND;                      this.AddKey(newKey' 0' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = DynamicKeyboard.StringWithValidNewlines(JuliusSweetland.OptiKey.Properties.Resources.KEYBOARD_FOLDER_CAN_BE_CHANGED_SPLIT_LINE);                      this.AddKey(newKey' 1' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText2";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.DYNAMIC_KEYBOARDS_LOCATION_LABEL;                      newKey.Text += "\n";                      newKey.Text += Settings.Default.DynamicKeyboardsLocation;                      this.AddKey(newKey' 2' 1' 1' 2);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: if (totalNumKeyboards > 0)              {                  for (int i = 0; i < maxKeyboardsPerPage; i++)                  {                      var r = i / (this.mCols - 2); // integer division                      var c = 1 + (i % (this.mCols - 2));                        if (i < nKBs)                      {                          KeyboardInfo kbInfo = folder.keyboards.ElementAt(firstKB + i);                          // Add key to link to keyboard                          this.AddKeyboardKey(kbInfo' r' c);                      }                      else                      {                          // Add empty/inactive key for consistent aesthetic                          this.AddKey(new Key()' r' c);                      }                  }              }              else              {                  // Error layout for when there are no keyboards                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NO_KEYBOARDS_FOUND;                      this.AddKey(newKey' 0' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = DynamicKeyboard.StringWithValidNewlines(JuliusSweetland.OptiKey.Properties.Resources.KEYBOARD_FOLDER_CAN_BE_CHANGED_SPLIT_LINE);                      this.AddKey(newKey' 1' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText2";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.DYNAMIC_KEYBOARDS_LOCATION_LABEL;                      newKey.Text += "\n";                      newKey.Text += Settings.Default.DynamicKeyboardsLocation;                      this.AddKey(newKey' 2' 1' 1' 2);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: if (totalNumKeyboards > 0)              {                  for (int i = 0; i < maxKeyboardsPerPage; i++)                  {                      var r = i / (this.mCols - 2); // integer division                      var c = 1 + (i % (this.mCols - 2));                        if (i < nKBs)                      {                          KeyboardInfo kbInfo = folder.keyboards.ElementAt(firstKB + i);                          // Add key to link to keyboard                          this.AddKeyboardKey(kbInfo' r' c);                      }                      else                      {                          // Add empty/inactive key for consistent aesthetic                          this.AddKey(new Key()' r' c);                      }                  }              }              else              {                  // Error layout for when there are no keyboards                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NO_KEYBOARDS_FOUND;                      this.AddKey(newKey' 0' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = DynamicKeyboard.StringWithValidNewlines(JuliusSweetland.OptiKey.Properties.Resources.KEYBOARD_FOLDER_CAN_BE_CHANGED_SPLIT_LINE);                      this.AddKey(newKey' 1' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText2";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.DYNAMIC_KEYBOARDS_LOCATION_LABEL;                      newKey.Text += "\n";                      newKey.Text += Settings.Default.DynamicKeyboardsLocation;                      this.AddKey(newKey' 2' 1' 1' 2);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: if (totalNumKeyboards > 0)              {                  for (int i = 0; i < maxKeyboardsPerPage; i++)                  {                      var r = i / (this.mCols - 2); // integer division                      var c = 1 + (i % (this.mCols - 2));                        if (i < nKBs)                      {                          KeyboardInfo kbInfo = folder.keyboards.ElementAt(firstKB + i);                          // Add key to link to keyboard                          this.AddKeyboardKey(kbInfo' r' c);                      }                      else                      {                          // Add empty/inactive key for consistent aesthetic                          this.AddKey(new Key()' r' c);                      }                  }              }              else              {                  // Error layout for when there are no keyboards                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NO_KEYBOARDS_FOUND;                      this.AddKey(newKey' 0' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText1";                      newKey.Text = DynamicKeyboard.StringWithValidNewlines(JuliusSweetland.OptiKey.Properties.Resources.KEYBOARD_FOLDER_CAN_BE_CHANGED_SPLIT_LINE);                      this.AddKey(newKey' 1' 1' 1' 2);                  }                  {                      Key newKey = new Key();                      newKey.SharedSizeGroup = "ErrorText2";                      newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.DYNAMIC_KEYBOARDS_LOCATION_LABEL;                      newKey.Text += "\n";                      newKey.Text += Settings.Default.DynamicKeyboardsLocation;                      this.AddKey(newKey' 2' 1' 1' 2);                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.SharedSizeGroup = "BackButton";                          newKey.SymbolGeometry = (System.Windows.Media.Geometry)App.Current.Resources["ArrowPointingToLeftIcon"];                  newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.PREV;                  if (this.pageIndex > 0)                  {                      newKey.Value = KeyValues.DynamicKeyboardPrev;                  }                  this.AddKey(newKey' 0' 0' 2' 1);              }
Magic Number,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,DynamicKeyboardSelector,The following statement contains a magic number: {                  Key newKey = new Key();                  newKey.SharedSizeGroup = "BackButton";                  newKey.SymbolGeometry = (System.Windows.Media.Geometry)App.Current.Resources["ArrowPointingToRightIcon"];                  newKey.Text = JuliusSweetland.OptiKey.Properties.Resources.NEXT;                  if (nKBs < remainingKeyboards)                  {                      newKey.Value = KeyValues.DynamicKeyboardNext;                  }                  this.AddKey(newKey' 0' this.mCols - 1' 2' 1);              }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: var v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  var m = l + l - v;                  var sv = (v - m) / v;                                    h *= 6.0;                                    var sextant = (int)h;                  var fract = h - sextant;                  var vsf = v * sv * fract;                  var mid1 = m + vsf;                  var mid2 = v - vsf;                                    switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  var m = l + l - v;                  var sv = (v - m) / v;                                    h *= 6.0;                                    var sextant = (int)h;                  var fract = h - sextant;                  var vsf = v * sv * fract;                  var mid1 = m + vsf;                  var mid2 = v - vsf;                                    switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  var m = l + l - v;                  var sv = (v - m) / v;                                    h *= 6.0;                                    var sextant = (int)h;                  var fract = h - sextant;                  var vsf = v * sv * fract;                  var mid1 = m + vsf;                  var mid2 = v - vsf;                                    switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  var m = l + l - v;                  var sv = (v - m) / v;                                    h *= 6.0;                                    var sextant = (int)h;                  var fract = h - sextant;                  var vsf = v * sv * fract;                  var mid1 = m + vsf;                  var mid2 = v - vsf;                                    switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }              }
Magic Number,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  var m = l + l - v;                  var sv = (v - m) / v;                                    h *= 6.0;                                    var sextant = (int)h;                  var fract = h - sextant;                  var vsf = v * sv * fract;                  var mid1 = m + vsf;                  var mid2 = v - vsf;                                    switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }              }
Missing Default,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,CreateCalibrationService,The following switch statement is missing a default case: switch (Settings.Default.PointsSource)              {                  case PointsSources.TheEyeTribe:                      return new TheEyeTribeCalibrationService();                    case PointsSources.Alienware17:                  case PointsSources.SteelseriesSentry:                  case PointsSources.TobiiEyeX:                  case PointsSources.TobiiEyeTracker4C:                  case PointsSources.TobiiRex:                  case PointsSources.TobiiPcEyeGo:                  case PointsSources.TobiiPcEyeGoPlus:                  case PointsSources.TobiiPcEyeMini:                  case PointsSources.TobiiX2_30:                  case PointsSources.TobiiX2_60:                      return new TobiiEyeXCalibrationService();                    case PointsSources.VisualInteractionMyGaze:                      return new MyGazeCalibrationService();              }
Missing Default,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The following switch statement is missing a default case: switch (Settings.Default.KeySelectionTriggerSource)                  {                      case TriggerSources.Fixations:                          keySelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.KeySelectionTriggerFixationDefaultCompleteTime.TotalMilliseconds));                          break;                        case TriggerSources.KeyboardKeyDownsUps:                          keySelectionSb.Append(string.Format(" ({0})"' Settings.Default.KeySelectionTriggerKeyboardKeyDownUpKey));                          break;                        case TriggerSources.MouseButtonDownUps:                          keySelectionSb.Append(string.Format(" ({0})"' Settings.Default.KeySelectionTriggerMouseDownUpButton));                          break;                  }
Missing Default,JuliusSweetland.OptiKey,App,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\App.xaml.cs,ShowSplashScreen,The following switch statement is missing a default case: switch (Settings.Default.PointSelectionTriggerSource)                  {                      case TriggerSources.Fixations:                          pointSelectionSb.Append(string.Format(OptiKey.Properties.Resources.DURATION_FORMAT' Settings.Default.PointSelectionTriggerFixationCompleteTime.TotalMilliseconds));                          break;                        case TriggerSources.KeyboardKeyDownsUps:                          pointSelectionSb.Append(string.Format(" ({0})"' Settings.Default.PointSelectionTriggerKeyboardKeyDownUpKey));                          break;                        case TriggerSources.MouseButtonDownUps:                          pointSelectionSb.Append(string.Format(" ({0})"' Settings.Default.PointSelectionTriggerMouseDownUpButton));                          break;                  }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (layout)              {                  case KeyboardLayouts.Qwerty: return Resources.USE_QWERTY_KEYBOARD_LAYOUT;                  case KeyboardLayouts.Alphabetic: return Resources.USE_ALPHABETICAL_KEYBOARD_LAYOUT;                  case KeyboardLayouts.Communikate: return Resources.USE_COMMUNIKATE_KEYBOARD_LAYOUT;                  case KeyboardLayouts.Simplified: return Resources.USE_SIMPLIFIED_KEYBOARD_LAYOUT;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (pointSource)              {                  case DataStreamProcessingLevels.High: return Resources.HIGH;                  case DataStreamProcessingLevels.Medium: return Resources.MEDIUM;                  case DataStreamProcessingLevels.Low: return Resources.LOW;                  case DataStreamProcessingLevels.None: return Resources.NONE;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (language)              {                  case Languages.CatalanSpain: return Resources.CATALAN_SPAIN;                  case Languages.CroatianCroatia: return Resources.CROATIAN_CROATIA;                  case Languages.CzechCzechRepublic: return Resources.CZECH_CZECH_REPUBLIC;                  case Languages.DanishDenmark: return Resources.DANISH_DENMARK;                  case Languages.DutchBelgium: return Resources.DUTCH_BELGIUM;                  case Languages.DutchNetherlands: return Resources.DUTCH_NETHERLANDS;                  case Languages.EnglishCanada: return Resources.ENGLISH_CANADA;                  case Languages.EnglishUK: return Resources.ENGLISH_UK;                  case Languages.EnglishUS: return Resources.ENGLISH_US;                  case Languages.FrenchFrance: return Resources.FRENCH_FRANCE;                  case Languages.GermanGermany: return Resources.GERMAN_GERMANY;                  case Languages.GreekGreece: return Resources.GREEK_GREECE;                  case Languages.ItalianItaly: return Resources.ITALIAN_ITALY;                  case Languages.KoreanKorea: return Resources.KOREAN_KOREA;                  case Languages.PortuguesePortugal: return Resources.PORTUGUESE_PORTUGAL;                  case Languages.RussianRussia: return Resources.RUSSIAN_RUSSIA;                  case Languages.SlovakSlovakia: return Resources.SLOVAK_SLOVAKIA;                  case Languages.SlovenianSlovenia: return Resources.SLOVENIAN_SLOVENIA;                  case Languages.SpanishSpain: return Resources.SPANISH_SPAIN;                  case Languages.TurkishTurkey: return Resources.TURKISH_TURKEY;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\KeyboardLayouts.cs,ToCultureInfo,The following switch statement is missing a default case: switch (language)              {                  case Languages.CatalanSpain: return CultureInfo.GetCultureInfo("ca-ES");                  case Languages.CroatianCroatia: return CultureInfo.GetCultureInfo("hr-HR");                  case Languages.CzechCzechRepublic: return CultureInfo.GetCultureInfo("cs-CZ");                  case Languages.DanishDenmark: return CultureInfo.GetCultureInfo("da-DK");                  case Languages.DutchBelgium: return CultureInfo.GetCultureInfo("nl-BE");                  case Languages.DutchNetherlands: return CultureInfo.GetCultureInfo("nl-NL");			                  case Languages.EnglishUS: return CultureInfo.GetCultureInfo("en-US");                  case Languages.EnglishUK: return CultureInfo.GetCultureInfo("en-GB");                  case Languages.EnglishCanada: return CultureInfo.GetCultureInfo("en-CA");                  case Languages.FrenchFrance: return CultureInfo.GetCultureInfo("fr-FR");                  case Languages.GermanGermany: return CultureInfo.GetCultureInfo("de-DE");                  case Languages.GreekGreece: return CultureInfo.GetCultureInfo("el-GR");                  case Languages.ItalianItaly: return CultureInfo.GetCultureInfo("it-IT");                  case Languages.KoreanKorea: return CultureInfo.GetCultureInfo("ko-KR");                  case Languages.PortuguesePortugal: return CultureInfo.GetCultureInfo("pt-PT");                  case Languages.RussianRussia: return CultureInfo.GetCultureInfo("ru-RU");                  case Languages.SlovakSlovakia: return CultureInfo.GetCultureInfo("sk-SK");                  case Languages.SlovenianSlovenia: return CultureInfo.GetCultureInfo("sl-SI");                  case Languages.SpanishSpain: return CultureInfo.GetCultureInfo("es-ES");                  case Languages.TurkishTurkey: return CultureInfo.GetCultureInfo("tr-TR");              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (pointSource)              {                  case PointsSources.Alienware17: return Resources.ALIENWARE_17;                  case PointsSources.GazeTracker: return Resources.GAZE_TRACKER;                  case PointsSources.MousePosition: return Resources.MOUSE_POSITION;                  case PointsSources.SteelseriesSentry: return Resources.STEELSERIES_SENTRY;                  case PointsSources.TheEyeTribe: return Resources.THE_EYE_TRIBE;                  case PointsSources.TobiiEyeTracker4C: return Resources.TOBII_EYE_TRACKER_4C;                  case PointsSources.TobiiEyeX: return Resources.TOBII_EYEX;                  case PointsSources.TobiiRex: return Resources.TOBII_REX;                  case PointsSources.TobiiPcEyeGo: return Resources.TOBII_PCEYE_GO;                  case PointsSources.TobiiPcEyeGoPlus: return Resources.TOBII_PCEYE_GO_PLUS;                  case PointsSources.TobiiPcEyeMini: return Resources.TOBII_PCEYE_MINI;                  case PointsSources.TobiiX2_30: return Resources.TOBII_X2_30;                  case PointsSources.TobiiX2_60: return Resources.TOBII_X2_60;                  case PointsSources.VisualInteractionMyGaze: return Resources.VI_MYGAZE;              }
Missing Default,JuliusSweetland.OptiKey.Enums,EnumExtensions,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Enums\KeyboardLayouts.cs,ToDescription,The following switch statement is missing a default case: switch (triggerSources)              {                  case TriggerSources.Fixations: return Resources.FIXATIONS_DWELL;                  case TriggerSources.KeyboardKeyDownsUps: return Resources.KEYBOARD_KEY;                  case TriggerSources.MouseButtonDownUps: return Resources.MOUSE_BUTTON;              }
Missing Default,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateSelectionProgressSubscription,The following switch statement is missing a default case: switch (mode)              {                  case SelectionModes.Key:                      selectionTriggerSource = keySelectionTriggerSource;                      break;                    case SelectionModes.Point:                      selectionTriggerSource = pointSelectionTriggerSource;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,InputService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\InputService.subscriptions.cs,CreateSelectionSubscriptions,The following switch statement is missing a default case: switch (mode)              {                  case SelectionModes.Key:                      selectionTriggerSource = keySelectionTriggerSource;                      break;                    case SelectionModes.Point:                      selectionTriggerSource = pointSelectionTriggerSource;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Floating:                      switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }                        //Recalculate distance to boundaries and check if we are now aligned with 3 edges                      distanceToBottomBoundary = screenBoundsInDp.Bottom - (window.Top + window.ActualHeight);                      distanceToTopBoundary = window.Top - screenBoundsInDp.Top;                      distanceToLeftBoundary = window.Left - screenBoundsInDp.Left;                      distanceToRightBoundary = screenBoundsInDp.Right - (window.Left + window.ActualWidth);                        DockEdges? dockToEdge = null;                      if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Top;                      }                      else if (distanceToBottomBoundary == 0 && distanceToLeftBoundary == 0 && distanceToRightBoundary == 0)                      {                          dockToEdge = DockEdges.Bottom;                      }                      else if (distanceToTopBoundary == 0 && distanceToLeftBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Left;                      }                      else if (distanceToTopBoundary == 0 && distanceToRightBoundary == 0 && distanceToBottomBoundary == 0)                      {                          dockToEdge = DockEdges.Right;                      }                        if (dockToEdge != null)                      {                          //We are aligned with 3 edges and currently floating' so switch to docked mode                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      else                      {                          PersistSizeAndPosition();                      }                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      if (dockPosition == DockEdges.Top &&                          (direction == ExpandToDirections.Bottom ||                           direction == ExpandToDirections.BottomLeft ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ExpandToDirections.Top ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentToTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ExpandToDirections.Right ||                           direction == ExpandToDirections.TopRight ||                           direction == ExpandToDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ExpandToDirections.Left ||                           direction == ExpandToDirections.TopLeft ||                           direction == ExpandToDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentToLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case ExpandToDirections.Bottom:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.BottomRight:                              window.Height += yAdjustmentToBottom;                              break;                            case ExpandToDirections.Top:                          case ExpandToDirections.TopLeft:                          case ExpandToDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              window.Height += yAdjustmentToTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Expand,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case ExpandToDirections.Left:                          case ExpandToDirections.BottomLeft:                          case ExpandToDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              window.Width += xAdjustmentToLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ExpandToDirections.Right:                          case ExpandToDirections.BottomRight:                          case ExpandToDirections.TopRight:                              window.Width += xAdjustmentToRight;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (getWindowState())                  {                      case WindowStates.Floating:                          PersistSizeAndPosition();                          break;                        case WindowStates.Docked:                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                          break;                  }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Floating:                      var maxFloatingHeightAdjustment = window.Height - ((MIN_FLOATING_HEIGHT_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }                      var maxFloatingWidthAdjustment = window.Width - ((MIN_FLOATING_WIDTH_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }                      PersistSizeAndPosition();                      break;                    case WindowStates.Docked:                      var dockPosition = getDockPosition();                      var dockSize = getDockSize();                      var adjustment = false;                      var maxFullDockHeightAdjustment = window.Height - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Height);                      var maxFullDockWidthAdjustment = window.Width - ((MIN_FULL_DOCK_THICKNESS_AS_PERCENTAGE_OF_SCREEN / 100) * screenBoundsInDp.Width);                      var maxCollapsedDockHeightAdjustment = window.Height - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Height));                      var maxCollapsedDockWidthAdjustment = window.Width - ((MIN_COLLAPSED_DOCK_THICKNESS_AS_PERCENTAGE_OF_FULL_DOCK_THICKNESS / 100) * ((getCollapsedDockThicknessAsPercentageOfFullDockThickness() / 100) * screenBoundsInDp.Width));                      if (dockPosition == DockEdges.Top &&                          (direction == ShrinkFromDirections.Bottom || direction == ShrinkFromDirections.BottomLeft || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromBottom) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Bottom &&                          (direction == ShrinkFromDirections.Top || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.TopRight))                      {                          if (dockSize == DockSizes.Full)                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFullDockHeightAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * 100);                          }                          else                          {                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxCollapsedDockHeightAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualHeight + yAdjustmentFromTop) / screenBoundsInDp.Height) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Left &&                          (direction == ShrinkFromDirections.Right || direction == ShrinkFromDirections.TopRight || direction == ShrinkFromDirections.BottomRight))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromRight) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      else if (dockPosition == DockEdges.Right &&                          (direction == ShrinkFromDirections.Left || direction == ShrinkFromDirections.TopLeft || direction == ShrinkFromDirections.BottomLeft))                      {                          if (dockSize == DockSizes.Full)                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFullDockWidthAdjustment);                              saveFullDockThicknessAsPercentageOfScreen(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * 100);                          }                          else                          {                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxCollapsedDockWidthAdjustment);                              saveCollapsedDockThicknessAsPercentageOfFullDockThickness(((window.ActualWidth + xAdjustmentFromLeft) / screenBoundsInDp.Width) * getFullDockThicknessAsPercentageOfScreen());                          }                          adjustment = true;                      }                      if (adjustment)                      {                          var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(getDockPosition()' getDockSize());                          SetAppBarSizeAndPosition(getDockPosition()' dockSizeAndPositionInPx);                      }                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case ShrinkFromDirections.Bottom:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.BottomRight:                              yAdjustmentFromBottom = yAdjustmentFromBottom.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromBottom;                              break;                            case ShrinkFromDirections.Top:                          case ShrinkFromDirections.TopLeft:                          case ShrinkFromDirections.TopRight:                              var heightBeforeAdjustment = window.ActualHeight;                              yAdjustmentFromTop = yAdjustmentFromTop.CoerceToLowerLimit(0 - maxFloatingHeightAdjustment);                              window.Height += yAdjustmentFromTop;                              var actualYAdjustmentToTop = window.ActualHeight - heightBeforeAdjustment; //WPF may have coerced the adjustment                              window.Top -= actualYAdjustmentToTop;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Shrink,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case ShrinkFromDirections.Left:                          case ShrinkFromDirections.BottomLeft:                          case ShrinkFromDirections.TopLeft:                              var widthBeforeAdjustment = window.ActualWidth;                              xAdjustmentFromLeft = xAdjustmentFromLeft.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromLeft;                              var actualXAdjustmentToLeft = window.ActualWidth - widthBeforeAdjustment; //WPF may have coerced the adjustment                              window.Left -= actualXAdjustmentToLeft;                              break;                            case ShrinkFromDirections.Right:                          case ShrinkFromDirections.BottomRight:                          case ShrinkFromDirections.TopRight:                              xAdjustmentFromRight = xAdjustmentFromRight.CoerceToLowerLimit(0 - maxFloatingWidthAdjustment);                              window.Width += xAdjustmentFromRight;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,ApplySavedState,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Docked:                      window.WindowState = System.Windows.WindowState.Normal;                      var dockSizeAndPositionInPx = CalculateDockSizeAndPositionInPx(dockPosition' getDockSize());                      RegisterAppBar();                      SetAppBarSizeAndPosition(dockPosition' dockSizeAndPositionInPx' isInitialising);                      break;                    case WindowStates.Floating:                      window.WindowState = System.Windows.WindowState.Normal;                      window.Dispatcher.BeginInvoke(DispatcherPriority.ApplicationIdle'                          new ApplySizeAndPositionDelegate(ApplyAndPersistSizeAndPosition)' getFloatingSizeAndPosition());                      break;                    case WindowStates.Maximised:                      window.WindowState = System.Windows.WindowState.Maximized;                      PublishSizeAndPositionInitialised();                      break;                    case WindowStates.Minimised:                      window.WindowState = System.Windows.WindowState.Normal;                      var minimisedSizeAndPosition = CalculateMinimisedSizeAndPosition();                      window.Dispatcher.BeginInvoke(DispatcherPriority.ApplicationIdle'                          new ApplySizeAndPositionDelegate(ApplyAndPersistSizeAndPosition)' minimisedSizeAndPosition);                      break;                    case WindowStates.Hidden:                      window.WindowState = System.Windows.WindowState.Minimized;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Docked:                      switch (getDockPosition())                      {                          case DockEdges.Top:                              switch (direction)                              {                                  case MoveToDirections.Bottom:                                  case MoveToDirections.BottomLeft:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Top;                                      switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Bottom:                              switch (direction)                              {                                  case MoveToDirections.Top:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.TopRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;                                      switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Left:                              switch (direction)                              {                                  case MoveToDirections.Right:                                  case MoveToDirections.TopRight:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Left;                                      switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Right:                              switch (direction)                              {                                  case MoveToDirections.Left:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.BottomLeft:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;                                      switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                      }                      break;                    case WindowStates.Floating:                      switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (xAdjustmentAmount > xAdjustmentToLeft)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Left);                                  RegisterAppBar();                              }                              else                              {                                  window.Left -= xAdjustmentToLeft;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= xAdjustmentToLeft;                              break;                            case MoveToDirections.Right:                              if (xAdjustmentAmount > xAdjustmentToRight)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Right);                                  RegisterAppBar();                              }                              else                              {                                  window.Left += xAdjustmentToRight;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += xAdjustmentToRight;                              break;                      }                      switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (yAdjustmentAmount > yAdjustmentToBottom)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Bottom);                                  RegisterAppBar();                              }                              else                              {                                  window.Top += yAdjustmentToBottom;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += yAdjustmentToBottom;                              break;                            case MoveToDirections.Top:                              if (yAdjustmentAmount > yAdjustmentToTop)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Top);                                  RegisterAppBar();                              }                              else                              {                                  window.Top -= yAdjustmentToTop;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= yAdjustmentToTop;                              break;                      }                      adjustment = true;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (getDockPosition())                      {                          case DockEdges.Top:                              switch (direction)                              {                                  case MoveToDirections.Bottom:                                  case MoveToDirections.BottomLeft:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Top;                                      switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Bottom:                              switch (direction)                              {                                  case MoveToDirections.Top:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.TopRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;                                      switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Left:                              switch (direction)                              {                                  case MoveToDirections.Right:                                  case MoveToDirections.TopRight:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Left;                                      switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                            case DockEdges.Right:                              switch (direction)                              {                                  case MoveToDirections.Left:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.BottomLeft:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;                                      switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Bottom:                                  case MoveToDirections.BottomLeft:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Top;                                      switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Bottom:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Top:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.TopRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Top = screenBoundsInDp.Bottom - floatingSizeAndPosition.Height;                                      switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Top:                                              window.Left = floatingSizeAndPosition.Left;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Left = floatingSizeAndPosition.Left - xAdjustmentToLeft;                                              break;                                            case MoveToDirections.TopRight:                                              window.Left = floatingSizeAndPosition.Left + xAdjustmentToRight;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Right:                                  case MoveToDirections.TopRight:                                  case MoveToDirections.BottomRight:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Left;                                      switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Right:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopRight:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomRight:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                              {                                  case MoveToDirections.Left:                                  case MoveToDirections.TopLeft:                                  case MoveToDirections.BottomLeft:                                      UnRegisterAppBar();                                      saveWindowState(WindowStates.Floating);                                      savePreviousWindowState(WindowStates.Floating);                                      window.Left = screenBoundsInDp.Right - floatingSizeAndPosition.Width;                                      switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }                                      window.Height = floatingSizeAndPosition.Height;                                      window.Width = floatingSizeAndPosition.Width;                                      adjustment = true;                                      break;                              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction)                                      {                                          case MoveToDirections.Left:                                              window.Top = floatingSizeAndPosition.Top;                                              break;                                            case MoveToDirections.TopLeft:                                              window.Top = floatingSizeAndPosition.Top - yAdjustmentToTop;                                              break;                                            case MoveToDirections.BottomLeft:                                              window.Top = floatingSizeAndPosition.Top + yAdjustmentToBottom;                                              break;                                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (xAdjustmentAmount > xAdjustmentToLeft)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Left);                                  RegisterAppBar();                              }                              else                              {                                  window.Left -= xAdjustmentToLeft;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= xAdjustmentToLeft;                              break;                            case MoveToDirections.Right:                              if (xAdjustmentAmount > xAdjustmentToRight)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Right);                                  RegisterAppBar();                              }                              else                              {                                  window.Left += xAdjustmentToRight;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += xAdjustmentToRight;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,Move,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (yAdjustmentAmount > yAdjustmentToBottom)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Bottom);                                  RegisterAppBar();                              }                              else                              {                                  window.Top += yAdjustmentToBottom;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += yAdjustmentToBottom;                              break;                            case MoveToDirections.Top:                              if (yAdjustmentAmount > yAdjustmentToTop)                              {                                  saveWindowState(WindowStates.Docked);                                  savePreviousWindowState(WindowStates.Docked);                                  saveDockPosition(DockEdges.Top);                                  RegisterAppBar();                              }                              else                              {                                  window.Top -= yAdjustmentToTop;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= yAdjustmentToTop;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Docked:                      //Jump to (and dock on) a different edge                      var dockPosition = getDockPosition();                      if (direction == MoveToDirections.Top && dockPosition != DockEdges.Top)                      {                          saveDockPosition(DockEdges.Top);                          adjustment = true;                      }                      else if (direction == MoveToDirections.Bottom && dockPosition != DockEdges.Bottom)                      {                          saveDockPosition(DockEdges.Bottom);                          adjustment = true;                      }                      else if (direction == MoveToDirections.Left && dockPosition != DockEdges.Left)                      {                          saveDockPosition(DockEdges.Left);                          adjustment = true;                      }                      else if (direction == MoveToDirections.Right && dockPosition != DockEdges.Right)                      {                          saveDockPosition(DockEdges.Right);                          adjustment = true;                      }                      break;                    case WindowStates.Floating:                      //Jump to edge(s)' or dock against edge if we are already against that edge                      DockEdges? dockToEdge = null;                      switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (distanceToLeftBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Left;                              }                              else                              {                                  window.Left -= distanceToLeftBoundaryIfFloating;                               }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= distanceToLeftBoundaryIfFloating;                              break;                            case MoveToDirections.Right:                              if (distanceToRightBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Right;                              }                              else                              {                                  window.Left += distanceToRightBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += distanceToRightBoundaryIfFloating;                              break;                      }                      switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (distanceToBottomBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Bottom;                              }                              else                              {                                  window.Top += distanceToBottomBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += distanceToBottomBoundaryIfFloating;                              break;                            case MoveToDirections.Top:                              if (distanceToTopBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Top;                              }                              else                              {                                  window.Top -= distanceToTopBoundaryIfFloating;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= distanceToTopBoundaryIfFloating;                              break;                      }                        if (dockToEdge != null)                      {                          saveWindowState(WindowStates.Docked);                          savePreviousWindowState(WindowStates.Docked);                          saveDockPosition(dockToEdge.Value);                          RegisterAppBar();                      }                        adjustment = true;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (direction) //Handle horizontal adjustment                      {                          case MoveToDirections.Left:                              if (distanceToLeftBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Left;                              }                              else                              {                                  window.Left -= distanceToLeftBoundaryIfFloating;                               }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.TopLeft:                              window.Left -= distanceToLeftBoundaryIfFloating;                              break;                            case MoveToDirections.Right:                              if (distanceToRightBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Right;                              }                              else                              {                                  window.Left += distanceToRightBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomRight:                          case MoveToDirections.TopRight:                              window.Left += distanceToRightBoundaryIfFloating;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,MoveToEdge,The following switch statement is missing a default case: switch (direction) //Handle vertical adjustment                      {                          case MoveToDirections.Bottom:                              if (distanceToBottomBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Bottom;                              }                              else                              {                                  window.Top += distanceToBottomBoundaryIfFloating;                              }                              break;                            case MoveToDirections.BottomLeft:                          case MoveToDirections.BottomRight:                              window.Top += distanceToBottomBoundaryIfFloating;                              break;                            case MoveToDirections.Top:                              if (distanceToTopBoundaryIfFloating == 0)                              {                                  dockToEdge = DockEdges.Top;                              }                              else                              {                                  window.Top -= distanceToTopBoundaryIfFloating;                              }                              break;                            case MoveToDirections.TopLeft:                          case MoveToDirections.TopRight:                              window.Top -= distanceToTopBoundaryIfFloating;                              break;                      }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistDockThickness,The following switch statement is missing a default case: switch (getDockSize())              {                  case DockSizes.Full:                      var fullDockThicknessAsPercentageOfScreen =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? (window.ActualHeight / screenBoundsInDp.Height) * 100                              : (window.ActualWidth / screenBoundsInDp.Width) * 100;                      saveFullDockThicknessAsPercentageOfScreen(fullDockThicknessAsPercentageOfScreen);                      break;                    case DockSizes.Collapsed:                      var collapsedDockThicknessAsPercentageOfFullDockThickness =                          dockPosition == DockEdges.Top || dockPosition == DockEdges.Bottom                              ? ((window.ActualHeight / screenBoundsInDp.Height) / getFullDockThicknessAsPercentageOfScreen()) * 10000                              : ((window.ActualWidth / screenBoundsInDp.Width) / getFullDockThicknessAsPercentageOfScreen()) * 10000;                      saveCollapsedDockThicknessAsPercentageOfFullDockThickness(collapsedDockThicknessAsPercentageOfFullDockThickness);                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,PersistSizeAndPosition,The following switch statement is missing a default case: switch (windowState)              {                  case WindowStates.Floating:                      saveFloatingSizeAndPosition(new Rect(window.Left' window.Top' window.ActualWidth' window.ActualHeight));                      break;                    case WindowStates.Docked:                      PersistDockThickness();                      break;                    case WindowStates.Maximised:                  case WindowStates.Minimised:                  case WindowStates.Hidden:                      //Do not save anything                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,WindowManipulationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\WindowManipulationService.cs,SetAppBarSizeAndPosition,The following switch statement is missing a default case: switch (dockPosition)              {                  case DockEdges.Top:                      barData.rc.Bottom += barData.rc.Top - (int) Math.Round(sizeAndPosition.Top);                      break;                  case DockEdges.Bottom:                      barData.rc.Top -= (int)Math.Round(sizeAndPosition.Bottom) - barData.rc.Bottom;                      break;                  case DockEdges.Left:                      barData.rc.Right += barData.rc.Left - (int)Math.Round(sizeAndPosition.Left);                      break;                  case DockEdges.Right:                      barData.rc.Left -= (int)Math.Round(sizeAndPosition.Right) - barData.rc.Right;                      break;              }
Missing Default,JuliusSweetland.OptiKey.Services,TheEyeTribeCalibrationService,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\Services\TheEyeTribeCalibrationService.cs,Calibrate,The following switch statement is missing a default case: switch (calibrateArgs.Result)              {                  case CalibrationRunnerResult.Success:                      var message = string.Format(Resources.CALIBRATION_SUCCESS_WITH_ACCURACY'                          calibrateArgs.CalibrationResult.AverageErrorDegree);                      Log.Info(message);                      return message;                    case CalibrationRunnerResult.Abort:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_ABORT_MESSAGE' calibrateArgs.Message));                    case CalibrationRunnerResult.Error:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_ERROR_MESSAGE' calibrateArgs.Message));                    case CalibrationRunnerResult.Failure:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_FAIL_MESSAGE' calibrateArgs.Message));                    case CalibrationRunnerResult.Unknown:                      throw new ApplicationException(string.Format(Resources.CALIBRATION_STOPPED_MESSAGE' calibrateArgs.Message));              }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,Key,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\Key.cs,TextChanged,The following switch statement is missing a default case: switch (key.Case == Case.Settings ? Settings.Default.KeyCase : key.Case)                      {                          case Case.Upper:                              value = textInfo.ToUpper(value);                              break;                          case Case.Lower:                              value = textInfo.ToLower(value);                              break;                          case Case.Title:                              //Must be lowercased first because ToTitleCase consider uppercased string as abreviations                              value = textInfo.ToTitleCase(textInfo.ToLower(value));                              break;                      }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,GenerateContent,The following switch statement is missing a default case: switch (Settings.Default.KeyboardAndDictionaryLanguage)                  {                      case Languages.KoreanKorea:                          newContent = new KoreanViews.Alpha2 { DataContext = Keyboard };                          break;                  }
Missing Default,JuliusSweetland.OptiKey.UI.Controls,KeyboardHost,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Controls\KeyboardHost.cs,GenerateContent,The following switch statement is missing a default case: switch (Settings.Default.KeyboardAndDictionaryLanguage)                  {                      case Languages.KoreanKorea:                          newContent = new KoreanViews.ConversationAlpha2 { DataContext = Keyboard };                          break;                  }
Missing Default,JuliusSweetland.OptiKey.UI.ViewModels.Management,PointingAndSelectingViewModel,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\ViewModels\Management\PointingAndSelectingViewModel.cs,PointingAndSelectingViewModel,The following switch statement is missing a default case: switch(ts)                   {                      case Enums.TriggerSources.Fixations:                          MultiKeySelectionTriggerStopSignal = Enums.TriggerStopSignals.NextHigh;                      break;                        case Enums.TriggerSources.KeyboardKeyDownsUps:                      case Enums.TriggerSources.MouseButtonDownUps:                          MultiKeySelectionTriggerStopSignal = Enums.TriggerStopSignals.NextLow;                      break;                  }
Missing Default,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboard,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboard.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.TopGrid = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.OutputPanel = ((JuliusSweetland.OptiKey.UI.Controls.Output)(target));              return;              case 3:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey.UI.Views.Keyboards.Common,DynamicKeyboardSelector,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Views\Keyboards\Common\DynamicKeyboardSelector.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.MainGrid = ((System.Windows.Controls.Grid)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey.UI.Windows,ConfirmationWindow,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Windows\ConfirmationWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.confirmationWindow = ((JuliusSweetland.OptiKey.UI.Windows.ConfirmationWindow)(target));              return;              }
Missing Default,JuliusSweetland.OptiKey.UI.Utilities,DrawingUtils,C:\repos\JuliusSweetland_OptiKey\src\JuliusSweetland.OptiKey\UI\Utilities\DrawingUtils.cs,HSL2RGB,The following switch statement is missing a default case: switch (sextant)                  {                      case 0:                          r = v;                          g = mid1;                          b = m;                          break;                      case 1:                          r = mid2;                          g = v;                          b = m;                          break;                      case 2:                          r = m;                          g = v;                          b = mid1;                          break;                      case 3:                          r = m;                          g = mid2;                          b = v;                          break;                      case 4:                          r = mid1;                          g = m;                          b = v;                          break;                      case 5:                          r = v;                          g = m;                          b = mid2;                          break;                  }
