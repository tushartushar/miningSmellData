Implementation smell,Namespace,Class,File,Method,Description
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,ConvertCSV2EGB,The following statement contains a magic number: if (_cmd.Args.Count != 2)              {                  Console.WriteLine(@"Must specify a source and target.");                  return;              }
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,ConvertEGB2CSV,The following statement contains a magic number: if (_cmd.Args.Count != 2)              {                  Console.WriteLine(@"Must specify a source and target.");                  return;              }
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,TrainCommand,The following statement contains a magic number: double maxError = _cmd.PromptDouble("maxError"' 0.01);
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,CreateCommand,The following statement contains a magic number: if (_cmd.Args.Count != 3)              {                  Console.WriteLine(@"Must specify method filename' type and args.");                  return;              }
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,CreateCommand,The following statement contains a magic number: String args = _cmd.Args[2];
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,EvaluateCommand,The following statement contains a magic number: String outputFile = _cmd.Args[2];
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,Main,The following statement contains a magic number: try              {                  var cmd = new ParseCommand(args);                  var p = new EncogCmd(cmd);                  _sw = new Stopwatch();                    Console.Write(@"Encog " + EncogFramework.Version);                  Console.Write((IntPtr.Size == 4) ? "(32-bit)" : "(64-bit)");                    Console.WriteLine(@" Command Line Utility");                  Console.WriteLine(@"Copyright 2011 by Heaton Research' Inc. Released under the Apache License");                  Console.WriteLine();                      if (cmd.Command == null)                  {                      Console.WriteLine(@"Usage:");                  }                  else                  {                      Console.WriteLine(@"Executing command: " + cmd.Command);                      if (cmd.Command.Equals("wizard"))                      {                          p.WizardCommand();                      }                      else if (cmd.Command.Equals("analyst"))                      {                          p.AnalystCommand();                      }                      else if (cmd.Command.Equals("csv2egb"))                      {                          p.ConvertCSV2EGB();                      }                      else if (cmd.Command.Equals("egb2csv"))                      {                          p.ConvertEGB2CSV();                      }                      else if (cmd.Command.Equals("train"))                      {                          p.TrainCommand();                      }                      else if (cmd.Command.Equals("create"))                      {                          p.CreateCommand();                      }                      else if (cmd.Command.Equals("evaluate"))                      {                          p.EvaluateCommand();                      }                  }                    _sw.Stop();              }              /*catch (Exception ex)              {                  Console.WriteLine(@"* * Error * *");                  Console.WriteLine(ex.ToString());              }*/              finally              {                  Console.Write(@"Done.  Runtime was " + Format.FormatTimeSpan((int) _sw.ElapsedMilliseconds/1000));                  Console.WriteLine(@" (" + _sw.ElapsedMilliseconds + @"ms).");              }
Magic Number,EncogCmd,EncogCmd,C:\repos\encog_encog-dotnet-more-examples\EncogCmd\EncogCmd.cs,Main,The following statement contains a magic number: try              {                  var cmd = new ParseCommand(args);                  var p = new EncogCmd(cmd);                  _sw = new Stopwatch();                    Console.Write(@"Encog " + EncogFramework.Version);                  Console.Write((IntPtr.Size == 4) ? "(32-bit)" : "(64-bit)");                    Console.WriteLine(@" Command Line Utility");                  Console.WriteLine(@"Copyright 2011 by Heaton Research' Inc. Released under the Apache License");                  Console.WriteLine();                      if (cmd.Command == null)                  {                      Console.WriteLine(@"Usage:");                  }                  else                  {                      Console.WriteLine(@"Executing command: " + cmd.Command);                      if (cmd.Command.Equals("wizard"))                      {                          p.WizardCommand();                      }                      else if (cmd.Command.Equals("analyst"))                      {                          p.AnalystCommand();                      }                      else if (cmd.Command.Equals("csv2egb"))                      {                          p.ConvertCSV2EGB();                      }                      else if (cmd.Command.Equals("egb2csv"))                      {                          p.ConvertEGB2CSV();                      }                      else if (cmd.Command.Equals("train"))                      {                          p.TrainCommand();                      }                      else if (cmd.Command.Equals("create"))                      {                          p.CreateCommand();                      }                      else if (cmd.Command.Equals("evaluate"))                      {                          p.EvaluateCommand();                      }                  }                    _sw.Stop();              }              /*catch (Exception ex)              {                  Console.WriteLine(@"* * Error * *");                  Console.WriteLine(ex.ToString());              }*/              finally              {                  Console.Write(@"Done.  Runtime was " + Format.FormatTimeSpan((int) _sw.ElapsedMilliseconds/1000));                  Console.WriteLine(@" (" + _sw.ElapsedMilliseconds + @"ms).");              }
