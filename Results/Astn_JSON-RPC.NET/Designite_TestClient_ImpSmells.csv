Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestRpcPerSecond,The length of the statement  "                Console.WriteLine("Pass{0} - {1} requests in : {2}ms for {3} requests per second"' i' limit' tmr.ElapsedMilliseconds' (int)perSecond); " is 134.
Long Statement,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestNetworkBuffer,The length of the statement  "            //    Console.WriteLine("Pass{0} - {1} requests in : {2}ms for {3} requests per second"' i' limit' tmr.ElapsedMilliseconds' (int)perSecond); " is 140.
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,getPrintableString,The following statement contains a magic number: return new string(Enumerable.Range(0' r.Next(len)).Select(_ => (char)r.Next(32' 126)).ToArray());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,getPrintableString,The following statement contains a magic number: return new string(Enumerable.Range(0' r.Next(len)).Select(_ => (char)r.Next(32' 126)).ToArray());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,getNonPrintableString,The following statement contains a magic number: return new string(Enumerable.Range(0' r.Next(len)).Select(_ => (char)r.Next(0' 31)).ToArray());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,getExtendedAsciiString,The following statement contains a magic number: return new string(Enumerable.Range(0' r.Next(len)).Select(_ => (char)r.Next(0' 255)).ToArray());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: arbitrary[getPrintableString(10)] = getPrintableString(20);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: arbitrary[getPrintableString(10)] = getPrintableString(20);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: arbitrary[getNonPrintableString(10)] = getNonPrintableString(20);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: arbitrary[getNonPrintableString(10)] = getNonPrintableString(20);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: arbitrary[getExtendedAsciiString(10)] = getExtendedAsciiString(20);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: arbitrary[getExtendedAsciiString(10)] = getExtendedAsciiString(20);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestArbitrary,The following statement contains a magic number: i < 10
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,CreateArbitraryJObject,The following statement contains a magic number: arbitrary[getPrintableString(4)] = getPrintableString(4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,CreateArbitraryJObject,The following statement contains a magic number: arbitrary[getPrintableString(4)] = getPrintableString(4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,CreateArbitraryJObject,The following statement contains a magic number: arbitrary[getNonPrintableString(4)] = getNonPrintableString(4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,CreateArbitraryJObject,The following statement contains a magic number: arbitrary[getNonPrintableString(4)] = getNonPrintableString(4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,CreateArbitraryJObject,The following statement contains a magic number: arbitrary[getExtendedAsciiString(4)] = getExtendedAsciiString(4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,CreateArbitraryJObject,The following statement contains a magic number: arbitrary[getExtendedAsciiString(4)] = getExtendedAsciiString(4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestRpcPerSecond,The following statement contains a magic number: var limit = 50;
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestRpcPerSecond,The following statement contains a magic number: var passes = 5;
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestRpcPerSecond,The following statement contains a magic number: var perSecond = (decimal)limit  * (1000 / (decimal)tmr.ElapsedMilliseconds);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestRpcPerSecond,The following statement contains a magic number: limit = limit * 2;
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestRpcPerSecond,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestFloat,The following statement contains a magic number: float input = 7.1f;
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestFloat,The following statement contains a magic number: Assert.IsTrue(il[2] == "three");
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestFloat,The following statement contains a magic number: Assert.IsTrue(il[3] == input.ToString());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestFloat,The following statement contains a magic number: Assert.IsTrue(il.Count == 4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestInt,The following statement contains a magic number: int input = 7;
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestInt,The following statement contains a magic number: Assert.IsTrue(il[2] == "three");
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestInt,The following statement contains a magic number: Assert.IsTrue(il[3] == input.ToString());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestInt,The following statement contains a magic number: Assert.IsTrue(il.Count == 4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestSimpleString,The following statement contains a magic number: Assert.IsTrue(il[2] == "three");
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestSimpleString,The following statement contains a magic number: Assert.IsTrue(il[3] == input.ToString());
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestSimpleString,The following statement contains a magic number: Assert.IsTrue(il.Count == 4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestCustomString,The following statement contains a magic number: Assert.IsTrue(il[2] == "three");
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestCustomString,The following statement contains a magic number: Assert.IsTrue(il[3] == input.str);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestCustomString,The following statement contains a magic number: Assert.IsTrue(il.Count == 4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestMultipleParameters,The following statement contains a magic number: var input = new object[] {"one"' 2' 3.3f' anon};
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestMultipleParameters,The following statement contains a magic number: var input = new object[] {"one"' 2' 3.3f' anon};
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestMultipleParameters,The following statement contains a magic number: Assert.IsTrue(res.Length == 4);
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestMultipleParameters,The following statement contains a magic number: Assert.IsTrue((double)res[2] == Double.Parse(input[2].ToString()));
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestMultipleParameters,The following statement contains a magic number: Assert.IsTrue((double)res[2] == Double.Parse(input[2].ToString()));
Magic Number,TestClient,UnitTest1,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\TestClient\UnitTest1.cs,TestMultipleParameters,The following statement contains a magic number: Assert.IsTrue(Newtonsoft.Json.JsonConvert.DeserializeObject<CustomString>(res[3].ToString()).str == anon.str);
