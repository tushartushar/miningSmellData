Implementation smell,Namespace,Class,File,Method,Description
Long Method,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The method has 157 lines of code.
Complex Method,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,Cyclomatic complexity of the method is 18
Complex Method,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,Cyclomatic complexity of the method is 10
Complex Method,AustinHarris.JsonRpc,SMDAdditionalParameters,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,GetTypeRecursive,Cyclomatic complexity of the method is 11
Long Parameter List,AustinHarris.JsonRpc,SMDService,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,SMDService,The method has 5 parameters.
Long Identifier,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,RegisterFuction,The length of the parameter parameterNameDefaultValueMapping is 32.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "	if (paramCount == metaDataParamCount - 1 && metadata.parameters [metaDataParamCount - 1].ObjectType.Name.Contains (typeof(JsonRpcException).Name)) { " is 148.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "		//if (pCount == metaDataParamCount - 1 && metadata.parameters[metaDataParamCount].GetType() == typeof(JsonRpcException)) " is 120.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "		//if (pCount == metaDataParamCount - 1 && metadata.parameters[metaDataParamCount].GetType() == typeof(JsonRpcException)) " is 120.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "					Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Named parameter '{0}' was not present."' metadata.parameters [i].Name)))' " is 168.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "	if (parameters.Length < metaDataParamCount && metadata.defaultValues.Length > 0)// rpc call didn't set values for all optional parameters' so we need to assign the default values for them. " is 188.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "		for (int paramIndex = parameters.Length - 1' defaultIndex = metadata.defaultValues.Length - 1; // fill missing parameters from the back  " is 135.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "				Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Number of default parameters {0} not sufficient to fill all missing parameters {1}"' metadata.defaultValues.Length' missingParamsCount)))' " is 233.
Long Statement,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "			Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Expecting {0} parameters' and received {1}"' metadata.parameters.Length' parameters.Length)))' " is 189.
Long Statement,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The length of the statement  "			batch = JsonConvert.DeserializeObject<JsonRequest[]> (jsonRpc).Select (request => new Tuple<JsonRequest' JsonResponse> (request' new JsonResponse ())).ToArray (); " is 162.
Long Statement,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The length of the statement  "				Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty.")) " is 124.
Long Statement,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The length of the statement  "				jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.")); " is 212.
Long Statement,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The length of the statement  "					jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'")); " is 140.
Long Statement,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The length of the statement  "		return responses.Length == 0 ? string.Empty : responses.Length == 1 ? responses [0] : string.Format ("[{0}]"' string.Join ("'"' responses)); " is 140.
Long Statement,AustinHarris.JsonRpc,ServiceBinder,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\ServiceBinder.cs,BindService,The length of the statement  "	var methods = item.GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where (m => m.GetCustomAttributes (typeof(JsonRpcMethodAttribute)' false).Length > 0); " is 187.
Long Statement,AustinHarris.JsonRpc,ServiceBinder,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\ServiceBinder.cs,BindService,The length of the statement  "			var newDel = Delegate.CreateDelegate (System.Linq.Expressions.Expression.GetDelegateType (paras.Values.ToArray ())' instance/*Need to add support for other methods outside of this instance*/' meth); " is 198.
Long Statement,AustinHarris.JsonRpc,SMDAdditionalParameters,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,isSimpleType,The length of the statement  "	if (name.Contains ("newtonsoft") || name == "system.sbyte" || name == "system.byte" || name == "system.int16" || name == "system.uint16" || name == "system.int32" || name == "system.uint32" || name == "system.int64" || name == "system.uint64" || name == "system.char" || name == "system.single" || name == "system.double" || name == "system.boolean" || name == "system.decimal" || name == "system.float" || name == "system.numeric" || name == "system.money" || name == "system.string" || name == "system.object" || name == "system.type" // || name == "system.datetime" " is 568.
Complex Conditional,AustinHarris.JsonRpc,SMDAdditionalParameters,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,isSimpleType,The conditional expression  "name.Contains ("newtonsoft") || name == "system.sbyte" || name == "system.byte" || name == "system.int16" || name == "system.uint16" || name == "system.int32" || name == "system.uint32" || name == "system.int64" || name == "system.uint64" || name == "system.char" || name == "system.single" || name == "system.double" || name == "system.boolean" || name == "system.decimal" || name == "system.float" || name == "system.numeric" || name == "system.money" || name == "system.string" || name == "system.object" || name == "system.type" // || name == "system.datetime"  || name == "system.reflection.membertypes""  is complex.
Empty Catch Block,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,CleanUpParameter,The method has an empty catch block.
Empty Catch Block,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,CleanUpParameter,The method has an empty catch block.
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (haveMetadata == false || metadata == null) {  	JsonResponse response = new JsonResponse () {  		Result = null'  		Error = new JsonRpcException (-32601' "Method not found"' "The method does not exist / is not available.")'  		Id = Rpc.Id  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (isJArray) {  	var jarr = ((Newtonsoft.Json.Linq.JArray)Rpc.Params);  	//var loopCt = jarr.Count;  	//var pCount = loopCt;  	//if (pCount == metaDataParamCount - 1 && metadata.parameters[metaDataParamCount].GetType() == typeof(JsonRpcException))  	//    pCount++;  	//parameters = new object[pCount];  	for (int i = 0; i < loopCt; i++) {  		parameters [i] = CleanUpParameter (jarr [i]' metadata.parameters [i]);  	}  } else if (isJObject) {  	var jo = Rpc.Params as Newtonsoft.Json.Linq.JObject;  	//var loopCt = jo.Count;  	//var pCount = loopCt;  	//if (pCount == metaDataParamCount - 1 && metadata.parameters[metaDataParamCount].GetType() == typeof(JsonRpcException))  	//    pCount++;  	//parameters = new object[pCount];  	var asDict = jo as IDictionary<string' Newtonsoft.Json.Linq.JToken>;  	for (int i = 0; i < loopCt && i < metadata.parameters.Length; i++) {  		if (asDict.ContainsKey (metadata.parameters [i].Name) == false) {  			JsonResponse response = new JsonResponse () {  				Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Named parameter '{0}' was not present."' metadata.parameters [i].Name)))'  				Id = Rpc.Id  			};  			return PostProcess (Rpc' response' RpcContext);  		}  		parameters [i] = CleanUpParameter (jo [metadata.parameters [i].Name]' metadata.parameters [i]);  	}  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (isJObject) {  	var jo = Rpc.Params as Newtonsoft.Json.Linq.JObject;  	//var loopCt = jo.Count;  	//var pCount = loopCt;  	//if (pCount == metaDataParamCount - 1 && metadata.parameters[metaDataParamCount].GetType() == typeof(JsonRpcException))  	//    pCount++;  	//parameters = new object[pCount];  	var asDict = jo as IDictionary<string' Newtonsoft.Json.Linq.JToken>;  	for (int i = 0; i < loopCt && i < metadata.parameters.Length; i++) {  		if (asDict.ContainsKey (metadata.parameters [i].Name) == false) {  			JsonResponse response = new JsonResponse () {  				Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Named parameter '{0}' was not present."' metadata.parameters [i].Name)))'  				Id = Rpc.Id  			};  			return PostProcess (Rpc' response' RpcContext);  		}  		parameters [i] = CleanUpParameter (jo [metadata.parameters [i].Name]' metadata.parameters [i]);  	}  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: for (int i = 0; i < loopCt && i < metadata.parameters.Length; i++) {  	if (asDict.ContainsKey (metadata.parameters [i].Name) == false) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Named parameter '{0}' was not present."' metadata.parameters [i].Name)))'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	parameters [i] = CleanUpParameter (jo [metadata.parameters [i].Name]' metadata.parameters [i]);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (asDict.ContainsKey (metadata.parameters [i].Name) == false) {  	JsonResponse response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Named parameter '{0}' was not present."' metadata.parameters [i].Name)))'  		Id = Rpc.Id  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (parameters.Length < metaDataParamCount && metadata.defaultValues.Length > 0)// rpc call didn't set values for all optional parameters' so we need to assign the default values for them.   {  	var suppliedParamsCount = parameters.Length;  	// the index we should start storing default values of optional parameters.  	var missingParamsCount = metaDataParamCount - parameters.Length;  	// the amount of optional parameters without a value set by rpc-call.  	Array.Resize (ref parameters' parameters.Length + missingParamsCount);  	// resize the array to include all optional parameters.  	for (int paramIndex = parameters.Length - 1' defaultIndex = metadata.defaultValues.Length - 1; // fill missing parameters from the back   	paramIndex >= suppliedParamsCount && defaultIndex >= 0; // to don't overwrite supplied ones.  	paramIndex--' defaultIndex--) {  		parameters [paramIndex] = metadata.defaultValues [defaultIndex].Value;  	}  	if (missingParamsCount > metadata.defaultValues.Length) {  		JsonResponse response = new JsonResponse {  			Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Number of default parameters {0} not sufficient to fill all missing parameters {1}"' metadata.defaultValues.Length' missingParamsCount)))'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (missingParamsCount > metadata.defaultValues.Length) {  	JsonResponse response = new JsonResponse {  		Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Number of default parameters {0} not sufficient to fill all missing parameters {1}"' metadata.defaultValues.Length' missingParamsCount)))'  		Id = Rpc.Id  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (parameters.Length != metaDataParamCount) {  	JsonResponse response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' string.Format ("Expecting {0} parameters' and received {1}"' metadata.parameters.Length' parameters.Length)))'  		Id = Rpc.Id  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: try {  	var results = handle.DynamicInvoke (parameters);  	var last = parameters.LastOrDefault ();  	var contextException = RpcGetAndRemoveRpcException ();  	if (contextException != null) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' contextException)'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	if (expectsRefException && last != null && last is JsonRpcException) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' last as JsonRpcException)'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	return PostProcess (Rpc' new JsonResponse () {  		Result = results  	}' RpcContext);  } catch (Exception ex) {  	JsonResponse response;  	if (ex is TargetParameterCountException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' ex))  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	// We really dont care about the TargetInvocationException' just pass on the inner exception  	if (ex is JsonRpcException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' ex as JsonRpcException)  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	if (ex.InnerException != null && ex.InnerException is JsonRpcException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' ex.InnerException as JsonRpcException)  		};  		return PostProcess (Rpc' response' RpcContext);  	} else if (ex.InnerException != null) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex.InnerException))  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex))  	};  	return PostProcess (Rpc' response' RpcContext);  } finally {  	RemoveRpcContext ();  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: try {  	var results = handle.DynamicInvoke (parameters);  	var last = parameters.LastOrDefault ();  	var contextException = RpcGetAndRemoveRpcException ();  	if (contextException != null) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' contextException)'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	if (expectsRefException && last != null && last is JsonRpcException) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' last as JsonRpcException)'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	return PostProcess (Rpc' new JsonResponse () {  		Result = results  	}' RpcContext);  } catch (Exception ex) {  	JsonResponse response;  	if (ex is TargetParameterCountException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' ex))  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	// We really dont care about the TargetInvocationException' just pass on the inner exception  	if (ex is JsonRpcException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' ex as JsonRpcException)  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	if (ex.InnerException != null && ex.InnerException is JsonRpcException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' ex.InnerException as JsonRpcException)  		};  		return PostProcess (Rpc' response' RpcContext);  	} else if (ex.InnerException != null) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex.InnerException))  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex))  	};  	return PostProcess (Rpc' response' RpcContext);  } finally {  	RemoveRpcContext ();  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: try {  	var results = handle.DynamicInvoke (parameters);  	var last = parameters.LastOrDefault ();  	var contextException = RpcGetAndRemoveRpcException ();  	if (contextException != null) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' contextException)'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	if (expectsRefException && last != null && last is JsonRpcException) {  		JsonResponse response = new JsonResponse () {  			Error = ProcessException (Rpc' last as JsonRpcException)'  			Id = Rpc.Id  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	return PostProcess (Rpc' new JsonResponse () {  		Result = results  	}' RpcContext);  } catch (Exception ex) {  	JsonResponse response;  	if (ex is TargetParameterCountException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' ex))  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	// We really dont care about the TargetInvocationException' just pass on the inner exception  	if (ex is JsonRpcException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' ex as JsonRpcException)  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	if (ex.InnerException != null && ex.InnerException is JsonRpcException) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' ex.InnerException as JsonRpcException)  		};  		return PostProcess (Rpc' response' RpcContext);  	} else if (ex.InnerException != null) {  		response = new JsonResponse () {  			Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex.InnerException))  		};  		return PostProcess (Rpc' response' RpcContext);  	}  	response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex))  	};  	return PostProcess (Rpc' response' RpcContext);  } finally {  	RemoveRpcContext ();  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (ex is TargetParameterCountException) {  	response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' ex))  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: response = new JsonResponse () {  	Error = ProcessException (Rpc' new JsonRpcException (-32602' "Invalid params"' ex))  };  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (ex.InnerException != null && ex.InnerException is JsonRpcException) {  	response = new JsonResponse () {  		Error = ProcessException (Rpc' ex.InnerException as JsonRpcException)  	};  	return PostProcess (Rpc' response' RpcContext);  } else if (ex.InnerException != null) {  	response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex.InnerException))  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (ex.InnerException != null) {  	response = new JsonResponse () {  		Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex.InnerException))  	};  	return PostProcess (Rpc' response' RpcContext);  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: response = new JsonResponse () {  	Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex.InnerException))  };  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: response = new JsonResponse () {  	Error = ProcessException (Rpc' new JsonRpcException (-32603' "Internal Error"' ex))  };  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,PostProcess,The following statement contains a magic number: if (externalPostProcessingHandler != null) {  	try {  		JsonRpcException exception = externalPostProcessingHandler (request' response' context);  		if (exception != null) {  			response = new JsonResponse () {  				Error = exception  			};  		}  	} catch (Exception ex) {  		response = new JsonResponse () {  			Error = ProcessException (request' new JsonRpcException (-32603' "Internal Error"' ex))  		};  	}  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,PostProcess,The following statement contains a magic number: try {  	JsonRpcException exception = externalPostProcessingHandler (request' response' context);  	if (exception != null) {  		response = new JsonResponse () {  			Error = exception  		};  	}  } catch (Exception ex) {  	response = new JsonResponse () {  		Error = ProcessException (request' new JsonRpcException (-32603' "Internal Error"' ex))  	};  }  
Magic Number,AustinHarris.JsonRpc,Handler,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,PostProcess,The following statement contains a magic number: response = new JsonResponse () {  	Error = ProcessException (request' new JsonRpcException (-32603' "Internal Error"' ex))  };  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: try {  	Tuple<JsonRequest' JsonResponse>[] batch = null;  	if (isSingleRpc (jsonRpc)) {  		batch = new[] {  			Tuple.Create (JsonConvert.DeserializeObject<JsonRequest> (jsonRpc)' new JsonResponse ())  		};  	} else {  		batch = JsonConvert.DeserializeObject<JsonRequest[]> (jsonRpc).Select (request => new Tuple<JsonRequest' JsonResponse> (request' new JsonResponse ())).ToArray ();  	}  	if (batch.Length == 0) {  		return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  			Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty."))  		});  	}  	foreach (var tuple in batch) {  		var jsonRequest = tuple.Item1;  		var jsonResponse = tuple.Item2;  		if (jsonRequest == null) {  			jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  		} else {  			jsonResponse.Id = jsonRequest.Id;  			if (jsonRequest.Method == null) {  				jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  			} else {  				var data = handler.Handle (jsonRequest' jsonRpcContext);  				if (data == null)  					continue;  				jsonResponse.Error = data.Error;  				jsonResponse.Result = data.Result;  			}  		}  	}  	var responses = new string[batch.Count (x => x.Item2.Id != null || x.Item2.Error != null)];  	var idx = 0;  	foreach (var resp in batch.Where (x => x.Item2.Id != null || x.Item2.Error != null)) {  		if (resp.Item2.Result == null && resp.Item2.Error == null) {  			// Per json rpc 2.0 spec  			// result : This member is REQUIRED on success.  			// This member MUST NOT exist if there was an error invoking the method.      			// Either the result member or error member MUST be included' but both members MUST NOT be included.  			resp.Item2.Result = new Newtonsoft.Json.Linq.JValue ((Object)null);  		}  		responses [idx++] = JsonConvert.SerializeObject (resp.Item2);  	}  	return responses.Length == 0 ? string.Empty : responses.Length == 1 ? responses [0] : string.Format ("[{0}]"' string.Join ("'"' responses));  } catch (Exception ex) {  	return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  		Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' ex))  	});  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: try {  	Tuple<JsonRequest' JsonResponse>[] batch = null;  	if (isSingleRpc (jsonRpc)) {  		batch = new[] {  			Tuple.Create (JsonConvert.DeserializeObject<JsonRequest> (jsonRpc)' new JsonResponse ())  		};  	} else {  		batch = JsonConvert.DeserializeObject<JsonRequest[]> (jsonRpc).Select (request => new Tuple<JsonRequest' JsonResponse> (request' new JsonResponse ())).ToArray ();  	}  	if (batch.Length == 0) {  		return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  			Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty."))  		});  	}  	foreach (var tuple in batch) {  		var jsonRequest = tuple.Item1;  		var jsonResponse = tuple.Item2;  		if (jsonRequest == null) {  			jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  		} else {  			jsonResponse.Id = jsonRequest.Id;  			if (jsonRequest.Method == null) {  				jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  			} else {  				var data = handler.Handle (jsonRequest' jsonRpcContext);  				if (data == null)  					continue;  				jsonResponse.Error = data.Error;  				jsonResponse.Result = data.Result;  			}  		}  	}  	var responses = new string[batch.Count (x => x.Item2.Id != null || x.Item2.Error != null)];  	var idx = 0;  	foreach (var resp in batch.Where (x => x.Item2.Id != null || x.Item2.Error != null)) {  		if (resp.Item2.Result == null && resp.Item2.Error == null) {  			// Per json rpc 2.0 spec  			// result : This member is REQUIRED on success.  			// This member MUST NOT exist if there was an error invoking the method.      			// Either the result member or error member MUST be included' but both members MUST NOT be included.  			resp.Item2.Result = new Newtonsoft.Json.Linq.JValue ((Object)null);  		}  		responses [idx++] = JsonConvert.SerializeObject (resp.Item2);  	}  	return responses.Length == 0 ? string.Empty : responses.Length == 1 ? responses [0] : string.Format ("[{0}]"' string.Join ("'"' responses));  } catch (Exception ex) {  	return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  		Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' ex))  	});  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: try {  	Tuple<JsonRequest' JsonResponse>[] batch = null;  	if (isSingleRpc (jsonRpc)) {  		batch = new[] {  			Tuple.Create (JsonConvert.DeserializeObject<JsonRequest> (jsonRpc)' new JsonResponse ())  		};  	} else {  		batch = JsonConvert.DeserializeObject<JsonRequest[]> (jsonRpc).Select (request => new Tuple<JsonRequest' JsonResponse> (request' new JsonResponse ())).ToArray ();  	}  	if (batch.Length == 0) {  		return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  			Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty."))  		});  	}  	foreach (var tuple in batch) {  		var jsonRequest = tuple.Item1;  		var jsonResponse = tuple.Item2;  		if (jsonRequest == null) {  			jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  		} else {  			jsonResponse.Id = jsonRequest.Id;  			if (jsonRequest.Method == null) {  				jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  			} else {  				var data = handler.Handle (jsonRequest' jsonRpcContext);  				if (data == null)  					continue;  				jsonResponse.Error = data.Error;  				jsonResponse.Result = data.Result;  			}  		}  	}  	var responses = new string[batch.Count (x => x.Item2.Id != null || x.Item2.Error != null)];  	var idx = 0;  	foreach (var resp in batch.Where (x => x.Item2.Id != null || x.Item2.Error != null)) {  		if (resp.Item2.Result == null && resp.Item2.Error == null) {  			// Per json rpc 2.0 spec  			// result : This member is REQUIRED on success.  			// This member MUST NOT exist if there was an error invoking the method.      			// Either the result member or error member MUST be included' but both members MUST NOT be included.  			resp.Item2.Result = new Newtonsoft.Json.Linq.JValue ((Object)null);  		}  		responses [idx++] = JsonConvert.SerializeObject (resp.Item2);  	}  	return responses.Length == 0 ? string.Empty : responses.Length == 1 ? responses [0] : string.Format ("[{0}]"' string.Join ("'"' responses));  } catch (Exception ex) {  	return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  		Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' ex))  	});  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: try {  	Tuple<JsonRequest' JsonResponse>[] batch = null;  	if (isSingleRpc (jsonRpc)) {  		batch = new[] {  			Tuple.Create (JsonConvert.DeserializeObject<JsonRequest> (jsonRpc)' new JsonResponse ())  		};  	} else {  		batch = JsonConvert.DeserializeObject<JsonRequest[]> (jsonRpc).Select (request => new Tuple<JsonRequest' JsonResponse> (request' new JsonResponse ())).ToArray ();  	}  	if (batch.Length == 0) {  		return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  			Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty."))  		});  	}  	foreach (var tuple in batch) {  		var jsonRequest = tuple.Item1;  		var jsonResponse = tuple.Item2;  		if (jsonRequest == null) {  			jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  		} else {  			jsonResponse.Id = jsonRequest.Id;  			if (jsonRequest.Method == null) {  				jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  			} else {  				var data = handler.Handle (jsonRequest' jsonRpcContext);  				if (data == null)  					continue;  				jsonResponse.Error = data.Error;  				jsonResponse.Result = data.Result;  			}  		}  	}  	var responses = new string[batch.Count (x => x.Item2.Id != null || x.Item2.Error != null)];  	var idx = 0;  	foreach (var resp in batch.Where (x => x.Item2.Id != null || x.Item2.Error != null)) {  		if (resp.Item2.Result == null && resp.Item2.Error == null) {  			// Per json rpc 2.0 spec  			// result : This member is REQUIRED on success.  			// This member MUST NOT exist if there was an error invoking the method.      			// Either the result member or error member MUST be included' but both members MUST NOT be included.  			resp.Item2.Result = new Newtonsoft.Json.Linq.JValue ((Object)null);  		}  		responses [idx++] = JsonConvert.SerializeObject (resp.Item2);  	}  	return responses.Length == 0 ? string.Empty : responses.Length == 1 ? responses [0] : string.Format ("[{0}]"' string.Join ("'"' responses));  } catch (Exception ex) {  	return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  		Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' ex))  	});  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: if (batch.Length == 0) {  	return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  		Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty."))  	});  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  	Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (3200' "Invalid Request"' "Batch of calls was empty."))  });  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: foreach (var tuple in batch) {  	var jsonRequest = tuple.Item1;  	var jsonResponse = tuple.Item2;  	if (jsonRequest == null) {  		jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  	} else {  		jsonResponse.Id = jsonRequest.Id;  		if (jsonRequest.Method == null) {  			jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  		} else {  			var data = handler.Handle (jsonRequest' jsonRpcContext);  			if (data == null)  				continue;  			jsonResponse.Error = data.Error;  			jsonResponse.Result = data.Result;  		}  	}  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: foreach (var tuple in batch) {  	var jsonRequest = tuple.Item1;  	var jsonResponse = tuple.Item2;  	if (jsonRequest == null) {  		jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  	} else {  		jsonResponse.Id = jsonRequest.Id;  		if (jsonRequest.Method == null) {  			jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  		} else {  			var data = handler.Handle (jsonRequest' jsonRpcContext);  			if (data == null)  				continue;  			jsonResponse.Error = data.Error;  			jsonResponse.Result = data.Result;  		}  	}  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: if (jsonRequest == null) {  	jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  } else {  	jsonResponse.Id = jsonRequest.Id;  	if (jsonRequest.Method == null) {  		jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  	} else {  		var data = handler.Handle (jsonRequest' jsonRpcContext);  		if (data == null)  			continue;  		jsonResponse.Error = data.Error;  		jsonResponse.Result = data.Result;  	}  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: if (jsonRequest == null) {  	jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  } else {  	jsonResponse.Id = jsonRequest.Id;  	if (jsonRequest.Method == null) {  		jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  	} else {  		var data = handler.Handle (jsonRequest' jsonRpcContext);  		if (data == null)  			continue;  		jsonResponse.Error = data.Error;  		jsonResponse.Result = data.Result;  	}  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: if (jsonRequest.Method == null) {  	jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  } else {  	var data = handler.Handle (jsonRequest' jsonRpcContext);  	if (data == null)  		continue;  	jsonResponse.Error = data.Error;  	jsonResponse.Result = data.Result;  }  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: jsonResponse.Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32600' "Invalid Request"' "Missing property 'method'"));  
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,F:\newReposMay17\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: return Newtonsoft.Json.JsonConvert.SerializeObject (new JsonResponse {  	Error = handler.ProcessParseException (jsonRpc' new JsonRpcException (-32700' "Parse error"' ex))  });  
