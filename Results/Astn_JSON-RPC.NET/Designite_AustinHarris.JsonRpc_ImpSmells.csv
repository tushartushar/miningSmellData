Implementation smell,Namespace,Class,File,Method,Description
Long Method,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The method has 178 lines of code.
Long Method,AustinHarris.JsonRpc,JsonRpcProcessor,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The method has 109 lines of code.
Complex Method,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,Cyclomatic complexity of the method is 12
Complex Method,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,CleanUpParameter,Cyclomatic complexity of the method is 9
Complex Method,AustinHarris.JsonRpc,JsonRpcProcessor,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,Cyclomatic complexity of the method is 8
Complex Method,AustinHarris.JsonRpc,SMDAdditionalParameters,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,GetTypeRecursive,Cyclomatic complexity of the method is 11
Long Parameter List,AustinHarris.JsonRpc,SMDService,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,SMDService,The method has 5 parameters. Parameters: transport' envelope' parameters' defaultValues' dele
Long Identifier,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,RegisterFuction,The length of the parameter parameterNameDefaultValueMapping is 32.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "            if (paramCount == metaDataParamCount - 1 && metadata.parameters[metaDataParamCount - 1].ObjectType.Name.Equals(Name_of_JSONRPCEXCEPTION)) " is 137.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "            if (parameters.Length < metaDataParamCount && metadata.defaultValues.Length > 0) // rpc call didn't set values for all optional parameters' so we need to assign the default values for them. " is 189.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "                var suppliedParamsCount = parameters.Length; // the index we should start storing default values of optional parameters. " is 120.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "                var missingParamsCount = metaDataParamCount - parameters.Length; // the amount of optional parameters without a value set by rpc-call. " is 134.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "                Array.Resize(ref parameters' parameters.Length + missingParamsCount); // resize the array to include all optional parameters. " is 125.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "                for (int paramIndex = parameters.Length - 1' defaultIndex = metadata.defaultValues.Length - 1;     // fill missing parameters from the back  " is 139.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "                    paramIndex >= suppliedParamsCount && defaultIndex >= 0;                                        // to don't overwrite supplied ones. " is 131.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The length of the statement  "                    response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex.InnerException)) }; " is 131.
Long Statement,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,PostProcess,The length of the statement  "                    response = new JsonResponse() { Error = ProcessException(request' new JsonRpcException(-32603' "Internal Error"' ex)) }; " is 120.
Long Statement,AustinHarris.JsonRpc,ServiceBinder,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\ServiceBinder.cs,BindService,The length of the statement  "            var methods = item.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).Where(m => m.GetCustomAttributes(typeof(JsonRpcMethodAttribute)' false).Length > 0); " is 184.
Long Statement,AustinHarris.JsonRpc,ServiceBinder,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\ServiceBinder.cs,BindService,The length of the statement  "                Dictionary<string' object> defaultValues = new Dictionary<string' object>(); // dictionary that holds default values for optional params. " is 137.
Long Statement,AustinHarris.JsonRpc,ServiceBinder,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\ServiceBinder.cs,BindService,The length of the statement  "                    var newDel = Delegate.CreateDelegate(System.Linq.Expressions.Expression.GetDelegateType(paras.Values.ToArray())' instance /*Need to add support for other methods outside of this instance*/' meth); " is 196.
Complex Conditional,AustinHarris.JsonRpc,SMDAdditionalParameters,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\SMDService.cs,isSimpleType,The conditional expression  "name.Contains("newtonsoft")                  || name == "system.sbyte"                  || name == "system.byte"                  || name == "system.int16"                  || name == "system.uint16"                  || name == "system.int32"                  || name == "system.uint32"                  || name == "system.int64"                  || name == "system.uint64"                  || name == "system.char"                  || name == "system.single"                  || name == "system.double"                  || name == "system.boolean"                  || name == "system.decimal"                  || name == "system.float"                  || name == "system.numeric"                  || name == "system.money"                  || name == "system.string"                  || name == "system.object"                  || name == "system.type"                 // || name == "system.datetime"                  || name == "system.reflection.membertypes""  is complex.
Empty Catch Block,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,CleanUpParameter,The method has an empty catch block.
Empty Catch Block,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,CleanUpParameter,The method has an empty catch block.
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (this.MetaData.Services.TryGetValue(Rpc.Method' out metadata))              {                  handle = metadata.dele;               } else if (metadata == null)              {                  JsonResponse response = new JsonResponse()                  {                      Result = null'                      Error = new JsonRpcException(-32601' "Method not found"' "The method does not exist / is not available.")'                      Id = Rpc.Id                  };                  return PostProcess(Rpc' response' RpcContext);              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (Rpc.Params is Newtonsoft.Json.Linq.JArray)              {                  var jarr = ((Newtonsoft.Json.Linq.JArray)Rpc.Params);                  for (int i = 0; i < loopCt; i++)                  {                      parameters[i] = CleanUpParameter(jarr[i]' metadata.parameters[i]);                  }              }              else if (Rpc.Params is Newtonsoft.Json.Linq.JObject)              {                  var asDict = Rpc.Params as IDictionary<string' Newtonsoft.Json.Linq.JToken>;                  for (int i = 0; i < loopCt && i < metadata.parameters.Length; i++)                  {                      if (asDict.ContainsKey(metadata.parameters[i].Name) == true)                      {                          parameters[i] = CleanUpParameter(asDict[metadata.parameters[i].Name]' metadata.parameters[i]);                          continue;                      }                      else                      {                          JsonResponse response = new JsonResponse()                          {                              Error = ProcessException(Rpc'                              new JsonRpcException(-32602'                                  "Invalid params"'                                  string.Format("Named parameter '{0}' was not present."'                                                  metadata.parameters[i].Name)                                  ))'                              Id = Rpc.Id                          };                          return PostProcess(Rpc' response' RpcContext);                      }                  }              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (parameters.Length < metaDataParamCount && metadata.defaultValues.Length > 0) // rpc call didn't set values for all optional parameters' so we need to assign the default values for them.              {                  var suppliedParamsCount = parameters.Length; // the index we should start storing default values of optional parameters.                  var missingParamsCount = metaDataParamCount - parameters.Length; // the amount of optional parameters without a value set by rpc-call.                  Array.Resize(ref parameters' parameters.Length + missingParamsCount); // resize the array to include all optional parameters.                    for (int paramIndex = parameters.Length - 1' defaultIndex = metadata.defaultValues.Length - 1;     // fill missing parameters from the back                       paramIndex >= suppliedParamsCount && defaultIndex >= 0;                                        // to don't overwrite supplied ones.                      paramIndex--' defaultIndex--)                  {                      parameters[paramIndex] = metadata.defaultValues[defaultIndex].Value;                  }                    if (missingParamsCount > metadata.defaultValues.Length)                  {                      JsonResponse response = new JsonResponse                      {                          Error = ProcessException(Rpc'                              new JsonRpcException(-32602'                                  "Invalid params"'                                  string.Format(                                      "Number of default parameters {0} not sufficient to fill all missing parameters {1}"'                                      metadata.defaultValues.Length' missingParamsCount)                                  ))'                          Id = Rpc.Id                      };                      return PostProcess(Rpc' response' RpcContext);                  }              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: if (parameters.Length != metaDataParamCount)              {                  JsonResponse response = new JsonResponse()                  {                      Error = ProcessException(Rpc'                      new JsonRpcException(-32602'                          "Invalid params"'                          string.Format("Expecting {0} parameters' and received {1}"'                                          metadata.parameters.Length'                                          parameters.Length)                          ))'                      Id = Rpc.Id                  };                  return PostProcess(Rpc' response' RpcContext);              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: try              {                  var results = handle.DynamicInvoke(parameters);                                    var last = parameters.LastOrDefault();                  var contextException = RpcGetAndRemoveRpcException();                  JsonResponse response = null;                  if (contextException != null)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' contextException)' Id = Rpc.Id };                  }                  else if (expectsRefException && last != null && last is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' last as JsonRpcException)' Id = Rpc.Id };                  }                  else                  {                      response = new JsonResponse() { Result = results };                  }                  return PostProcess(Rpc' response' RpcContext);              }              catch (Exception ex)              {                  JsonResponse response;                  if (ex is TargetParameterCountException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32602' "Invalid params"' ex)) };                      return PostProcess(Rpc' response' RpcContext);                  }                    // We really dont care about the TargetInvocationException' just pass on the inner exception                  if (ex is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' ex as JsonRpcException) };                      return PostProcess(Rpc' response' RpcContext);                  }                  if (ex.InnerException != null && ex.InnerException is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' ex.InnerException as JsonRpcException) };                      return PostProcess(Rpc' response' RpcContext);                  }                  else if (ex.InnerException != null)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex.InnerException)) };                      return PostProcess(Rpc' response' RpcContext);                  }                    response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex)) };                  return PostProcess(Rpc' response' RpcContext);              }              finally              {                  RemoveRpcContext();              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: try              {                  var results = handle.DynamicInvoke(parameters);                                    var last = parameters.LastOrDefault();                  var contextException = RpcGetAndRemoveRpcException();                  JsonResponse response = null;                  if (contextException != null)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' contextException)' Id = Rpc.Id };                  }                  else if (expectsRefException && last != null && last is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' last as JsonRpcException)' Id = Rpc.Id };                  }                  else                  {                      response = new JsonResponse() { Result = results };                  }                  return PostProcess(Rpc' response' RpcContext);              }              catch (Exception ex)              {                  JsonResponse response;                  if (ex is TargetParameterCountException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32602' "Invalid params"' ex)) };                      return PostProcess(Rpc' response' RpcContext);                  }                    // We really dont care about the TargetInvocationException' just pass on the inner exception                  if (ex is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' ex as JsonRpcException) };                      return PostProcess(Rpc' response' RpcContext);                  }                  if (ex.InnerException != null && ex.InnerException is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' ex.InnerException as JsonRpcException) };                      return PostProcess(Rpc' response' RpcContext);                  }                  else if (ex.InnerException != null)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex.InnerException)) };                      return PostProcess(Rpc' response' RpcContext);                  }                    response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex)) };                  return PostProcess(Rpc' response' RpcContext);              }              finally              {                  RemoveRpcContext();              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,Handle,The following statement contains a magic number: try              {                  var results = handle.DynamicInvoke(parameters);                                    var last = parameters.LastOrDefault();                  var contextException = RpcGetAndRemoveRpcException();                  JsonResponse response = null;                  if (contextException != null)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' contextException)' Id = Rpc.Id };                  }                  else if (expectsRefException && last != null && last is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' last as JsonRpcException)' Id = Rpc.Id };                  }                  else                  {                      response = new JsonResponse() { Result = results };                  }                  return PostProcess(Rpc' response' RpcContext);              }              catch (Exception ex)              {                  JsonResponse response;                  if (ex is TargetParameterCountException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32602' "Invalid params"' ex)) };                      return PostProcess(Rpc' response' RpcContext);                  }                    // We really dont care about the TargetInvocationException' just pass on the inner exception                  if (ex is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' ex as JsonRpcException) };                      return PostProcess(Rpc' response' RpcContext);                  }                  if (ex.InnerException != null && ex.InnerException is JsonRpcException)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' ex.InnerException as JsonRpcException) };                      return PostProcess(Rpc' response' RpcContext);                  }                  else if (ex.InnerException != null)                  {                      response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex.InnerException)) };                      return PostProcess(Rpc' response' RpcContext);                  }                    response = new JsonResponse() { Error = ProcessException(Rpc' new JsonRpcException(-32603' "Internal Error"' ex)) };                  return PostProcess(Rpc' response' RpcContext);              }              finally              {                  RemoveRpcContext();              }
Magic Number,AustinHarris.JsonRpc,Handler,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\Handler.cs,PostProcess,The following statement contains a magic number: if (externalPostProcessingHandler != null)              {                  try                  {                      JsonRpcException exception = externalPostProcessingHandler(request' response' context);                      if (exception != null)                      {                          response = new JsonResponse() { Error = exception };                      }                  }                  catch (Exception ex)                  {                      response = new JsonResponse() { Error = ProcessException(request' new JsonRpcException(-32603' "Internal Error"' ex)) };                  }              }
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: try              {                  if (isSingleRpc(jsonRpc))                  {                      var foo = JsonConvert.DeserializeObject<JsonRequest>(jsonRpc);                      batch = new[] { foo };                  }                  else                  {                      batch = JsonConvert.DeserializeObject<JsonRequest[]>(jsonRpc);                  }              }              catch (Exception ex)              {                  return Newtonsoft.Json.JsonConvert.SerializeObject(new JsonResponse                  {                      Error = handler.ProcessParseException(jsonRpc' new JsonRpcException(-32700' "Parse error"' ex))                  });              }
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: if (batch.Length == 0)              {                  return Newtonsoft.Json.JsonConvert.SerializeObject(new JsonResponse                  {                      Error = handler.ProcessParseException(jsonRpc'                          new JsonRpcException(3200' "Invalid Request"' "Batch of calls was empty."))                  });              }
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: for (var i = 0; i < batch.Length; i++)              {                  var jsonRequest = batch[i];                  var jsonResponse = new JsonResponse();                    if (jsonRequest == null)                  {                      jsonResponse.Error = handler.ProcessParseException(jsonRpc'                          new JsonRpcException(-32700' "Parse error"'                              "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));                  }                  else if (jsonRequest.Method == null)                  {                      jsonResponse.Error = handler.ProcessParseException(jsonRpc'                          new JsonRpcException(-32600' "Invalid Request"' "Missing property 'method'"));                  }                  else                  {                      jsonResponse.Id = jsonRequest.Id;                        var data = handler.Handle(jsonRequest' jsonRpcContext);                        if (data == null) continue;                        jsonResponse.Error = data.Error;                      jsonResponse.Result = data.Result;                    }                  if (jsonResponse.Result == null && jsonResponse.Error == null)                  {                      // Per json rpc 2.0 spec                      // result : This member is REQUIRED on success.                      // This member MUST NOT exist if there was an error invoking the method.                          // Either the result member or error member MUST be included' but both members MUST NOT be included.                      jsonResponse.Result = new Newtonsoft.Json.Linq.JValue((Object)null);                  }                  // special case optimization for single Item batch                  if (singleBatch && (jsonResponse.Id != null || jsonResponse.Error != null))                  {                      StringWriter sw = new StringWriter();                      JsonTextWriter writer = new JsonTextWriter(sw);                      writer.WriteStartObject();                      writer.WritePropertyName("jsonrpc"); writer.WriteValue("2.0");                        if (jsonResponse.Error != null)                      {                          writer.WritePropertyName("error"); writer.WriteRawValue(JsonConvert.SerializeObject(jsonResponse.Error));                      }                      else                      {                          writer.WritePropertyName("result"); writer.WriteRawValue(JsonConvert.SerializeObject(jsonResponse.Result));                      }                      writer.WritePropertyName("id"); writer.WriteValue(jsonResponse.Id);                      writer.WriteEndObject();                      return sw.ToString();                        //return JsonConvert.SerializeObject(jsonResponse);                  }                  else if (jsonResponse.Id == null && jsonResponse.Error == null)                  {                      // do nothing                      sbResult = new StringBuilder(0);                  }                  else                  {                      // write out the response                      if (i == 0)                      {                          sbResult = new StringBuilder("[");                      }                        sbResult.Append(JsonConvert.SerializeObject(jsonResponse));                      if (i < batch.Length - 1)                      {                          sbResult.Append(''');                      }                      else if (i == batch.Length - 1)                      {                          sbResult.Append(']');                      }                  }              }
Magic Number,AustinHarris.JsonRpc,JsonRpcProcessor,C:\repos\Astn_JSON-RPC.NET\Json-Rpc\JsonRpcProcessor.cs,ProcessInternal,The following statement contains a magic number: for (var i = 0; i < batch.Length; i++)              {                  var jsonRequest = batch[i];                  var jsonResponse = new JsonResponse();                    if (jsonRequest == null)                  {                      jsonResponse.Error = handler.ProcessParseException(jsonRpc'                          new JsonRpcException(-32700' "Parse error"'                              "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."));                  }                  else if (jsonRequest.Method == null)                  {                      jsonResponse.Error = handler.ProcessParseException(jsonRpc'                          new JsonRpcException(-32600' "Invalid Request"' "Missing property 'method'"));                  }                  else                  {                      jsonResponse.Id = jsonRequest.Id;                        var data = handler.Handle(jsonRequest' jsonRpcContext);                        if (data == null) continue;                        jsonResponse.Error = data.Error;                      jsonResponse.Result = data.Result;                    }                  if (jsonResponse.Result == null && jsonResponse.Error == null)                  {                      // Per json rpc 2.0 spec                      // result : This member is REQUIRED on success.                      // This member MUST NOT exist if there was an error invoking the method.                          // Either the result member or error member MUST be included' but both members MUST NOT be included.                      jsonResponse.Result = new Newtonsoft.Json.Linq.JValue((Object)null);                  }                  // special case optimization for single Item batch                  if (singleBatch && (jsonResponse.Id != null || jsonResponse.Error != null))                  {                      StringWriter sw = new StringWriter();                      JsonTextWriter writer = new JsonTextWriter(sw);                      writer.WriteStartObject();                      writer.WritePropertyName("jsonrpc"); writer.WriteValue("2.0");                        if (jsonResponse.Error != null)                      {                          writer.WritePropertyName("error"); writer.WriteRawValue(JsonConvert.SerializeObject(jsonResponse.Error));                      }                      else                      {                          writer.WritePropertyName("result"); writer.WriteRawValue(JsonConvert.SerializeObject(jsonResponse.Result));                      }                      writer.WritePropertyName("id"); writer.WriteValue(jsonResponse.Id);                      writer.WriteEndObject();                      return sw.ToString();                        //return JsonConvert.SerializeObject(jsonResponse);                  }                  else if (jsonResponse.Id == null && jsonResponse.Error == null)                  {                      // do nothing                      sbResult = new StringBuilder(0);                  }                  else                  {                      // write out the response                      if (i == 0)                      {                          sbResult = new StringBuilder("[");                      }                        sbResult.Append(JsonConvert.SerializeObject(jsonResponse));                      if (i < batch.Length - 1)                      {                          sbResult.Append(''');                      }                      else if (i == batch.Length - 1)                      {                          sbResult.Append(']');                      }                  }              }
