Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateMultipleServicesOfSameTypeInTheirOwnSessions,The length of the statement  "            Func<int' string> expectedResult = (int param) => String.Format("{{\"jsonrpc\":\"2.0\"'\"result\":{0}'\"id\":1}}"' param); " is 122.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateAndRemoveSession,The length of the statement  "            h.RegisterFuction("workie"' metadata' new System.Collections.Generic.Dictionary<string' object>()'new Func<string' string>(x => "workie ... " + x)); " is 148.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateAndRemoveSession,The length of the statement  "            string expectedResultAfterDestroy = "{\"jsonrpc\":\"2.0\"'\"error\":{\"message\":\"Method not found\"'\"code\":-32601'\"data\":\"The method does not exist / is not available.\"}'\"id\":1}"; " is 189.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,StringToRefException,The length of the statement  "            string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"message\":\"refException worked\"'\"code\":-1'\"data\":null}'\"id\":1}"; " is 131.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,ReturnsCustomRecursiveClass,The length of the statement  "            string expectedResult = "{\"jsonrpc\":\"2.0\"'\"result\":{\"Nested1\":{\"Nested1\":null'\"Value1\":5}'\"Value1\":10}'\"id\":1}"; " is 128.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestOptionalParamChar_2ndPresentObjectSyntax,The length of the statement  "            string request = @"{method:'TestOptionalParamchar_2x''params:{'input1':" + (int)'c' + "' 'input2':" + (int)'d' + "}'id:1}"; " is 123.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestOptionalParametersBoolsAndStrings,The length of the statement  "                "{\"jsonrpc\":\"2.0\"'\"method\":\"TestOptionalParametersBoolsAndStrings\"'\"params\":{\"input1\":\"murkel\"}'\"Id\":1}"; " is 121.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestBatchResultWrongRequests,The length of the statement  "            Assert.IsTrue(Regex.IsMatch(result.Result' @"\[(\{.*""error"":.*?'""id"":.*?\})'(\{.*""error"":.*?'""id"":.*?\})\]")' "Should have two errors."); " is 145.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestBatchResultMultipleMethodCallsNotificationAtLast,The length of the statement  "                @"[{""jsonrpc"":""2.0""'""method"":""ReturnsDateTime""'""params"":{}'""id"":1}'{""jsonrpc"":""2.0""'""method"":""Notify""'""params"":[""Hello World!""]}]"; " is 155.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestNotificationVoidResult,The length of the statement  "            Assert.IsTrue(result.Result.Contains("result")' "Json Rpc 2.0 Spec - 'result' - This member is REQUIRED on success. A function that returns void should have the result property included even though the value may be null."); " is 223.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestLeftOutParams,The length of the statement  "            Assert.IsFalse(result.Result.Contains(@"error"":{""code"":-32602")' @"According to JSON-RPC 2.0 the ""params"" member MAY be omitted."); " is 136.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestMultipleResults,The length of the statement  "                    @"[{""jsonrpc"":""2.0""'""method"":""ReturnsDateTime""'""params"":{}'""id"":1}'{""jsonrpc"":""2.0""'""method"":""ReturnsDateTime""'""params"":{}'""id"":1}]"); " is 158.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPreProcessorThrowsJsonRPCException,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"code\":-27000'\"message\":\"Just some testing\"'\"data\":null}'\"id\":1}"; " is 133.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPreProcessorSetsException,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"code\":-27000'\"message\":\"This exception was thrown using: JsonRpcContext.SetException()\"'\"data\":null}'\"id\":1}"; " is 178.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPreProcessOnSession,The length of the statement  "            h.RegisterFuction("workie"' metadata' new System.Collections.Generic.Dictionary<string' object>()'new Func<string' string>(x => "workie ... " + x)); " is 148.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPreProcessOnSession,The length of the statement  "            string expectedResultAfterDestroy = "{\"jsonrpc\":\"2.0\"'\"error\":{\"message\":\"Method not found\"'\"code\":-32601'\"data\":\"The method does not exist / is not available.\"}'\"id\":1}"; " is 189.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsJsonRPCException,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"code\":-27000'\"message\":\"Just some testing\"'\"data\":null}'\"id\":1}"; " is 133.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorSetsException,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"code\":-27001'\"message\":\"This exception was thrown using: JsonRpcContext.SetException()\"'\"data\":null}'\"id\":1}"; " is 178.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorChangesReturn,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"code\":-123'\"message\":\"Test error\"'\"data\":null}'\"id\":1}"; " is 124.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsJsonRPCExceptionChangesReturn,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"code\":-123'\"message\":\"Test error\"'\"data\":null}'\"id\":1}"; " is 124.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsExceptionChangesReturn,The length of the statement  "                string expectedResult = "{\"jsonrpc\":\"2.0\"'\"error\":{\"message\":\"Test error\"'\"code\":-123'\"data\":null}'\"id\":1}"; " is 124.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessOnSession,The length of the statement  "            h.RegisterFuction("workie"' metadata' new System.Collections.Generic.Dictionary<string' object>()' new Func<string' string>(x => "workie ... " + x)); " is 149.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessOnSession,The length of the statement  "            string expectedResultAfterDestroy = "{\"jsonrpc\":\"2.0\"'\"error\":{\"message\":\"Method not found\"'\"code\":-32601'\"data\":\"The method does not exist / is not available.\"}'\"id\":1}"; " is 189.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCustomParameterName,The length of the statement  "            Func<string' string> request = (string paramName) => String.Format("{{method:'TestCustomParameterName''params:{{ {0}:'some string'}}'id:1}}"' paramName); " is 153.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCustomParameterWithNoSpecificName,The length of the statement  "            Func<string' string> request = (string paramName) => String.Format("{{method:'TestCustomParameterWithNoSpecificName''params:{{ {0}:'some string'}}'id:1}}"' paramName); " is 167.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestNestedReturnType,The length of the statement  "            var expected = @"{""jsonrpc"":""2.0""'""result"":{""NodeId"":1'""Leafs"":[{""NodeId"":2'""Leafs"":[]}'{""NodeId"":3'""Leafs"":[]}]}'""id"":1}"; " is 143.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,AssertJsonAreEqual,The length of the statement  "            Newtonsoft.Json.Linq.JObject expected = (Newtonsoft.Json.Linq.JObject)Newtonsoft.Json.JsonConvert.DeserializeObject(expectedJson); " is 130.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,AssertJsonAreEqual,The length of the statement  "            Newtonsoft.Json.Linq.JObject actual = (Newtonsoft.Json.Linq.JObject)Newtonsoft.Json.JsonConvert.DeserializeObject(actualJson); " is 126.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,AssertJsonAreEqual,The length of the statement  "                Assert.IsTrue(actualJson.TryGetValue(expectedElementsEnumerator.Current.Key' out actualElement)' "Couldn't find " + path + "[" + expectedElementsEnumerator.Current.Key + "]"); " is 175.
Long Statement,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,AssertJsonAreEqual,The length of the statement  "                AssertJsonAreEqual(expectedElementsEnumerator.Current.Value' actualElement' path + "[" + expectedElementsEnumerator.Current.Key + "]"); " is 135.
Long Statement,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestPreProcessorSetsException,The length of the statement  "            JsonRpcContext.SetException(new JsonRpcException(-27000' "This exception was thrown using: JsonRpcContext.SetException()"' null)); " is 130.
Long Statement,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestPostProcessorSetsException,The length of the statement  "            JsonRpcContext.SetException(new JsonRpcException(-27001' "This exception was thrown using: JsonRpcContext.SetException()"' null)); " is 130.
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateMultipleServicesOfSameTypeInTheirOwnSessions,The following statement contains a magic number: i < 100
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateMultipleServicesOfSameTypeInTheirOwnSessions,The following statement contains a magic number: var result = JsonRpcProcessor.Process(i.ToString()' request(10));
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateMultipleServicesOfSameTypeInTheirOwnSessions,The following statement contains a magic number: var expected1 = JObject.Parse(expectedResult(10 + i));
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestCanCreateMultipleServicesOfSameTypeInTheirOwnSessions,The following statement contains a magic number: i < 100
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,NullableDateTimeToNullableDateTime,The following statement contains a magic number: var acutalDate = DateTime.Parse(result.Result.Substring(27' 33));
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,NullableDateTimeToNullableDateTime,The following statement contains a magic number: var acutalDate = DateTime.Parse(result.Result.Substring(27' 33));
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsJsonRPCException,The following statement contains a magic number: Assert.AreEqual(-27000' handler.response.Error.code' "Error code mismatch");
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsException,The following statement contains a magic number: Assert.AreEqual(-32603' handler.response.Error.code' "Error code mismatch");
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsJsonRPCExceptionChangesReturn,The following statement contains a magic number: Assert.AreEqual(-27000' handler.response.Error.code' "Error code mismatch");
Magic Number,AustinHarris.JsonRpcTestN,Test,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,TestPostProcessorThrowsExceptionChangesReturn,The following statement contains a magic number: Assert.AreEqual(-32603' handler.response.Error.code' "Error code mismatch");
Magic Number,AustinHarris.JsonRpcTestN,PostProcessHandlerLocal,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\Test.cs,PostProcess,The following statement contains a magic number: return new JsonRpcException(-123' "Test error"' null);
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,devideByZero,The following statement contains a magic number: var j = 15;
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,StringToThrowJsonRpcException,The following statement contains a magic number: throw new JsonRpcException(-27000' "Just some testing"' null);
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,ReturnsCustomRecursiveClass,The following statement contains a magic number: var obj = new recursiveClass() { Value1 = 10' Nested1 = new recursiveClass() { Value1 = 5 } };
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,ReturnsCustomRecursiveClass,The following statement contains a magic number: var obj = new recursiveClass() { Value1 = 10' Nested1 = new recursiveClass() { Value1 = 5 } };
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestPreProcessorThrowsJsonRPCException,The following statement contains a magic number: throw new JsonRpcException(-27000' "Just some testing"' null);
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestPreProcessorSetsException,The following statement contains a magic number: JsonRpcContext.SetException(new JsonRpcException(-27000' "This exception was thrown using: JsonRpcContext.SetException()"' null));
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestPostProcessorThrowsJsonRPCException,The following statement contains a magic number: throw new JsonRpcException(-27000' "Just some testing"' null);
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestPostProcessorSetsException,The following statement contains a magic number: JsonRpcContext.SetException(new JsonRpcException(-27001' "This exception was thrown using: JsonRpcContext.SetException()"' null));
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestNestedReturnType,The following statement contains a magic number: return new TreeNode              {                  NodeId = 1'                  Leafs =                      new[]                      {                          new TreeNode {NodeId = 2' Leafs = new List<TreeNode>()}'                          new TreeNode {NodeId = 3' Leafs = new List<TreeNode>()}                      }              };
Magic Number,AustinHarris.JsonRpcTestN,CalculatorService,D:\research\architectureSmells\repos\Astn_JSON-RPC.NET\AustinHarris.JsonRpcTestN\service.cs,TestNestedReturnType,The following statement contains a magic number: return new TreeNode              {                  NodeId = 1'                  Leafs =                      new[]                      {                          new TreeNode {NodeId = 2' Leafs = new List<TreeNode>()}'                          new TreeNode {NodeId = 3' Leafs = new List<TreeNode>()}                      }              };
