Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Squirrel.Tests.TestHelpers,AssertExtensions,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\AssertExtensions.cs,ToSafeString,Cyclomatic complexity of the method is 8
Complex Method,Squirrel.Tests.TestHelpers,ExposedObject,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\ExposedObject.cs,TryInvokeMember,Cyclomatic complexity of the method is 8
Complex Method,Squirrel.Tests.TestHelpers,ExposedObjectHelper,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\ExposedObjectHelper.cs,InvokeBestMethod,Cyclomatic complexity of the method is 8
Long Parameter List,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,ParseValidReleaseEntryLines,The method has 5 parameters. Parameters: releaseEntry' fileName' fileSize' baseUrl' query
Long Parameter List,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,ParseVersionTest,The method has 7 parameters. Parameters: releaseEntry' major' minor' patch' revision' prerelease' isDelta
Long Parameter List,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,ParseStagingPercentageTest,The method has 8 parameters. Parameters: releaseEntry' major' minor' patch' revision' prerelease' isDelta' stagingPercentage
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateFullPackagesFromDeltaSmokeTest,The length of the statement  "                }.ForEach(x => File.Copy(IntegrationTestHelper.GetPath("fixtures"' x)' Path.Combine(tempDir' "theApp"' "packages"' x))); " is 120.
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateFullPackagesFromDeltaSmokeTest,The length of the statement  "                var baseEntry = ReleaseEntry.GenerateFromFile(Path.Combine(tempDir' "theApp"' "packages"' "Squirrel.Core.1.0.0.0-full.nupkg")); " is 127.
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateFullPackagesFromDeltaSmokeTest,The length of the statement  "                var deltaEntry = ReleaseEntry.GenerateFromFile(Path.Combine(tempDir' "theApp"' "packages"' "Squirrel.Core.1.1.0.0-delta.nupkg")); " is 129.
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateFullPackagesFromDeltaSmokeTest,The length of the statement  "                var resultObs = (Task<ReleaseEntry>)fixture.GetType().GetMethod("createFullPackagesFromDeltas"' BindingFlags.NonPublic | BindingFlags.Instance) " is 143.
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateShortcutsRoundTrip,The length of the statement  "                fixture.CreateShortcutsForExecutable("SquirrelAwareApp.exe"' ShortcutLocation.Desktop | ShortcutLocation.StartMenu | ShortcutLocation.Startup | ShortcutLocation.AppRoot' false' null' null); " is 189.
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateShortcutsRoundTrip,The length of the statement  "                fixture.RemoveShortcutsForExecutable("SquirrelAwareApp.exe"' ShortcutLocation.Desktop | ShortcutLocation.StartMenu | ShortcutLocation.Startup | ShortcutLocation.AppRoot); " is 170.
Long Statement,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,GetShortcutsSmokeTest,The length of the statement  "                var result = fixture.GetShortcutsForExecutable("SquirrelAwareApp.exe"' ShortcutLocation.Desktop | ShortcutLocation.StartMenu | ShortcutLocation.Startup' null); " is 159.
Long Statement,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The length of the statement  "                    var target = Path.Combine(RootPath' ctx.Request.Url.AbsolutePath.Replace('/'' Path.DirectorySeparatorChar).Substring(1)); " is 121.
Long Statement,Squirrel.Tests,UpdateLocalReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UpdateManagerTests.cs,UpdateLocalReleasesSmokeTest,The length of the statement  "                    }.ForEach(x => File.Copy(IntegrationTestHelper.GetPath("fixtures"' x)' Path.Combine(tempDir' "theApp"' "packages"' x))); " is 120.
Long Statement,Squirrel.Tests.Core,CreateReleasePackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleasePackageTests.cs,ReleasePackageIntegrationTest,The length of the statement  "                List<string> nonDesktopPaths = new[] {"sl"' "winrt"' "netcore"' "win8"' "windows8"' "MonoAndroid"' "MonoTouch"' "MonoMac"' "wp"' } " is 130.
Long Statement,Squirrel.Tests.Core,CreateReleasePackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleasePackageTests.cs,FindPackageInOurLocalPackageList,The length of the statement  "            IPackage result = fixture.matchPackage(new LocalPackageRepository(sourceDir)' "xunit"' VersionUtility.ParseVersionSpec("[1.0'2.0]")); " is 133.
Long Statement,Squirrel.Tests.Core,CreateReleasePackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleasePackageTests.cs,FindDependentPackagesForDummyPackage,The length of the statement  "            IEnumerable<IPackage> results = fixture.findAllDependentPackages(default(IPackage)' (IPackageRepository)new LocalPackageRepository(sourceDir)' default(HashSet<string>)' default(FrameworkName)); " is 193.
Complex Conditional,Squirrel.Tests.TestHelpers,ExposedClass,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\ExposedClass.cs,TryInvokeMember,The conditional expression  "typeArgs == null                      && m_staticMethods.ContainsKey(binder.Name)                      && m_staticMethods[binder.Name].ContainsKey(args.Length)                      && ExposedObjectHelper.InvokeBestMethod(args' null' m_staticMethods[binder.Name][args.Length]' out result)"  is complex.
Complex Conditional,Squirrel.Tests.TestHelpers,ExposedObject,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\ExposedObject.cs,TryInvokeMember,The conditional expression  "typeArgs == null                      && m_instanceMethods.ContainsKey(binder.Name)                      && m_instanceMethods[binder.Name].ContainsKey(args.Length)                      && ExposedObjectHelper.InvokeBestMethod(args' m_object' m_instanceMethods[binder.Name][args.Length]' out result)"  is complex.
Empty Catch Block,Squirrel.Tests.TestHelpers,ExposedObjectHelper,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\ExposedObjectHelper.cs,TryInvoke,The method has an empty catch block.
Empty Catch Block,Squirrel.Tests.TestHelpers,ExposedObjectHelper,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\ExposedObjectHelper.cs,TryInvoke,The method has an empty catch block.
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CleanInstallRunsSquirrelAwareAppsWithInstallFlag,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,UpgradeRunsSquirrelAwareAppsWithUpgradeFlag,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,UpgradeRunsSquirrelAwareAppsWithUpgradeFlag,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,RunningUpgradeAppTwiceDoesntCrash,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,RunningUpgradeAppTwiceDoesntCrash,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,RunningUpgradeAppTwiceDoesntCrash,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,FullUninstallRemovesAllVersions,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,FullUninstallRemovesAllVersions,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,ApplyReleasesWithOneReleaseFile,The following statement contains a magic number: progress                      .Aggregate(0' (acc' x) => { (x >= acc).ShouldBeTrue(); return x; })                      .ShouldEqual(100);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,ApplyReleaseWhichRemovesAFile,The following statement contains a magic number: progress                      .Aggregate(0' (acc' x) => { (x >= acc).ShouldBeTrue(); return x; })                      .ShouldEqual(100);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,ApplyReleaseWhichMovesAFileToADifferentDirectory,The following statement contains a magic number: progress                      .Aggregate(0' (acc' x) => { (x >= acc).ShouldBeTrue(); return x; })                      .ShouldEqual(100);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,ApplyReleasesWithDeltaReleases,The following statement contains a magic number: progress                      .Aggregate(0' (acc' x) => { (x >= acc).ShouldBeTrue(); return x; })                      .ShouldEqual(100);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateShortcutsRoundTrip,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,CreateShortcutsRoundTrip,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,GetShortcutsSmokeTest,The following statement contains a magic number: Assert.Equal(3' result.Keys.Count);
Magic Number,Squirrel.Tests,ApplyReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ApplyReleasesTests.cs,GetShortcutsSmokeTest,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The following statement contains a magic number: var listener = Task.Run(async () => {                  while (!shouldStop) {                      var ctx = await server.GetContextAsync();                        if (ctx.Request.HttpMethod != "GET") {                          closeResponseWith(ctx' 400' "GETs only");                          return;                      }                        var target = Path.Combine(RootPath' ctx.Request.Url.AbsolutePath.Replace('/'' Path.DirectorySeparatorChar).Substring(1));                      var fi = new FileInfo(target);                        if (!fi.FullName.StartsWith(RootPath)) {                          closeResponseWith(ctx' 401' "Not authorized");                          return;                      }                        if (!fi.Exists) {                          closeResponseWith(ctx' 404' "Not found");                          return;                      }                        try {                          using (var input = File.OpenRead(target)) {                              ctx.Response.StatusCode = 200;                              input.CopyTo(ctx.Response.OutputStream);                              ctx.Response.Close();                          }                      } catch (Exception ex) {                          closeResponseWith(ctx' 500' ex.ToString());                      }                  }              });
Magic Number,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The following statement contains a magic number: var listener = Task.Run(async () => {                  while (!shouldStop) {                      var ctx = await server.GetContextAsync();                        if (ctx.Request.HttpMethod != "GET") {                          closeResponseWith(ctx' 400' "GETs only");                          return;                      }                        var target = Path.Combine(RootPath' ctx.Request.Url.AbsolutePath.Replace('/'' Path.DirectorySeparatorChar).Substring(1));                      var fi = new FileInfo(target);                        if (!fi.FullName.StartsWith(RootPath)) {                          closeResponseWith(ctx' 401' "Not authorized");                          return;                      }                        if (!fi.Exists) {                          closeResponseWith(ctx' 404' "Not found");                          return;                      }                        try {                          using (var input = File.OpenRead(target)) {                              ctx.Response.StatusCode = 200;                              input.CopyTo(ctx.Response.OutputStream);                              ctx.Response.Close();                          }                      } catch (Exception ex) {                          closeResponseWith(ctx' 500' ex.ToString());                      }                  }              });
Magic Number,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The following statement contains a magic number: var listener = Task.Run(async () => {                  while (!shouldStop) {                      var ctx = await server.GetContextAsync();                        if (ctx.Request.HttpMethod != "GET") {                          closeResponseWith(ctx' 400' "GETs only");                          return;                      }                        var target = Path.Combine(RootPath' ctx.Request.Url.AbsolutePath.Replace('/'' Path.DirectorySeparatorChar).Substring(1));                      var fi = new FileInfo(target);                        if (!fi.FullName.StartsWith(RootPath)) {                          closeResponseWith(ctx' 401' "Not authorized");                          return;                      }                        if (!fi.Exists) {                          closeResponseWith(ctx' 404' "Not found");                          return;                      }                        try {                          using (var input = File.OpenRead(target)) {                              ctx.Response.StatusCode = 200;                              input.CopyTo(ctx.Response.OutputStream);                              ctx.Response.Close();                          }                      } catch (Exception ex) {                          closeResponseWith(ctx' 500' ex.ToString());                      }                  }              });
Magic Number,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The following statement contains a magic number: var listener = Task.Run(async () => {                  while (!shouldStop) {                      var ctx = await server.GetContextAsync();                        if (ctx.Request.HttpMethod != "GET") {                          closeResponseWith(ctx' 400' "GETs only");                          return;                      }                        var target = Path.Combine(RootPath' ctx.Request.Url.AbsolutePath.Replace('/'' Path.DirectorySeparatorChar).Substring(1));                      var fi = new FileInfo(target);                        if (!fi.FullName.StartsWith(RootPath)) {                          closeResponseWith(ctx' 401' "Not authorized");                          return;                      }                        if (!fi.Exists) {                          closeResponseWith(ctx' 404' "Not found");                          return;                      }                        try {                          using (var input = File.OpenRead(target)) {                              ctx.Response.StatusCode = 200;                              input.CopyTo(ctx.Response.OutputStream);                              ctx.Response.Close();                          }                      } catch (Exception ex) {                          closeResponseWith(ctx' 500' ex.ToString());                      }                  }              });
Magic Number,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The following statement contains a magic number: var listener = Task.Run(async () => {                  while (!shouldStop) {                      var ctx = await server.GetContextAsync();                        if (ctx.Request.HttpMethod != "GET") {                          closeResponseWith(ctx' 400' "GETs only");                          return;                      }                        var target = Path.Combine(RootPath' ctx.Request.Url.AbsolutePath.Replace('/'' Path.DirectorySeparatorChar).Substring(1));                      var fi = new FileInfo(target);                        if (!fi.FullName.StartsWith(RootPath)) {                          closeResponseWith(ctx' 401' "Not authorized");                          return;                      }                        if (!fi.Exists) {                          closeResponseWith(ctx' 404' "Not found");                          return;                      }                        try {                          using (var input = File.OpenRead(target)) {                              ctx.Response.StatusCode = 200;                              input.CopyTo(ctx.Response.OutputStream);                              ctx.Response.Close();                          }                      } catch (Exception ex) {                          closeResponseWith(ctx' 500' ex.ToString());                      }                  }              });
Magic Number,Squirrel.Tests,StaticHttpServer,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\StaticHttpServer.cs,Start,The following statement contains a magic number: var ret = Disposable.Create(() => {                  shouldStop = true;                  server.Stop();                  listener.Wait(2000);                    inner = null;              });
Magic Number,Squirrel.Tests,CreateUninstallerRegKeyTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UpdateManagerTests.cs,CallingMethodTwiceShouldUpdateInstaller,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Squirrel.Tests,UpdateLocalReleasesTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UpdateManagerTests.cs,UpdateLocalReleasesSmokeTest,The following statement contains a magic number: entries.Count().ShouldEqual(3);
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,CreateDeltaPackageIntegrationTest,The following statement contains a magic number: var tempFiles = Enumerable.Range(0' 3)                  .Select(_ => Path.GetTempPath() + Guid.NewGuid().ToString() + ".nupkg")                  .ToArray();
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,CreateDeltaPackageIntegrationTest,The following statement contains a magic number: deltaBuilder.CreateDeltaPackage(baseFixture' fixture' tempFiles[2]);
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,CreateDeltaPackageIntegrationTest,The following statement contains a magic number: var deltaPkg = new ZipPackage(tempFiles[2]);
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,CreateDeltaPackageIntegrationTest,The following statement contains a magic number: this.Log().Info("Base Size: {0}' Current Size: {1}' Delta Size: {2}"'                      fileInfos[0].Length' fileInfos[1].Length' fileInfos[2].Length);
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,CreateDeltaPackageIntegrationTest,The following statement contains a magic number: (fileInfos[2].Length - fileInfos[1].Length).ShouldBeLessThan(0);
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,WhenBasePackageIsNewerThanNewPackageThrowException,The following statement contains a magic number: var tempFiles = Enumerable.Range(0' 3)                  .Select(_ => Path.GetTempPath() + Guid.NewGuid().ToString() + ".nupkg")                  .ToArray();
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,WhenBasePackageIsNewerThanNewPackageThrowException,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() =>                  {                      var deltaBuilder = new DeltaPackageBuilder();                      deltaBuilder.CreateDeltaPackage(baseFixture' fixture' tempFiles[2]);                  });
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,WhenBasePackageDoesNotExistThrowException,The following statement contains a magic number: var tempFiles = Enumerable.Range(0' 3)                  .Select(_ => Path.GetTempPath() + Guid.NewGuid().ToString() + ".nupkg")                  .ToArray();
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,WhenBasePackageDoesNotExistThrowException,The following statement contains a magic number: Assert.Throws<FileNotFoundException>(() => {                      var deltaBuilder = new DeltaPackageBuilder();                      deltaBuilder.CreateDeltaPackage(baseFixture' fixture' tempFiles[2]);                  });
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,WhenNewPackageDoesNotExistThrowException,The following statement contains a magic number: var tempFiles = Enumerable.Range(0' 3)                  .Select(_ => Path.GetTempPath() + Guid.NewGuid().ToString() + ".nupkg")                  .ToArray();
Magic Number,Squirrel.Tests.Core,CreateDeltaPackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\DeltaPackageTests.cs,WhenNewPackageDoesNotExistThrowException,The following statement contains a magic number: Assert.Throws<FileNotFoundException>(() => {                      var deltaBuilder = new DeltaPackageBuilder();                      deltaBuilder.CreateDeltaPackage(baseFixture' fixture' tempFiles[2]);                  });
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,ParseStagingPercentageTest,The following statement contains a magic number: Assert.True(Math.Abs(fixture.StagingPercentage.Value - stagingPercentage.Value) < 0.001);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenReleasesAreOutOfOrderSortByVersion,The following statement contains a magic number: Assert.Equal(secondVersion' releases[2].Version);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenReleasesAreOutOfOrderSortByVersion,The following statement contains a magic number: Assert.Equal(false' releases[2].IsDelta);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenReleasesAreOutOfOrderSortByVersion,The following statement contains a magic number: Assert.Equal(thirdVersion' releases[3].Version);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenReleasesAreOutOfOrderSortByVersion,The following statement contains a magic number: Assert.Equal(true' releases[3].IsDelta);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenReleasesAreOutOfOrderSortByVersion,The following statement contains a magic number: Assert.Equal(thirdVersion' releases[4].Version);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenReleasesAreOutOfOrderSortByVersion,The following statement contains a magic number: Assert.Equal(false' releases[4].IsDelta);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenPreReleasesAreOutOfOrderSortByNumericSuffix,The following statement contains a magic number: Assert.Equal(secondVersion' releases[2].Version);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenPreReleasesAreOutOfOrderSortByNumericSuffix,The following statement contains a magic number: Assert.Equal(thirdVersion' releases[3].Version);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,WhenPreReleasesAreOutOfOrderSortByNumericSuffix,The following statement contains a magic number: Assert.Equal(fourthVersion' releases[4].Version);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,StagingUsersGetBetaSoftware,The following statement contains a magic number: var releaseEntries = new[] {                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.2.0-full.nupkg"' 0.1f))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.1.0-full.nupkg"))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.0.0-full.nupkg"))              };
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,StagingUsersGetBetaSoftware,The following statement contains a magic number: Assert.Equal(3' releases.Length);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,BorkedUsersGetProductionSoftware,The following statement contains a magic number: var releaseEntries = new[] {                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.2.0-full.nupkg"' 0.1f))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.1.0-full.nupkg"))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.0.0-full.nupkg"))              };
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,BorkedUsersGetProductionSoftware,The following statement contains a magic number: Assert.Equal(2' releases.Length);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,UnluckyUsersGetProductionSoftware,The following statement contains a magic number: var releaseEntries = new[] {                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.2.0-full.nupkg"' 0.1f))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.1.0-full.nupkg"))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.0.0-full.nupkg"))              };
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,UnluckyUsersGetProductionSoftware,The following statement contains a magic number: Assert.Equal(2' releases.Length);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,LuckyUsersGetBetaSoftware,The following statement contains a magic number: var releaseEntries = new[] {                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.2.0-full.nupkg"' 0.25f))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.1.0-full.nupkg"))'                  ReleaseEntry.ParseReleaseEntry(MockReleaseEntry("Espera-1.0.0-full.nupkg"))              };
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,LuckyUsersGetBetaSoftware,The following statement contains a magic number: Assert.Equal(3' releases.Length);
Magic Number,Squirrel.Tests.Core,ReleaseEntryTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleaseEntryTests.cs,MockReleaseEntry,The following statement contains a magic number: var ret = String.Format("94689fede03fed7ab59c24337673a27837f0c3ec  {0}  1004502 # {1:F0}%"' name' percentage * 100.0f);
Magic Number,Squirrel.Tests.Core,CreateReleasePackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleasePackageTests.cs,FindPackageInOurLocalPackageList,The following statement contains a magic number: result.Version.Version.Major.ShouldEqual(2);
Magic Number,Squirrel.Tests.Core,CreateReleasePackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleasePackageTests.cs,UsesTheRightVersionOfADependencyWhenMultipleAreInPackages,The following statement contains a magic number: Assert.Equal(5' assemblyName.Version.Minor);
Magic Number,Squirrel.Tests.Core,CreateReleasePackageTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\ReleasePackageTests.cs,ContentFilesAreIncludedInCreatedPackage,The following statement contains a magic number: Assert.Equal(2' contentFiles.Count());
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,CanDeleteDeepRecursiveDirectoryStructure,The following statement contains a magic number: i < 50
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,WeCanFetchAllProcesses,The following statement contains a magic number: Assert.True(result.Count != 2048);
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,CreateSampleDirectory,The following statement contains a magic number: file.Length > 260
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,CreateSampleDirectory,The following statement contains a magic number: j < 100
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,CreateSampleDirectory,The following statement contains a magic number: childDirectory.Length > 248
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,CreateSampleDirectory,The following statement contains a magic number: prng.NextDouble() > 0.5
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,newId,The following statement contains a magic number: return hashString.Substring(0' 7);
Magic Number,Squirrel.Tests.Core,UtilityTests,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\UtilityTests.cs,newId,The following statement contains a magic number: hashString.Length > 7
Magic Number,Squirrel.Tests.TestHelpers,IntegrationTestHelper,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\IntegrationTestHelper.cs,SkipTestOnXPAndVista,The following statement contains a magic number: int osVersion = Environment.OSVersion.Version.Major*100 + Environment.OSVersion.Version.Minor;
Magic Number,Squirrel.Tests.TestHelpers,IntegrationTestHelper,D:\research\architectureSmells\repos1\Squirrel_Squirrel.Windows\test\TestHelpers\IntegrationTestHelper.cs,SkipTestOnXPAndVista,The following statement contains a magic number: return (osVersion < 601);
