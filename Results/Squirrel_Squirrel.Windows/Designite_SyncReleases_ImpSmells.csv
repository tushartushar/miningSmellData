Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Options,Option,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Parameter List,Mono.Options,ActionOption,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' description' count' action' hidden
Long Statement,SyncReleases,Program,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Program.cs,main,The length of the statement  "                    { "u=|url="' "When pointing to GitHub' use the URL to the repository root page' else point to an existing remote Releases folder"' v => repoUrl = v}' " is 149.
Long Statement,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,downloadReleasesIndex,The length of the statement  "            var userAgent = new System.Net.Http.Headers.ProductInfoHeaderValue("Squirrel"' Assembly.GetExecutingAssembly().GetName().Version.ToString()); " is 141.
Complex Conditional,Mono.Options,Option,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);}' hidden);
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  				string[] names = s.GetNames ();  				if (names == null || names.Length == 0)  					continue;    				int written = 0;    				Write (o' ref written' "  ");  				Write (o' ref written' names [0]);  				for (int i = 1; i < names.Length; ++i) {  					Write (o' ref written' "' ");  					Write (o' ref written' names [i]);  				}    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' s.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,SyncRemoteReleases,The following statement contains a magic number: var releasesIndex = await retryAsync(3' () => downloadReleasesIndex(releasesUri));
Magic Number,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,SyncRemoteReleases,The following statement contains a magic number: foreach (var releaseToDownload in releasesToDownload) {                  await retryAsync(3' () => downloadRelease(releaseToDownload.LocalPath' releaseToDownload.RemoteUrl));              }
Magic Number,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,SyncFromGitHub,The following statement contains a magic number: var releases = (await client.Release.GetAll(nwo.Item1' nwo.Item2))                  .OrderByDescending(x => x.PublishedAt)                  .Take(5);
Magic Number,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,SyncFromGitHub,The following statement contains a magic number: await releases.ForEachAsync(async release => {                  // NB: Why do I have to double-fetch the release assets? It's already in GetAll                  var assets = await client.Release.GetAllAssets(nwo.Item1' nwo.Item2' release.Id);                    await assets                      .Where(x => x.Name.EndsWith(".nupkg"' StringComparison.OrdinalIgnoreCase))                      .Where(x => {                          var fi = new FileInfo(Path.Combine(releaseDirectoryInfo.FullName' x.Name));                          return !(fi.Exists && fi.Length == x.Size);                      })                      .ForEachAsync(async x => {                          var target = new FileInfo(Path.Combine(releaseDirectoryInfo.FullName' x.Name));                          if (target.Exists) target.Delete();                            await retryAsync(3' async () => {                              var hc = new HttpClient();                              var rq = new HttpRequestMessage(HttpMethod.Get' x.Url);                              rq.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/octet-stream"));                              rq.Headers.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue(userAgent.Name' userAgent.Version));                              if (token != null) {                                  rq.Headers.Add("Authorization"' "Bearer " + token);                              }                                var resp = await hc.SendAsync(rq);                              resp.EnsureSuccessStatusCode();                                using (var from = await resp.Content.ReadAsStreamAsync())                              using (var to = File.OpenWrite(target.FullName)) {                                  await from.CopyToAsync(to);                              }                          });                      });              });
Magic Number,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,nwoFromRepoUrl,The following statement contains a magic number: if (segments.Count() != 3) {                  throw new Exception("Repo URL must be to the root URL of the repo e.g. https://github.com/myuser/myrepo");              }
Magic Number,SyncReleases,SyncImplementations,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\SyncImplementations.cs,nwoFromRepoUrl,The following statement contains a magic number: return Tuple.Create(segments[1]' segments[2]);
Missing Default,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\SyncReleases\Mono.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
