Implementation smell,Namespace,Class,File,Method,Description
Long Method,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The method has 118 lines of code.
Long Method,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,The method has 100 lines of code.
Complex Method,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,Cyclomatic complexity of the method is 14
Complex Method,Mono.Options,Option,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,The method has 11 parameters. Parameters: package' targetDir' packagesDir' bootstrapperExe' backgroundGif' signingOpts' baseUrl' setupIcon' generateMsi' frameworkVersion' generateDeltas
Long Parameter List,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Parameter List,Mono.Options,ActionOption,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' description' count' action' hidden
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "install="' "Install the app whose package is in the specified directory"' v => { updateAction = UpdateAction.Install; target = v; } }' " is 137.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "download="' "Download the releases specified by the URL and write new results to stdout as JSON"' v => { updateAction = UpdateAction.Download; target = v; } }' " is 162.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "checkForUpdate="' "Check for one available update and writes new results to stdout as JSON"' v => { updateAction = UpdateAction.CheckForUpdate; target = v; } }' " is 163.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "update="' "Update the application to the latest remote version specified by URL"' v => { updateAction = UpdateAction.Update; target = v; } }' " is 144.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "releasify="' "Update or generate a releases directory with a given NuGet package"' v => { updateAction = UpdateAction.Releasify; target = v; } }' " is 148.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "createShortcut="' "Create a shortcut for the given executable name"' v => { updateAction = UpdateAction.Shortcut; target = v; } }' " is 133.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "removeShortcut="' "Remove a shortcut for the given executable name"' v => { updateAction = UpdateAction.Deshortcut; target = v; } }' " is 135.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "updateSelf="' "Copy the currently executing Update.exe into the default location"' v => { updateAction =  UpdateAction.UpdateSelf; target = v; } }' " is 150.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "processStart="' "Start an executable in the latest version of the app package"' v => { updateAction =  UpdateAction.ProcessStart; processStart = v; }' true}' " is 160.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "processStartAndWait="' "Start an executable in the latest version of the app package"' v => { updateAction =  UpdateAction.ProcessStart; processStart = v; shouldWait = true; }' true}' " is 186.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    { "l=|shortcut-locations="' "Comma-separated string of shortcut locations' e.g. 'Desktop'StartMenu'"' v => shortcutArgs = v}' " is 125.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The length of the statement  "                    Releasify(target' releaseDir' packagesDir' bootstrapperExe' backgroundGif' signingParameters' baseUrl' setupIcon' !noMsi' frameworkVersion' !noDelta); " is 150.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Update,The length of the statement  "                    var updateInfo = await mgr.CheckForUpdate(ignoreDeltaUpdates: ignoreDeltaUpdates' progress: x => Console.WriteLine(x / 3)); " is 123.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,The length of the statement  "                    throw new Exception(string.Format("Invalid --baseUrl '{0}'. A base URL must start with http or https and be a valid URI."' baseUrl)); " is 133.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,The length of the statement  "                rp.CreateReleasePackage(Path.Combine(di.FullName' rp.SuggestedReleaseFileName)' packagesDir' contentsPostProcessHook: pkgPath => { " is 130.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,The length of the statement  "            var zipPath = createSetupEmbeddedZip(Path.Combine(di.FullName' newestFullRelease.Filename)' di.FullName' backgroundGif' signingOpts).Result; " is 140.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Releasify,The length of the statement  "                var arguments = String.Format("\"{0}\" \"{1}\" \"--set-required-framework\" \"{2}\""' targetSetupExe' zipPath' frameworkVersion); " is 129.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,ProcessStart,The length of the statement  "                    Utility.AppDirForVersion(appDir' new SemanticVersion(x.Version.Version.Major' x.Version.Version.Minor' x.Version.Version.Build' "")) " is 132.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,ProcessStart,The length of the statement  "                Process.Start(new ProcessStartInfo(targetExe.FullName' arguments ?? "") { WorkingDirectory = Path.GetDirectoryName(targetExe.FullName) }); " is 138.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,setPEVersionInfoAndIcon,The length of the statement  "            var args = verStrings.Aggregate(new StringBuilder("\"" + realExePath + "\"")' (acc' x) => { acc.AppendFormat(" --set-version-string \"{0}\" \"{1}\""' x.Key' x.Value); return acc; }); " is 182.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,createMsiPackage,The length of the statement  "                templateData[String.Format("IdAsGuid{0}"' i)] = Utility.CreateGuidFromHash(String.Format("{0}:{1}"' package.Id' i)).ToString(); " is 127.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,createMsiPackage,The length of the statement  "            var candleParams = String.Format("-nologo -ext WixNetFxExtension -out \"{0}\" \"{1}\""' wxsTarget.Replace(".wxs"' ".wixobj")' wxsTarget); " is 137.
Long Statement,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,createMsiPackage,The length of the statement  "            var lightParams = String.Format("-ext WixNetFxExtension -sval -out \"{0}\" \"{1}\""' wxsTarget.Replace(".wxs"' ".msi")' wxsTarget.Replace(".wxs"' ".wixobj")); " is 158.
Complex Conditional,Mono.Options,Option,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&  					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Install,The following statement contains a magic number: using (var mgr = new UpdateManager(sourceDirectory' ourAppName)) {                  this.Log().Info("About to install to: " + mgr.RootAppDirectory);                  if (Directory.Exists(mgr.RootAppDirectory)) {                      this.Log().Warn("Install path {0} already exists' burning it to the ground"' mgr.RootAppDirectory);                        mgr.KillAllExecutablesBelongingToPackage();                      await Task.Delay(500);                        await this.ErrorIfThrows(() => Utility.DeleteDirectory(mgr.RootAppDirectory)'                          "Failed to remove existing directory on full install' is the app still running???");                        this.ErrorIfThrows(() => Utility.Retry(() => Directory.CreateDirectory(mgr.RootAppDirectory)' 3)'                          "Couldn't recreate app directory' perhaps Antivirus is blocking it");                  }                     Directory.CreateDirectory(mgr.RootAppDirectory);                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                  this.ErrorIfThrows(() => File.Copy(Assembly.GetExecutingAssembly().Location' updateTarget' true)'                      "Failed to copy Update.exe to " + updateTarget);                    await mgr.FullInstall(silentInstall' progressSource.Raise);                    await this.ErrorIfThrows(() => mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Install,The following statement contains a magic number: using (var mgr = new UpdateManager(sourceDirectory' ourAppName)) {                  this.Log().Info("About to install to: " + mgr.RootAppDirectory);                  if (Directory.Exists(mgr.RootAppDirectory)) {                      this.Log().Warn("Install path {0} already exists' burning it to the ground"' mgr.RootAppDirectory);                        mgr.KillAllExecutablesBelongingToPackage();                      await Task.Delay(500);                        await this.ErrorIfThrows(() => Utility.DeleteDirectory(mgr.RootAppDirectory)'                          "Failed to remove existing directory on full install' is the app still running???");                        this.ErrorIfThrows(() => Utility.Retry(() => Directory.CreateDirectory(mgr.RootAppDirectory)' 3)'                          "Couldn't recreate app directory' perhaps Antivirus is blocking it");                  }                     Directory.CreateDirectory(mgr.RootAppDirectory);                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                  this.ErrorIfThrows(() => File.Copy(Assembly.GetExecutingAssembly().Location' updateTarget' true)'                      "Failed to copy Update.exe to " + updateTarget);                    await mgr.FullInstall(silentInstall' progressSource.Raise);                    await this.ErrorIfThrows(() => mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Update,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  bool ignoreDeltaUpdates = false;                  this.Log().Info("About to update to: " + mgr.RootAppDirectory);                retry:                  try {                      var updateInfo = await mgr.CheckForUpdate(ignoreDeltaUpdates: ignoreDeltaUpdates' progress: x => Console.WriteLine(x / 3));                      await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                      await mgr.ApplyReleases(updateInfo' x => Console.WriteLine(66 + x / 3));                  } catch (Exception ex) {                      if (ignoreDeltaUpdates) {                          this.Log().ErrorException("Really couldn't apply updates!"' ex);                          throw;                      }                        this.Log().WarnException("Failed to apply updates' falling back to full updates"' ex);                      ignoreDeltaUpdates = true;                      goto retry;                  }                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                    await this.ErrorIfThrows(() =>                      mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Update,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  bool ignoreDeltaUpdates = false;                  this.Log().Info("About to update to: " + mgr.RootAppDirectory);                retry:                  try {                      var updateInfo = await mgr.CheckForUpdate(ignoreDeltaUpdates: ignoreDeltaUpdates' progress: x => Console.WriteLine(x / 3));                      await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                      await mgr.ApplyReleases(updateInfo' x => Console.WriteLine(66 + x / 3));                  } catch (Exception ex) {                      if (ignoreDeltaUpdates) {                          this.Log().ErrorException("Really couldn't apply updates!"' ex);                          throw;                      }                        this.Log().WarnException("Failed to apply updates' falling back to full updates"' ex);                      ignoreDeltaUpdates = true;                      goto retry;                  }                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                    await this.ErrorIfThrows(() =>                      mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Update,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  bool ignoreDeltaUpdates = false;                  this.Log().Info("About to update to: " + mgr.RootAppDirectory);                retry:                  try {                      var updateInfo = await mgr.CheckForUpdate(ignoreDeltaUpdates: ignoreDeltaUpdates' progress: x => Console.WriteLine(x / 3));                      await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                      await mgr.ApplyReleases(updateInfo' x => Console.WriteLine(66 + x / 3));                  } catch (Exception ex) {                      if (ignoreDeltaUpdates) {                          this.Log().ErrorException("Really couldn't apply updates!"' ex);                          throw;                      }                        this.Log().WarnException("Failed to apply updates' falling back to full updates"' ex);                      ignoreDeltaUpdates = true;                      goto retry;                  }                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                    await this.ErrorIfThrows(() =>                      mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Update,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  bool ignoreDeltaUpdates = false;                  this.Log().Info("About to update to: " + mgr.RootAppDirectory);                retry:                  try {                      var updateInfo = await mgr.CheckForUpdate(ignoreDeltaUpdates: ignoreDeltaUpdates' progress: x => Console.WriteLine(x / 3));                      await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                      await mgr.ApplyReleases(updateInfo' x => Console.WriteLine(66 + x / 3));                  } catch (Exception ex) {                      if (ignoreDeltaUpdates) {                          this.Log().ErrorException("Really couldn't apply updates!"' ex);                          throw;                      }                        this.Log().WarnException("Failed to apply updates' falling back to full updates"' ex);                      ignoreDeltaUpdates = true;                      goto retry;                  }                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                    await this.ErrorIfThrows(() =>                      mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Update,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  bool ignoreDeltaUpdates = false;                  this.Log().Info("About to update to: " + mgr.RootAppDirectory);                retry:                  try {                      var updateInfo = await mgr.CheckForUpdate(ignoreDeltaUpdates: ignoreDeltaUpdates' progress: x => Console.WriteLine(x / 3));                      await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                      await mgr.ApplyReleases(updateInfo' x => Console.WriteLine(66 + x / 3));                  } catch (Exception ex) {                      if (ignoreDeltaUpdates) {                          this.Log().ErrorException("Really couldn't apply updates!"' ex);                          throw;                      }                        this.Log().WarnException("Failed to apply updates' falling back to full updates"' ex);                      ignoreDeltaUpdates = true;                      goto retry;                  }                    var updateTarget = Path.Combine(mgr.RootAppDirectory' "Update.exe");                    await this.ErrorIfThrows(() =>                      mgr.CreateUninstallerRegistryEntry()'                      "Failed to create uninstaller registry entry");              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Download,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  var updateInfo = await mgr.CheckForUpdate(progress: x => Console.WriteLine(x / 3));                  await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                    var releaseNotes = updateInfo.FetchReleaseNotes();                    var sanitizedUpdateInfo = new {                      currentVersion = updateInfo.CurrentlyInstalledVersion.Version.ToString()'                      futureVersion = updateInfo.FutureReleaseEntry.Version.ToString()'                      releasesToApply = updateInfo.ReleasesToApply.Select(x => new {                          version = x.Version.ToString()'                          releaseNotes = releaseNotes.ContainsKey(x) ? releaseNotes[x] : ""'                      }).ToArray()'                  };                    return SimpleJson.SerializeObject(sanitizedUpdateInfo);              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Download,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  var updateInfo = await mgr.CheckForUpdate(progress: x => Console.WriteLine(x / 3));                  await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                    var releaseNotes = updateInfo.FetchReleaseNotes();                    var sanitizedUpdateInfo = new {                      currentVersion = updateInfo.CurrentlyInstalledVersion.Version.ToString()'                      futureVersion = updateInfo.FutureReleaseEntry.Version.ToString()'                      releasesToApply = updateInfo.ReleasesToApply.Select(x => new {                          version = x.Version.ToString()'                          releaseNotes = releaseNotes.ContainsKey(x) ? releaseNotes[x] : ""'                      }).ToArray()'                  };                    return SimpleJson.SerializeObject(sanitizedUpdateInfo);              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,Download,The following statement contains a magic number: using (var mgr = new UpdateManager(updateUrl' appName)) {                  var updateInfo = await mgr.CheckForUpdate(progress: x => Console.WriteLine(x / 3));                  await mgr.DownloadReleases(updateInfo.ReleasesToApply' x => Console.WriteLine(33 + x / 3));                    var releaseNotes = updateInfo.FetchReleaseNotes();                    var sanitizedUpdateInfo = new {                      currentVersion = updateInfo.CurrentlyInstalledVersion.Version.ToString()'                      futureVersion = updateInfo.FutureReleaseEntry.Version.ToString()'                      releasesToApply = updateInfo.ReleasesToApply.Select(x => new {                          version = x.Version.ToString()'                          releaseNotes = releaseNotes.ContainsKey(x) ? releaseNotes[x] : ""'                      }).ToArray()'                  };                    return SimpleJson.SerializeObject(sanitizedUpdateInfo);              }
Magic Number,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,createMsiPackage,The following statement contains a magic number: for (int i=1; i <= 10; i++) {                  templateData[String.Format("IdAsGuid{0}"' i)] = Utility.CreateGuidFromHash(String.Format("{0}:{1}"' package.Id' i)).ToString();              }
Magic Number,Squirrel.Update,SetupLogLogger,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,SetupLogLogger,The following statement contains a magic number: for (int i=0; i < 10; i++) {                  try {                      var dir = saveInTemp ?                          Path.GetTempPath() :                          Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);                        var file = Path.Combine(dir' String.Format("SquirrelSetup.{0}.log"' i).Replace(".0.log"' ".log"));                      var str = File.Open(file' FileMode.Append' FileAccess.Write' FileShare.ReadWrite);                      inner = new StreamWriter(str' Encoding.UTF8' 4096' false);                      return;                  } catch (Exception ex) {                      // Didn't work? Keep going                      Console.Error.WriteLine("Couldn't open log file' trying new file: " + ex.ToString());                  }              }
Magic Number,Squirrel.Update,SetupLogLogger,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,SetupLogLogger,The following statement contains a magic number: for (int i=0; i < 10; i++) {                  try {                      var dir = saveInTemp ?                          Path.GetTempPath() :                          Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);                        var file = Path.Combine(dir' String.Format("SquirrelSetup.{0}.log"' i).Replace(".0.log"' ".log"));                      var str = File.Open(file' FileMode.Append' FileAccess.Write' FileShare.ReadWrite);                      inner = new StreamWriter(str' Encoding.UTF8' 4096' false);                      return;                  } catch (Exception ex) {                      // Didn't work? Keep going                      Console.Error.WriteLine("Couldn't open log file' trying new file: " + ex.ToString());                  }              }
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'  					delegate (OptionValueCollection v) {action (v [0]' v [1]);}' hidden);
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  				string[] names = s.GetNames ();  				if (names == null || names.Length == 0)  					continue;    				int written = 0;    				Write (o' ref written' "  ");  				Write (o' ref written' names [0]);  				for (int i = 1; i < names.Length; ++i) {  					Write (o' ref written' "' ");  					Write (o' ref written' names [i]);  				}    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' s.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Missing Default,Squirrel.Update,Program,C:\repos\Squirrel_Squirrel.Windows\src\Update\Program.cs,executeCommandLine,The following switch statement is missing a default case: switch (updateAction) {  #if !MONO                  case UpdateAction.Install:                      var progressSource = new ProgressSource();                      if (!silentInstall) {                           AnimatedGifWindow.ShowWindow(TimeSpan.FromSeconds(4)' animatedGifWindowToken.Token' progressSource);                      }                        Install(silentInstall' progressSource' Path.GetFullPath(target)).Wait();                      animatedGifWindowToken.Cancel();                      break;                  case UpdateAction.Uninstall:                      Uninstall().Wait();                      break;                  case UpdateAction.Download:                      Console.WriteLine(Download(target).Result);                      break;                  case UpdateAction.Update:                      Update(target).Wait();                      break;                  case UpdateAction.CheckForUpdate:                      Console.WriteLine(CheckForUpdate(target).Result);                      break;                  case UpdateAction.UpdateSelf:                      UpdateSelf().Wait();                      break;                  case UpdateAction.Shortcut:                      Shortcut(target' shortcutArgs' processStartArgs' setupIcon);                      break;                  case UpdateAction.Deshortcut:                      Deshortcut(target' shortcutArgs);                      break;                  case UpdateAction.ProcessStart:                      ProcessStart(processStart' processStartArgs' shouldWait);                      break;  #endif                  case UpdateAction.Releasify:                      Releasify(target' releaseDir' packagesDir' bootstrapperExe' backgroundGif' signingParameters' baseUrl' setupIcon' !noMsi' frameworkVersion' !noDelta);                      break;                  }
Missing Default,Mono.Options,OptionSet,C:\repos\Squirrel_Squirrel.Windows\src\Update\Mono.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:  						ParseValue (v' c);  						break;  				}
