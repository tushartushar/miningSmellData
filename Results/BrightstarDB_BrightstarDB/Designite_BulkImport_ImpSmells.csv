Implementation smell,Namespace,Class,File,Method,Description
Long Method,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,LexFileArguments,The method has 105 lines of code.
Complex Method,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,Parser,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,GetUsageString,Cyclomatic complexity of the method is 9
Long Parameter List,BulkImport,BulkImport,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\BulkImport.cs,RunImportJob,The method has 5 parameters. Parameters: client' storeName' fileName' logProgress' finalMessage
Long Identifier,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,GetUsageString,The length of the parameter minimumNumberOfCharsForHelpText is 31.
Complex Conditional,CommandLine,Argument,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,ParseValue,The conditional expression  "(stringData != null || type == typeof(bool)) && (stringData == null || stringData.Length > 0)"  is complex.
Complex Conditional,CommandLine,Argument,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,AppendValue,The conditional expression  "value is string || value is int || value is uint || value.GetType().IsEnum"  is complex.
Empty Catch Block,CommandLine,Argument,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,ParseValue,The method has an empty catch block.
Magic Number,BulkImport,BulkImport,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\BulkImport.cs,RunImportJob,The following statement contains a magic number: while(!(importJobInfo.JobCompletedOk || importJobInfo.JobCompletedWithErrors))              {                  Thread.Sleep(1000);                  importJobInfo = client.GetJobInfo(storeName' importJobInfo.JobId);                  if (logProgress && !String.IsNullOrEmpty(importJobInfo.StatusMessage) &&                      !importJobInfo.StatusMessage.Equals(lastMessage))                  {                      ClearCurrentConsoleLine();                      Console.WriteLine(importJobInfo.StatusMessage);                      Console.SetCursorPosition(0' Console.CursorTop - 1);                      lastMessage = importJobInfo.StatusMessage;                  }              }
Magic Number,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,ArgumentsUsage,The following statement contains a magic number: if (screenWidth == 0)  				screenWidth = 80;
Magic Number,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: if (args != null)  			{  				foreach (string argument in args)  				{  					if (argument.Length > 0)  					{  						switch (argument[0])  						{  							case '-':  							case '/':  								int endIndex = argument.IndexOfAny(new char[] {':'' '+'' '-'}' 1);  								string option = argument.Substring(1' endIndex == -1 ? argument.Length - 1 : endIndex - 1);  								string optionArgument;  								if (option.Length + 1 == argument.Length)  								{  									optionArgument = null;  								}  								else if (argument.Length > 1 + option.Length && argument[1 + option.Length] == ':')  								{  									optionArgument = argument.Substring(option.Length + 2);  								}  								else  								{  									optionArgument = argument.Substring(option.Length + 1);  								}                                    								Argument arg = (Argument) this.argumentMap[option];  								if (arg == null)  								{  									ReportUnrecognizedArgument(argument);  									hadError = true;  								}  								else  								{  									hadError |= !arg.SetValue(optionArgument' destination);  								}  								break;  							case '@':  								string[] nestedArguments;  								hadError |= LexFileArguments(argument.Substring(1)' out nestedArguments);  								hadError |= ParseArgumentList(nestedArguments' destination);  								break;  							default:  								if (this.defaultArgument != null)  								{  									hadError |= !this.defaultArgument.SetValue(argument' destination);  								}  								else  								{  									ReportUnrecognizedArgument(argument);  									hadError = true;  								}  								break;  						}  					}  				}  			}
Magic Number,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,GetUsageString,The following statement contains a magic number: const int minimumNumberOfCharsForHelpText = 10;
Magic Number,CommandLine,Parser,C:\repos\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\BulkImport\CommandLineArguments.cs,GetUsageString,The following statement contains a magic number: const int minimumHelpTextColumn = 5;
