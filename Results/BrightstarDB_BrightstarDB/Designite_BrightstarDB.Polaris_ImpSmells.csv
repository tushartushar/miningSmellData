Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,Cyclomatic complexity of the method is 15
Complex Method,BrightstarDB.Polaris.ViewModel,SparqlQueryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\SparqlQueryViewModel.cs,RunSparqlQuery,Cyclomatic complexity of the method is 9
Long Parameter List,BrightstarDB.Polaris.Messages,ShowDialogMessage,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Messages\ShowDialogMessage.cs,ShowDialogMessage,The method has 5 parameters. Parameters: title' content' icon' button' callback
Long Parameter List,BrightstarDB.Polaris.ViewModel,Connection,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Connection.cs,GetCommitPoints,The method has 5 parameters. Parameters: store' latest' earliest' skip' take
Long Statement,BrightstarDB.Polaris,App,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\App.xaml.cs,OnAppDomainUnhandledException,The length of the statement  "                PolarisTraceSource.TraceEvent(TraceEventType.Critical' 0' "Unhandled application domain exception. {0}"' e.ExceptionObject); " is 124.
Long Statement,BrightstarDB.Polaris,MainWindow,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\MainWindow.xaml.cs,HandleShowWindowMessage,The length of the statement  "                                    model.UpdateConnectionConfiguration(oldName' connectionModel.Name' connectionModel.ConnectionString' connectionModel.RequiresAuthentication); " is 141.
Long Statement,BrightstarDB.Polaris.ViewModel,ExportViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\ExportViewModel.cs,CheckJobStatus,The length of the statement  "                _dispatcher.BeginInvoke(DispatcherPriority.SystemIdle' new TransactionViewModel.JobMonitorDelegate(this.CheckJobStatus)); " is 121.
Long Statement,BrightstarDB.Polaris.ViewModel,ImportViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\ImportViewModel.cs,CheckJobStatus,The length of the statement  "                    "Error retrieving job status information from server. This may indicate a networking problem or that the server has stopped running."; " is 134.
Long Statement,BrightstarDB.Polaris.ViewModel,Connection,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Connection.cs,MakeConnectionString,The length of the statement  "            throw new NotSupportedException(String.Format("Cannot generate connection string for connection type {0}"' ConnectionType)); " is 124.
Long Statement,BrightstarDB.Polaris.ViewModel,Connection,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Connection.cs,ParseConnectionString,The length of the statement  "                    throw new NotSupportedException(String.Format("Cannot parse connection string containing obsolete connection type property '{0}'"' _connectionString.Type)); " is 156.
Long Statement,BrightstarDB.Polaris.ViewModel,Connection,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Connection.cs,WithClient,The length of the statement  "                    MessengerInstance.Send(new AuthenticationRequiredMessage("This operation requires your username and password."' (dialogResult' username' password) => " is 149.
Long Statement,BrightstarDB.Polaris.ViewModel,Connection,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Connection.cs,WithClient,The length of the statement  "                    MessengerInstance.Send(new AuthenticationRequiredMessage("This operation requires your username and password."' (dialogResult' username' password) => " is 149.
Long Statement,BrightstarDB.Polaris.ViewModel,MainViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\MainViewModel.cs,ServerCreateStore,The length of the statement  "            var msg = new ShowWindowMessage {Name = "CreateStore"' ViewModel = serverConnection' Continuation = ContinueCreateStore}; " is 121.
Long Statement,BrightstarDB.Polaris.ViewModel,SparqlQueryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\SparqlQueryViewModel.cs,SaveQuery,The length of the statement  "                                                             "We recommend saving your SPARQL Queries to a 'SPARQL Queries' folder inside your 'My Documents' folder. Such a folder does not exist at the moment. Do you want to create one now ?"' " is 182.
Long Statement,BrightstarDB.Polaris.ViewModel,Store,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Store.cs,Validate,The length of the statement  "                ValidationMessages.Add("The store name may not contain any of the following characters: " + String.Join(""'InvalidStoreNameChars)); " is 131.
Long Statement,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,MoreCommitPoints,The length of the statement  "                    // We didn't add any new commit points. This indicates that a lot of new commit points have been added to the store recently so we should do a full update " is 154.
Long Statement,BrightstarDB.Polaris.ViewModel,TransactionViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\TransactionViewModel.cs,GetExpandedTriples,The length of the statement  "            return _prefixes.Aggregate(patterns' (current' prefix) => current.Replace("<" + prefix.Prefix + ":"' "<" + prefix.Uri)); " is 120.
Long Statement,BrightstarDB.Polaris.Views,CredentialsDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\CredentialsDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Polaris;component/views/credentialsdialog.xaml"' System.UriKind.Relative); " is 120.
Long Statement,BrightstarDB.Polaris.Views,StorePropertiesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\StorePropertiesDialog.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Polaris;component/views/storepropertiesdialog.xaml"' System.UriKind.Relative); " is 124.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Empty Catch Block,BrightstarDB.Polaris.Configuration,PolarisConfigurationModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Configuration\PolarisConfigurationModel.cs,ImportLegacyConfiguration,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Polaris.Converters,SparqlColumnSelector,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Converters\SparqlColumnSelector.cs,Convert,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Polaris,App,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\App.xaml.cs,OnAppDomainUnhandledException,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Polaris,App,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\App.xaml.cs,OnDispatcherUnhandledException,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Polaris.ViewModel,MainViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\MainViewModel.cs,MainViewModel,The method has an empty catch block.
Magic Number,BrightstarDB.Polaris.Controls,DateTimePicker,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,HandleTextBoxPreviewKeyDown,The following statement contains a magic number: if (b >= 34 && b <= 43)                  _blockManager.ChangeValue(b - 34);
Magic Number,BrightstarDB.Polaris.Controls,DateTimePicker,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,HandleTextBoxPreviewKeyDown,The following statement contains a magic number: if (b >= 34 && b <= 43)                  _blockManager.ChangeValue(b - 34);
Magic Number,BrightstarDB.Polaris.Controls,DateTimePicker,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,HandleTextBoxPreviewKeyDown,The following statement contains a magic number: if (b >= 34 && b <= 43)                  _blockManager.ChangeValue(b - 34);
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,GetMaxLength,The following statement contains a magic number: switch (p)              {                  case "y":                  case "M":                  case "d":                  case "h":                  case "m":                  case "s":                  case "H":                      return 2;                  case "yyy":                      return 4;                  default:                      return p.Length;              }
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,GetMaxLength,The following statement contains a magic number: switch (p)              {                  case "y":                  case "M":                  case "d":                  case "h":                  case "m":                  case "s":                  case "H":                      return 2;                  case "yyy":                      return 4;                  default:                      return p.Length;              }
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (Pattern.Contains("y"))                  y = ((upDown) ? dateTime.Year + value : value);              else if (Pattern.Contains("M"))                  m = ((upDown) ? dateTime.Month + value : value);              else if (Pattern.Contains("d"))                  d = ((upDown) ? dateTime.Day + value : value);              else if (Pattern.Contains("h") || Pattern.Contains("H"))                  h = ((upDown) ? dateTime.Hour + value : value);              else if (Pattern.Contains("m"))                  n = ((upDown) ? dateTime.Minute + value : value);              else if (Pattern.Contains("s"))                  s = ((upDown) ? dateTime.Second + value : value);              else if (Pattern.Contains("t"))                  h = ((h < 12) ? (h + 12) : (h - 12));
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (Pattern.Contains("y"))                  y = ((upDown) ? dateTime.Year + value : value);              else if (Pattern.Contains("M"))                  m = ((upDown) ? dateTime.Month + value : value);              else if (Pattern.Contains("d"))                  d = ((upDown) ? dateTime.Day + value : value);              else if (Pattern.Contains("h") || Pattern.Contains("H"))                  h = ((upDown) ? dateTime.Hour + value : value);              else if (Pattern.Contains("m"))                  n = ((upDown) ? dateTime.Minute + value : value);              else if (Pattern.Contains("s"))                  s = ((upDown) ? dateTime.Second + value : value);              else if (Pattern.Contains("t"))                  h = ((h < 12) ? (h + 12) : (h - 12));
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (Pattern.Contains("y"))                  y = ((upDown) ? dateTime.Year + value : value);              else if (Pattern.Contains("M"))                  m = ((upDown) ? dateTime.Month + value : value);              else if (Pattern.Contains("d"))                  d = ((upDown) ? dateTime.Day + value : value);              else if (Pattern.Contains("h") || Pattern.Contains("H"))                  h = ((upDown) ? dateTime.Hour + value : value);              else if (Pattern.Contains("m"))                  n = ((upDown) ? dateTime.Minute + value : value);              else if (Pattern.Contains("s"))                  s = ((upDown) ? dateTime.Second + value : value);              else if (Pattern.Contains("t"))                  h = ((h < 12) ? (h + 12) : (h - 12));
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (y > 9999) y = 1;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (y < 1) y = 9999;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (m > 12) m = 1;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (m < 1) m = 12;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (h > 23) h = 0;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (h < 0) h = 23;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (n > 59) n = 0;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (n < 0) n = 59;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (s > 59) s = 0;
Magic Number,BrightstarDB.Polaris.Controls,Block,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Controls\DateTimePicker.cs,Change,The following statement contains a magic number: if (s < 0) s = 59;
Magic Number,BrightstarDB.Polaris,App,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\App.xaml.cs,OnStartup,The following statement contains a magic number: var logFileArg = e.Args.FirstOrDefault(x => x.Length > 5 && x.ToLowerInvariant().StartsWith("/log:"));
Magic Number,BrightstarDB.Polaris,App,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\App.xaml.cs,OnStartup,The following statement contains a magic number: if (logFileArg != null)              {                  var logFileName = logFileArg.Substring(5);                  var writer = new TextWriterTraceListener(logFileName)                                                       {TraceOutputOptions = TraceOptions.DateTime};                  Logging.BrightstarTraceSource.Listeners.Add(writer);                  PolarisTraceSource.Listeners.Add(writer);                  if (e.Args.Any(x => x.ToLowerInvariant().Equals("/verbose")))                  {                      Logging.BrightstarTraceSource.Switch.Level = SourceLevels.Verbose;                      PolarisTraceSource.Switch.Level = SourceLevels.Verbose;                  }              }
Magic Number,BrightstarDB.Polaris.ViewModel,ImportViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\ImportViewModel.cs,CheckJobStatus,The following statement contains a magic number: try              {                  var client = BrightstarService.GetClient(Store.Source.ConnectionString);                  var inProgress = QueuedJobs.Where(j => !j.Completed).ToList();                  if (inProgress.Any())                  {                      foreach (var job in inProgress)                      {                          job.RefreshStatus(client' Store.Location);                      }                      Thread.Sleep(1000);                      _dispatcher.BeginInvoke(DispatcherPriority.SystemIdle'                          new TransactionViewModel.JobMonitorDelegate(this.CheckJobStatus));                  }                  else                  {                      _monitorStarted = false;                  }              }               catch(Exception)              {                  ProgressText =                      "Error retrieving job status information from server. This may indicate a networking problem or that the server has stopped running.";              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,StoreHistoryViewModel,The following statement contains a magic number: CommitPoints = new ObservableCollection<CommitPointViewModel>(store.GetCommitPoints(0' 20));
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,StoreHistoryViewModel,The following statement contains a magic number: HasMoreCommitPoints = CommitPoints.Count == 20;
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,Refresh,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  var targetCount = Math.Max(100' CommitPoints.Count);                  CommitPoints.Clear();                  foreach (var commitPoint in Store.GetCommitPoints(0' targetCount))                  {                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = CommitPoints.Count == targetCount;              } else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  CommitPoints.Clear();                  foreach(var commitPoint in Store.GetCommitPoints(latest' earliest' 0' 100))                  {                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = CommitPoints.Count == 100;              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,Refresh,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  var targetCount = Math.Max(100' CommitPoints.Count);                  CommitPoints.Clear();                  foreach (var commitPoint in Store.GetCommitPoints(0' targetCount))                  {                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = CommitPoints.Count == targetCount;              } else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  CommitPoints.Clear();                  foreach(var commitPoint in Store.GetCommitPoints(latest' earliest' 0' 100))                  {                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = CommitPoints.Count == 100;              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,Refresh,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  var targetCount = Math.Max(100' CommitPoints.Count);                  CommitPoints.Clear();                  foreach (var commitPoint in Store.GetCommitPoints(0' targetCount))                  {                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = CommitPoints.Count == targetCount;              } else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  CommitPoints.Clear();                  foreach(var commitPoint in Store.GetCommitPoints(latest' earliest' 0' 100))                  {                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = CommitPoints.Count == 100;              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,MoreCommitPoints,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  foreach (var commitPoint in Store.GetCommitPoints(CommitPoints.Count' 100))                  {                      foundCount++;                      if (commitPoint.CommitTime < lastCommitPoint.CommitTime)                      {                          CommitPoints.Add(commitPoint);                      }                  }                  if (CommitPoints[CommitPoints.Count - 1].Id == lastCommitPoint.Id)                  {                      // We didn't add any new commit points. This indicates that a lot of new commit points have been added to the store recently so we should do a full update                      Refresh();                  }                  else                  {                      HasMoreCommitPoints = (foundCount == 100);                  }              }              else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  var initialCount = CommitPoints.Count;                  foreach (var commitPoint in Store.GetCommitPoints(latest' earliest' CommitPoints.Count' 100))                  {                      foundCount++;                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = (CommitPoints.Count - initialCount) == 100;              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,MoreCommitPoints,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  foreach (var commitPoint in Store.GetCommitPoints(CommitPoints.Count' 100))                  {                      foundCount++;                      if (commitPoint.CommitTime < lastCommitPoint.CommitTime)                      {                          CommitPoints.Add(commitPoint);                      }                  }                  if (CommitPoints[CommitPoints.Count - 1].Id == lastCommitPoint.Id)                  {                      // We didn't add any new commit points. This indicates that a lot of new commit points have been added to the store recently so we should do a full update                      Refresh();                  }                  else                  {                      HasMoreCommitPoints = (foundCount == 100);                  }              }              else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  var initialCount = CommitPoints.Count;                  foreach (var commitPoint in Store.GetCommitPoints(latest' earliest' CommitPoints.Count' 100))                  {                      foundCount++;                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = (CommitPoints.Count - initialCount) == 100;              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,MoreCommitPoints,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  foreach (var commitPoint in Store.GetCommitPoints(CommitPoints.Count' 100))                  {                      foundCount++;                      if (commitPoint.CommitTime < lastCommitPoint.CommitTime)                      {                          CommitPoints.Add(commitPoint);                      }                  }                  if (CommitPoints[CommitPoints.Count - 1].Id == lastCommitPoint.Id)                  {                      // We didn't add any new commit points. This indicates that a lot of new commit points have been added to the store recently so we should do a full update                      Refresh();                  }                  else                  {                      HasMoreCommitPoints = (foundCount == 100);                  }              }              else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  var initialCount = CommitPoints.Count;                  foreach (var commitPoint in Store.GetCommitPoints(latest' earliest' CommitPoints.Count' 100))                  {                      foundCount++;                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = (CommitPoints.Count - initialCount) == 100;              }
Magic Number,BrightstarDB.Polaris.ViewModel,StoreHistoryViewModel,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\StoreHistoryViewModel.cs,MoreCommitPoints,The following statement contains a magic number: if (DateTimeFilterFrom == null && DateTimeFilterTo == null)              {                  foreach (var commitPoint in Store.GetCommitPoints(CommitPoints.Count' 100))                  {                      foundCount++;                      if (commitPoint.CommitTime < lastCommitPoint.CommitTime)                      {                          CommitPoints.Add(commitPoint);                      }                  }                  if (CommitPoints[CommitPoints.Count - 1].Id == lastCommitPoint.Id)                  {                      // We didn't add any new commit points. This indicates that a lot of new commit points have been added to the store recently so we should do a full update                      Refresh();                  }                  else                  {                      HasMoreCommitPoints = (foundCount == 100);                  }              }              else              {                  DateTime latest' earliest;                  GetDateTimeFilter(out latest' out earliest);                  var initialCount = CommitPoints.Count;                  foreach (var commitPoint in Store.GetCommitPoints(latest' earliest' CommitPoints.Count' 100))                  {                      foundCount++;                      CommitPoints.Add(commitPoint);                  }                  HasMoreCommitPoints = (CommitPoints.Count - initialCount) == 100;              }
Magic Number,BrightstarDB.Polaris.Views,AboutDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\AboutDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.AcknowledgementsScroll = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 2:              this.AcknowledgementsText = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,BrightstarDB.Polaris.Views,CredentialsDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\CredentialsDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.UserNameBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:                            #line 34 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 35 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              }
Magic Number,BrightstarDB.Polaris.Views,CredentialsDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\CredentialsDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.UserNameBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:                            #line 34 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 35 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              }
Magic Number,BrightstarDB.Polaris.Views,CredentialsDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\CredentialsDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.UserNameBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:                            #line 34 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 35 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              }
Magic Number,BrightstarDB.Polaris.Views,PrefixesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\PrefixesDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 22 "..\..\..\..\Views\PrefixesDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkClick);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\..\Views\PrefixesDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              case 3:              this.PrefixesGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Magic Number,BrightstarDB.Polaris.Views,PrefixesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\PrefixesDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 22 "..\..\..\..\Views\PrefixesDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkClick);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\..\Views\PrefixesDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              case 3:              this.PrefixesGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Magic Number,BrightstarDB.Polaris.Views,StorePropertiesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\StorePropertiesDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.StoreNameTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.OKButton = ((System.Windows.Controls.Button)(target));                            #line 41 "..\..\..\..\Views\StorePropertiesDialog.xaml"              this.OKButton.Click += new System.Windows.RoutedEventHandler(this.OnOK);                            #line default              #line hidden              return;              case 3:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\..\..\Views\StorePropertiesDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.OnCancel);                            #line default              #line hidden              return;              }
Magic Number,BrightstarDB.Polaris.Views,StorePropertiesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\StorePropertiesDialog.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.StoreNameTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.OKButton = ((System.Windows.Controls.Button)(target));                            #line 41 "..\..\..\..\Views\StorePropertiesDialog.xaml"              this.OKButton.Click += new System.Windows.RoutedEventHandler(this.OnOK);                            #line default              #line hidden              return;              case 3:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\..\..\Views\StorePropertiesDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.OnCancel);                            #line default              #line hidden              return;              }
Missing Default,BrightstarDB.Polaris,MainWindow,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\MainWindow.xaml.cs,HandleShowWindowMessage,The following switch statement is missing a default case: switch (msg.Name)              {                  case "NewConnection":                      {                          var connectionModel = new Connection();                          var newConnectionDialog = new ConnectionPropertiesDialog {DataContext = connectionModel};                          var dlgResult = newConnectionDialog.ShowDialog();                          if (dlgResult.HasValue && dlgResult.Value)                          {                              var model = DataContext as MainViewModel;                              if (model != null)                              {                                  model.StoreSources.Add(connectionModel);                                  model.AddConnectionConfiguration(connectionModel.Name'                                                                   connectionModel.ConnectionString'                                                                   connectionModel.RequiresAuthentication);                              }                          }                          break;                      }                  case "EditConnection":                      {                          var connectionModel = msg.ViewModel as Connection;                          if (connectionModel != null)                          {                              var editModel = connectionModel.Clone();                              var dlg = new ConnectionPropertiesDialog {DataContext = editModel};                              var dlgResult = dlg.ShowDialog();                              if (dlgResult.HasValue && dlgResult.Value)                              {                                  var oldName = connectionModel.Name;                                  connectionModel.CopyFrom(editModel);                                  var mvm = DataContext as MainViewModel;                                  if (mvm != null)                                  {                                      mvm.ServerRefresh(connectionModel);                                  }                                  // Update configuration                                  var model = DataContext as MainViewModel;                                  if (model != null)                                  {                                      model.UpdateConnectionConfiguration(oldName' connectionModel.Name' connectionModel.ConnectionString' connectionModel.RequiresAuthentication);                                  }                              }                          }                          break;                      }                  case "PrefixesDialog":                      {                          var configuration = msg.ViewModel as PolarisConfigurationModel;                          if (configuration != null)                          {                              var oldPrefixes = new List<PrefixConfiguration>(configuration.Prefixes);                              var dlg = new PrefixesDialog { DataContext = configuration };                              var dlgResult = dlg.ShowDialog();                              if (dlgResult.HasValue && dlgResult.Value)                              {                                  configuration.Save();                              } else                              {                                  configuration.Prefixes = oldPrefixes;                              }                          }                          break;                      }                  case "CreateStore":                      {                          var connection = msg.ViewModel as Connection;                          if (connection != null)                          {                              var storeModel = new Store(connection' Guid.NewGuid().ToString());                              var storePropertiesDialog = new StorePropertiesDialog                                                              {DataContext = storeModel' Title = "New Store Properties"};                              var dlgResult = storePropertiesDialog.ShowDialog();                              if (dlgResult.HasValue && dlgResult.Value && msg.Continuation != null)                              {                                  msg.Continuation(storePropertiesDialog.DataContext);                              }                          }                          break;                      }                  case "AboutDialog":                      {                          var dlg = new AboutDialog {DataContext = msg.ViewModel};                          dlg.ShowDialog();                          break;                      }              }
Missing Default,BrightstarDB.Polaris.ViewModel,Connection,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\ViewModel\Connection.cs,Validate,The following switch statement is missing a default case: switch (ConnectionType)              {                  case ConnectionType.Embedded:                      if (String.IsNullOrEmpty(DirectoryPath))                      {                          ValidationMessages.Add("A value is required for the Stores Directory path.");                      }                      else if (!Directory.Exists(DirectoryPath))                      {                          ValidationMessages.Add(String.Format("Cannot find the directory {0}"' DirectoryPath));                      }                      break;                  case ConnectionType.Rest:                      if (String.IsNullOrEmpty(ServerEndpoint))                      {                          ValidationMessages.Add("A value is required for the Server Address.");                      }                      else                      {                          Uri parsedUri;                          if (!Uri.TryCreate(ServerEndpoint' UriKind.Absolute' out parsedUri))                          {                              ValidationMessages.Add("The Server Address must be a valid HTTP/HTTPS URL");                          }                          else                          {                              var scheme = parsedUri.Scheme.ToLowerInvariant();                              if (!(scheme.Equals("http") || scheme.Equals("https")))                              {                                  ValidationMessages.Add("The Server Address must be a valid HTTP/HTTPS URL");                              }                          }                      }                      break;              }
Missing Default,BrightstarDB.Polaris.Views,AboutDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\AboutDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.AcknowledgementsScroll = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 2:              this.AcknowledgementsText = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,BrightstarDB.Polaris.Views,ConnectionPropertiesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\ConnectionPropertiesDialog.xaml.cs,EnableFields,The following switch statement is missing a default case: switch (connection.ConnectionType)              {                  case ConnectionType.Embedded:                      DirectoryPathText.IsEnabled = true;                      DirectorySelectorButton.IsEnabled = true;                      ServerEndpointText.Text = string.Empty;                      ServerEndpointText.IsEnabled = false;                      RequiresAuthenticationCheck.IsChecked = false;                      RequiresAuthenticationCheck.IsEnabled = false;                      break;                  case ConnectionType.Rest:                      DirectoryPathText.Text = string.Empty;                      DirectoryPathText.IsEnabled = false;                      DirectorySelectorButton.IsEnabled = false;                      ServerEndpointText.Text = "http://localhost:8090/brightstar";                      ServerEndpointText.IsEnabled = true;                      RequiresAuthenticationCheck.IsEnabled = true;                      break;              }
Missing Default,BrightstarDB.Polaris.Views,CredentialsDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\CredentialsDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.UserNameBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));              return;              case 3:                            #line 34 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OKButton_Click);                            #line default              #line hidden              return;              case 4:                            #line 35 "..\..\..\..\Views\CredentialsDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelButton_Click);                            #line default              #line hidden              return;              }
Missing Default,BrightstarDB.Polaris.Views,PrefixesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\PrefixesDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 22 "..\..\..\..\Views\PrefixesDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OkClick);                            #line default              #line hidden              return;              case 2:                            #line 23 "..\..\..\..\Views\PrefixesDialog.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CancelClick);                            #line default              #line hidden              return;              case 3:              this.PrefixesGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Missing Default,BrightstarDB.Polaris.Views,StorePropertiesDialog,C:\repos\BrightstarDB_BrightstarDB\src\tools\Polaris\BrightstarDB.Polaris\Views\StorePropertiesDialog.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.StoreNameTextBox = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.OKButton = ((System.Windows.Controls.Button)(target));                            #line 41 "..\..\..\..\Views\StorePropertiesDialog.xaml"              this.OKButton.Click += new System.Windows.RoutedEventHandler(this.OnOK);                            #line default              #line hidden              return;              case 3:              this.CancelButton = ((System.Windows.Controls.Button)(target));                            #line 42 "..\..\..\..\Views\StorePropertiesDialog.xaml"              this.CancelButton.Click += new System.Windows.RoutedEventHandler(this.OnCancel);                            #line default              #line hidden              return;              }
