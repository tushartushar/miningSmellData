Implementation smell,Namespace,Class,File,Method,Description
Long Method,BrightstarDB.Client,DotNetRdfDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfDataObjectContext.cs,DotNetRdfDataObjectContext,The method has 100 lines of code.
Long Method,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,AddArc,The method has 102 lines of code.
Long Method,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,AddMappingsForType,The method has 113 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,VisitMemberExpression,The method has 161 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,HandleMethodCallExpression,The method has 212 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitQueryModel,The method has 105 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitResultOperator,The method has 137 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,VisitMemberExpression,The method has 126 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleBinaryExpression,The method has 144 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitMethodCallExpression,The method has 178 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitSubQueryExpression,The method has 136 lines of code.
Long Method,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,MakeSparqlConstant,The method has 102 lines of code.
Long Method,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The method has 157 lines of code.
Long Method,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,UnescapeLiteral,The method has 114 lines of code.
Long Method,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Delete,The method has 202 lines of code.
Long Method,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Insert,The method has 115 lines of code.
Complex Method,BrightstarDB.Caching,LruCacheEvictionPolicy,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Caching\LruCacheEvictionPolicy.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,Cyclomatic complexity of the method is 16
Complex Method,BrightstarDB.Client,EmbeddedDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedDataObjectStore.cs,DoSaveChanges,Cyclomatic complexity of the method is 12
Complex Method,BrightstarDB.Client,SparqlUpdatableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlUpdatableStore.cs,FormatDeletePatterns,Cyclomatic complexity of the method is 11
Complex Method,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,BindRowsToEntites,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,GetStringConverter,Cyclomatic complexity of the method is 18
Complex Method,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,AddArc,Cyclomatic complexity of the method is 10
Complex Method,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,GetRelatedProperty,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,SetRelatedObject,Cyclomatic complexity of the method is 14
Complex Method,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,Attach,Cyclomatic complexity of the method is 13
Complex Method,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,AddMappingsForType,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.EntityFramework.Query,ExpressionTreeVisitorBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\ExpressionTreeVisitorBase.cs,HandleAddressOrIdEquals,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,HandleMethodCallExpression,Cyclomatic complexity of the method is 41
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitQueryModel,Cyclomatic complexity of the method is 10
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitResultOperator,Cyclomatic complexity of the method is 28
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,VisitMemberBinding,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleBinaryExpression,Cyclomatic complexity of the method is 10
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleCompareExpression,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitMethodCallExpression,Cyclomatic complexity of the method is 35
Complex Method,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitSubQueryExpression,Cyclomatic complexity of the method is 13
Complex Method,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,GetSparqlQuery,Cyclomatic complexity of the method is 13
Complex Method,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,MakeSparqlConstant,Cyclomatic complexity of the method is 20
Complex Method,BrightstarDB.Query,SparqlQueryHandler,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\SparqlQueryHandler.cs,ExecuteSparql,Cyclomatic complexity of the method is 9
Complex Method,BrightstarDB.Query,VirtualizingSparqlDataset,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\VirtualizingSparqlDataset.cs,GetTriples,Cyclomatic complexity of the method is 13
Complex Method,BrightstarDB.Query.Processor,VariableEqualsOptimizer,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\Processor\VariableEqualsOptimizer.cs,OptimiseBgp,Cyclomatic complexity of the method is 11
Complex Method,BrightstarDB.Query.Processor,VariableEqualsOptimizer,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\Processor\VariableEqualsOptimizer.cs,IsIdentityExpression,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.Server,DeletePatternSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\DeletePatternSink.cs,Triple,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Delete,Cyclomatic complexity of the method is 28
Complex Method,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Bind,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.Storage.BTreeStore,PersistentBTree<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\PersistentBTree.cs,AssertAfterDeleteInvariant,Cyclomatic complexity of the method is 9
Complex Method,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,Bind,Cyclomatic complexity of the method is 8
Complex Method,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,GetMatchEnumeration,Cyclomatic complexity of the method is 9
Complex Method,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,Cyclomatic complexity of the method is 10
Complex Method,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,Cyclomatic complexity of the method is 13
Complex Method,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,Cyclomatic complexity of the method is 9
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,FF,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,GG,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HH,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,II,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,BrightstarDB,RdfFormat,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\RdfFormat.cs,RdfFormat,The method has 5 parameters. Parameters: displayName' defaultExtension' formatterType' models' mediaTypes
Long Parameter List,BrightstarDB.Portable.Compatibility,Array,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\Array.cs,Copy,The method has 5 parameters. Parameters: sourceArray' sourceIndex' destinationArray' destinationIndex' count
Long Parameter List,BrightstarDB.Portable.Compatibility,Array,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\Array.cs,BinarySearch,The method has 5 parameters. Parameters: array' index' length' value' comparer
Long Parameter List,BrightstarDB.Portable.Compatibility,Array,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\Array.cs,ConstrainedCopy,The method has 5 parameters. Parameters: source' srcOffset' destination' destOffset' count
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 7 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' resultsFormat' graphFormat' streamFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 5 parameters. Parameters: storeName' queryExpression' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 6 parameters. Parameters: storeName' queryExpression' defaultGraphUri' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 6 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 5 parameters. Parameters: commitPoint' queryExpression' defaultGraphUri' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 5 parameters. Parameters: commitPoint' queryExpression' defaultGraphUris' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The method has 6 parameters. Parameters: commitPoint' queryExpression' defaultGraphUris' resultsFormat' graphFormat' streamFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteTransaction,The method has 6 parameters. Parameters: storeName' preconditions' deletePatterns' insertData' defaultGraphUri' label
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,StartImport,The method has 5 parameters. Parameters: store' fileName' graphUri' label' importFormat
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,StartExport,The method has 5 parameters. Parameters: store' fileName' graphUri' exportFormat' label
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetCommitPoints,The method has 5 parameters. Parameters: storeName' latest' earliest' skip' take
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetStatistics,The method has 5 parameters. Parameters: storeName' latest' earlierst' skip' take
Long Parameter List,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,CreateSnapshot,The method has 5 parameters. Parameters: storeName' targetStoreName' persistenceType' sourceCommitPoint' label
Long Parameter List,BrightstarDB.Client,BrightstarRestUpdatableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestUpdatableStore.cs,ApplyTransaction,The method has 5 parameters. Parameters: existencePreconditions' nonexistencePreconditions' deletePatterns' inserts' updateGraphUri
Long Parameter List,BrightstarDB.Client,BrightstarRestUpdatableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestUpdatableStore.cs,PostTransaction,The method has 5 parameters. Parameters: existencePreconditions' nonexistencePreconditions' patternsToDelete' triplesToAdd' defaultGraphUri
Long Parameter List,BrightstarDB.Client,DataObjectStoreBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObjectStoreBase.cs,DataObjectStoreBase,The method has 5 parameters. Parameters: asReadOnly' namespaceMappings' updateGraphUri' datasetGraphUris' versionGraphUri
Long Parameter List,BrightstarDB.Client,DataObjectStoreBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObjectStoreBase.cs,AddPrecondition,The method has 8 parameters. Parameters: matchExisting' subject' predicate' object' graph' isLiteral' datatype' language
Long Parameter List,BrightstarDB.Client,DotNetRdfDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfDataObjectContextBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfDataObjectContextBase.cs,CreateDataObjectStore,The method has 6 parameters. Parameters: namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph' storageProvider
Long Parameter List,BrightstarDB.Client,DotNetRdfDataObjectContextBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfDataObjectContextBase.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfDataObjectContextBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfDataObjectContextBase.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfStorageProvidersDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfStorageProvidersDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfStorageProvidersDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfStorageProvidersDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfStorageServerDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfStorageServerDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,DotNetRdfStorageServerDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfStorageServerDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 5 parameters. Parameters: storeName' queryExpression' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 6 parameters. Parameters: storeName' queryExpression' defaultGraphUri' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 6 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 7 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' resultsFormat' graphFormat' streamFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 5 parameters. Parameters: commitPoint' queryExpression' defaultGraphUri' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 5 parameters. Parameters: commitPoint' queryExpression' defaultGraphUris' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The method has 6 parameters. Parameters: commitPoint' queryExpression' defaultGraphUris' resultsFormat' graphFormat' streamFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteTransaction,The method has 6 parameters. Parameters: storeName' preconditions' deletePatterns' insertData' defaultGraphUri' label
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,StartImport,The method has 5 parameters. Parameters: storeName' fileName' graphUri' label' importFormat
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,StartExport,The method has 5 parameters. Parameters: store' fileName' graphUri' exportFormat' label
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The method has 5 parameters. Parameters: storeName' latest' earliest' skip' take
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetStatistics,The method has 5 parameters. Parameters: storeName' latest' earlierst' skip' take
Long Parameter List,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,CreateSnapshot,The method has 5 parameters. Parameters: storeName' targetStoreName' persistenceType' sourceCommitPoint' label
Long Parameter List,BrightstarDB.Client,EmbeddedDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,EmbeddedDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,EmbeddedDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedDataObjectStore.cs,EmbeddedDataObjectStore,The method has 7 parameters. Parameters: serverCore' storeName' namespaceMappings' optimisticLockingEnabled' updateGraphUri' datasetGraphUris' versionGraphUri
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 7 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' resultsFormat' graphFormat' streamFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 5 parameters. Parameters: storeName' queryExpression' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 6 parameters. Parameters: storeName' queryExpression' defaultGraphUri' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 6 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 5 parameters. Parameters: commitPoint' queryExpression' defaultGraphUri' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 5 parameters. Parameters: commitPoint' queryExpression' defaultGraphUris' resultsFormat' graphFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteQuery,The method has 6 parameters. Parameters: commitPoint' queryExpression' defaultGraphUris' resultsFormat' graphFormat' streamFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,ExecuteTransaction,The method has 6 parameters. Parameters: storeName' preconditions' deletePatterns' insertData' defaultGraphUri' label
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,StartImport,The method has 5 parameters. Parameters: store' fileName' graphUri' label' importFormat
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,StartExport,The method has 5 parameters. Parameters: store' fileName' graphUri' exportFormat' label
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,GetCommitPoints,The method has 5 parameters. Parameters: storeName' latest' earliest' skip' take
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,GetStatistics,The method has 5 parameters. Parameters: storeName' latest' earlierst' skip' take
Long Parameter List,BrightstarDB.Client,IBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IBrightStarService.cs,CreateSnapshot,The method has 5 parameters. Parameters: storeName' targetStoreName' persistenceType' sourceCommitPoint' label
Long Parameter List,BrightstarDB.Client,IDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,IDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,IDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IDataObjectStore.cs,AddPrecondition,The method has 8 parameters. Parameters: matchExisting' subject' predicate' object' graph' isLiteral' datatype' language
Long Parameter List,BrightstarDB.Client,ITripleCollection,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\ITripleCollection.cs,RemoveBySubjectPredicateLiteral,The method has 5 parameters. Parameters: subject' predicate' literal' dataType' langCode
Long Parameter List,BrightstarDB.Client,IUpdateableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\IUpdateableStore.cs,ApplyTransaction,The method has 5 parameters. Parameters: existencePreconditions' nonexistencePreconditions' deletePatterns' inserts' updateGraphUri
Long Parameter List,BrightstarDB.Client,RemoteDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\RemoteDataObjectStore.cs,RemoteDataObjectStore,The method has 6 parameters. Parameters: asReadOnly' namespaceMappings' optimisticLockingEnabled' updateGraphUri' datasetGraphUris' versionGraphUri
Long Parameter List,BrightstarDB.Client,RestDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\RestDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,RestDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\RestDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,RestDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\RestDataObjectStore.cs,RestDataObjectStore,The method has 7 parameters. Parameters: connectionString' storeName' namespaceMappings' isOptimisticLockingEnabled' updateGraphUri' datasetGraphUris' versionGraphUri
Long Parameter List,BrightstarDB.Client,SparqlDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlDataObjectContext.cs,OpenStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,SparqlDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlDataObjectContext.cs,CreateStore,The method has 6 parameters. Parameters: storeName' namespaceMappings' optimisticLockingEnabled' persistenceType' updateGraph' versionTrackingGraph
Long Parameter List,BrightstarDB.Client,SparqlDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlDataObjectStore.cs,SparqlDataObjectStore,The method has 7 parameters. Parameters: queryProcessor' updateProcessor' namespaceMappings' optimisticLockingEnabled' updateGraphUri' datasetGraphUris' versionGraphUri
Long Parameter List,BrightstarDB.Client,SparqlUpdatableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlUpdatableStore.cs,ApplyTransaction,The method has 5 parameters. Parameters: existencePreconditions' nonexistencePreconditions' deletePatterns' inserts' updateGraphUri
Long Parameter List,BrightstarDB.Client,TransactionPreconditionsFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\TransactionPreconditionsFailedException.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Client,TripleCollection,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\TripleCollection.cs,RemoveBySubjectPredicateLiteral,The method has 5 parameters. Parameters: subject' predicate' literal' dataType' langCode
Long Parameter List,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,BrightstarEntityContext,The method has 6 parameters. Parameters: connectionString' enableOptimisticLocking' updateGraphUri' datasetGraphUris' versionGraphUri' enableFilterOptimization
Long Parameter List,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,OpenStore,The method has 5 parameters. Parameters: connectionString' enableOptimisticLocking' updateGraphUri' datasetGraphUris' versionGraphUri
Long Parameter List,BrightstarDB.EntityFramework,IdentityInfo,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\IdentityInfo.cs,IdentityInfo,The method has 5 parameters. Parameters: baseUri' identityProperty' keyProperties' keySeparator' keyConverter
Long Parameter List,BrightstarDB.EntityFramework.Query,SparqlLinqQueryContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlLinqQueryContext.cs,SparqlLinqQueryContext,The method has 7 parameters. Parameters: sparqlQuery' anonymousMembersMap' constructor' constructorArgs' memberMap' memberInitExpression' orderingDirections
Long Parameter List,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,AddTripleConstraint,The method has 6 parameters. Parameters: subjectType' subject' verbType' verb' objectType' obj
Long Parameter List,BrightstarDB.EntityFramework.Query,SparqlQueryContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryContext.cs,SparqlQueryContext,The method has 5 parameters. Parameters: sparqlQuery' anonymousMembersMap' orderingDirections' tableResultsFormat' graphResultsFormat
Long Parameter List,BrightstarDB.EntityFramework.Query,TripleInfo,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\TripleInfo.cs,TripleInfo,The method has 6 parameters. Parameters: subjectType' subject' verbType' verb' objectType' obj
Long Parameter List,BrightstarDB.Rdf,ITripleSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\ITripleSink.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Rdf,NQuadsWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NQuadsWriter.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Rdf,NTriplesWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesWriter.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Rdf,RdfXmlWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\RdfXmlWriter.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Rdf,StoreTripleSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\StoreTripleSink.cs,StoreTripleSink,The method has 5 parameters. Parameters: writeStore' jobId' batchSize' commitEachBatch' profiler
Long Parameter List,BrightstarDB.Rdf,StoreTripleSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\StoreTripleSink.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' isLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Server,DeletePatternSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\DeletePatternSink.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' isLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Server,ExportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ExportJob.cs,ExportJob,The method has 6 parameters. Parameters: jobId' label' storeWorker' outputFileName' graphUri' exportFormat
Long Parameter List,BrightstarDB.Server,GuardedUpdateTransaction,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\GuardedUpdateTransaction.cs,GuardedUpdateTransaction,The method has 8 parameters. Parameters: jobId' label' storeWorker' existsPreconditions' notExistsPreconditions' deletePatterns' insertData' defaultGraphUri
Long Parameter List,BrightstarDB.Server,ImportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ImportJob.cs,ImportJob,The method has 6 parameters. Parameters: jobId' label' storeWorker' contentFileName' importFormat' graphUri
Long Parameter List,BrightstarDB.Server,ImportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ImportJob.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Server,PreconditionSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\PreConditionSink.cs,Triple,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' isLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Server,PreconditionSink,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\PreConditionSink.cs,FailedPrecondition,The method has 10 parameters. Parameters: subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' isLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,Query,The method has 7 parameters. Parameters: storeName' queryExpression' defaultGraphUris' ifNotModifiedSince' sparqlResultFormat' graphFormat' responseStream
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,Query,The method has 7 parameters. Parameters: storeName' commitPointId' queryExpression' defaultGraphUris' sparqlResultFormat' graphFormat' responseStream
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,MakeQueryCacheKey,The method has 5 parameters. Parameters: storeName' commitTime' query' defaultGraphUris' targetFormat
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,ProcessTransaction,The method has 7 parameters. Parameters: storeName' preconditions' notExistsPreconditions' deletePatterns' insertData' defaultGraphUri' jobLabel
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,Import,The method has 5 parameters. Parameters: storeName' contentFileName' graphUri' importFormat' jobLabel
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,Export,The method has 5 parameters. Parameters: storeName' fileName' graphUri' exportFormat' jobLabel
Long Parameter List,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,CreateSnapshot,The method has 5 parameters. Parameters: sourceStoreName' targetStoreName' persistenceType' sourceCommitPointId' jobLabel
Long Parameter List,BrightstarDB.Server,SnapshotJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\SnapshotJob.cs,SnapshotJob,The method has 6 parameters. Parameters: jobId' label' storeWorker' destinationStoreName' persistenceType' sourceCommitPointId
Long Parameter List,BrightstarDB.Server,StoreWorker,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\StoreWorker.cs,Query,The method has 5 parameters. Parameters: commitPointId' query' targetFormat' resultsStream' defaultGraphUris
Long Parameter List,BrightstarDB.Server,StoreWorker,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\StoreWorker.cs,ProcessTransaction,The method has 7 parameters. Parameters: preconditions' notExistsPreconditions' deletePatterns' insertData' defaultGraphUri' format' jobLabel
Long Parameter List,BrightstarDB.Server,UpdateTransaction,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\UpdateTransaction.cs,UpdateTransaction,The method has 7 parameters. Parameters: jobId' label' storeWorker' preconditionData' deletePatterns' insertData' defaultGraphUri
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,BPlusTree,The method has 5 parameters. Parameters: pageStore' rootPageId' keySize' dataSize' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Insert,The method has 5 parameters. Parameters: txnId' key' value' overwrite' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Delete,The method has 5 parameters. Parameters: txnId' parentInternalNode' key' underAllocation' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Insert,The method has 9 parameters. Parameters: txnId' node' key' value' split' rightNode' splitKey' overwrite' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Insert,The method has 5 parameters. Parameters: txnId' key' value' overwrite' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,ILeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ILeafNode.cs,Insert,The method has 5 parameters. Parameters: txnId' key' value' overwrite' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,InternalNode,The method has 5 parameters. Parameters: page' splitKey' leftPageId' rightPageId' treeConfiguration
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,IResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\IResourceTable.cs,Insert,The method has 5 parameters. Parameters: transactionId' resource' pageId' segment' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,LeafNode,The method has 6 parameters. Parameters: page' prevPointer' nextPointer' treeConfiguration' orderedValues' numValuesToLoad
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,Insert,The method has 5 parameters. Parameters: txnId' key' value' overwrite' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,Insert,The method has 5 parameters. Parameters: transactionId' resource' pageId' segmentId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Store,The method has 5 parameters. Parameters: storeLocation' dataPageStore' resourceTable' storePageId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Match,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graph
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Match,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,ExecuteSparqlQuery,The method has 5 parameters. Parameters: query' targetFormat' resultsStream' defaultGraphUris' storeStatistics
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,InsertTriple,The method has 8 parameters. Parameters: subject' predicate' objValue' isObjectLiteral' dataType' langCode' graphUri' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The method has 5 parameters. Parameters: graphIndexId' prefixManagerId' resourceIndexId' subjectRelatedResourceIndexId' objectRelatedResourceIndexId
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,GetBindings,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graph
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,GetBindings,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,GetBindings,The method has 10 parameters. Parameters: subjNodeId' subjValue' predNodeId' predValue' objNodeId' objValue' isLiteral' dataType' languageCode' graphUris
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,IRelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\IRelatedResourceIndex.cs,AddRelatedResource,The method has 6 parameters. Parameters: txnId' resourceId' predicateId' relatedResourceId' graphId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,IRelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\IRelatedResourceIndex.cs,DeleteRelatedResource,The method has 6 parameters. Parameters: txnId' resourceId' predicateId' relatedResourceId' graphId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,IRelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\IRelatedResourceIndex.cs,ContainsRelatedResource,The method has 5 parameters. Parameters: resourceId' predicateId' relatedResourceId' graphId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,AddRelatedResource,The method has 6 parameters. Parameters: txnId' resourceId' predicateId' relatedResourceId' graphId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,DeleteRelatedResource,The method has 6 parameters. Parameters: txnId' resourceId' predicateId' relatedResourceId' graphId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,ContainsRelatedResource,The method has 5 parameters. Parameters: resourceId' predicateId' relatedResourceId' graphId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,IResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\IResourceIndex.cs,AssertResourceInIndex,The method has 7 parameters. Parameters: txnId' resourceValue' isLiteral' dataType' langCode' addToCache' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,IResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\IResourceIndex.cs,GetResourceId,The method has 6 parameters. Parameters: resourceValue' isLiteral' dataType' langCode' addToCache' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,IResourceStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\IResourceStore.cs,CreateNew,The method has 6 parameters. Parameters: txnId' resourceValue' isLiteral' dataTypeId' langCodeId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,LongLiteralResource,The method has 5 parameters. Parameters: value' dataTypeId' langCodeId' valuePage' valueSeg
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,AssertResourceInIndex,The method has 7 parameters. Parameters: txnId' resourceValue' isLiteral' dataType' langCode' addToCache' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,GetResourceId,The method has 6 parameters. Parameters: resourceValue' isLiteral' dataType' langCode' addToCache' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,AssertResourceInBTree,The method has 7 parameters. Parameters: txnId' resourceValue' isLiteral' dataTypeId' langCodeId' hashCode' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,FindResourceInBTree,The method has 5 parameters. Parameters: resourceValue' isLiteral' dataTypeId' langCodeId' hashCode
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceStore.cs,CreateNew,The method has 6 parameters. Parameters: txnId' resourceValue' isLiteral' dataTypeId' langCodeId' profiler
Long Parameter List,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceStore.cs,CreateLongLiteralResource,The method has 5 parameters. Parameters: txnId' resourceValue' dataTypeId' langCodeId' profiler
Long Parameter List,BrightstarDB.Storage.BTreeStore,ResourceIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ResourceIdIndex.cs,AssertResourceInIndex,The method has 6 parameters. Parameters: resourceValue' isLiteral' dataType' langCode' cache' profiler
Long Parameter List,BrightstarDB.Storage.BTreeStore,ResourceIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ResourceIdIndex.cs,GetResourceId,The method has 5 parameters. Parameters: resourceValue' isLiteral' dataType' langCode' cache
Long Parameter List,BrightstarDB.Storage.BTreeStore,ResourceIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ResourceIdIndex.cs,MakeNewResource,The method has 5 parameters. Parameters: resourceId' resourceValue' isLiteral' dataTypeId' langCode
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,ExecuteSparqlQuery,The method has 5 parameters. Parameters: query' targetFormat' resultsStream' defaultGraphUris' storeStatistics
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,InsertTriple,The method has 8 parameters. Parameters: subject' predicate' objValue' isObjectLiteral' dataType' langCode' graphUri' profiler
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,Match,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graph
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,Match,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,AssertInResourceIndex,The method has 6 parameters. Parameters: resourceValue' isLiteral' dataType' langCode' cache' profiler
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,GetBindings,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graph
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,GetBindings,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,GetBindings,The method has 10 parameters. Parameters: subjNodeId' subjValue' predNodeId' predValue' objNodeId' objValue' isLiteral' dataType' languageCode' graphUris
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,Triple,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphUri
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,GetMatchEnumeration,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,GetPredicateSubjectMatchEnumeration,The method has 5 parameters. Parameters: value' isLiteral' dataType' languageCode' graphUris
Long Parameter List,BrightstarDB.Storage,ByteArrayHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\ByteArrayHelper.cs,MultiCopy,The method has 5 parameters. Parameters: sourceArrays' destinationArray' destinationOffset' sourceArrayCount' sourceArrayLength
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,Match,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graph
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,Match,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,ExecuteSparqlQuery,The method has 5 parameters. Parameters: query' targetFormat' resultsStream' defaultGraphUris' storeStatistics
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,InsertTriple,The method has 8 parameters. Parameters: subject' predicate' objValue' isObjectLiteral' dataType' langCode' graphUri' profiler
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,GetBindings,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graph
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,GetBindings,The method has 7 parameters. Parameters: subject' predicate' obj' isLiteral' dataType' langCode' graphs
Long Parameter List,BrightstarDB.Storage,IStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\IStore.cs,GetBindings,The method has 10 parameters. Parameters: subjNodeId' subjValue' predNodeId' predValue' objNodeId' objValue' isLiteral' dataType' languageCode' graphUris
Long Parameter List,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,MasterFile,The method has 5 parameters. Parameters: persistenceManager' directoryPath' masterFilePath' storeConfiguration' storeSetId
Long Parameter List,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,AppendOnlyFilePageStore,The method has 5 parameters. Parameters: persistenceManager' filePath' pageSize' readOnly' disableBackgroundWrites
Long Parameter List,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,Create,The method has 5 parameters. Parameters: txnId' pageData' srcOffset' pageOffset' len
Long Parameter List,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,Write,The method has 7 parameters. Parameters: commitId' pageId' data' srcOffset' pageOffset' len' profiler
Long Parameter List,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The method has 5 parameters. Parameters: inputStream' pageId' nominalPageSize' currentTxnId' isWriteable
Long Parameter List,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,BinaryFilePageStore,The method has 7 parameters. Parameters: persistenceManager' filePath' pageSize' readOnly' transactionId' nextTransactionId' disableBackgroundWrites
Long Parameter List,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,Write,The method has 7 parameters. Parameters: commitId' pageId' buff' srcOffset' pageOffset' len' profiler
Long Parameter List,BrightstarDB.Storage.Persistence,IPageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\IPageStore.cs,Write,The method has 7 parameters. Parameters: commitId' pageId' buff' srcOffset' pageOffset' len' profiler
Long Parameter List,BrightstarDB.Storage.TransactionLog,TransactionInfo,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\TransactionLog\TransactionInfo.cs,TransactionInfo,The method has 6 parameters. Parameters: txnJobId' txnStatus' txnType' dataStart' dataLength' txnStartTime
Long Parameter List,BrightstarDB.Utils,ArrayExtensions,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\ArrayExtensions.cs,Compare,The method has 5 parameters. Parameters: arry' offset' other' otherOffset' len
Long Parameter List,Remotion.Linq.Clauses,JoinClause,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\JoinClause.cs,JoinClause,The method has 5 parameters. Parameters: itemName' itemType' innerSequence' outerKeySelector' innerKeySelector
Long Parameter List,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupJoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupJoinExpressionNode.cs,GroupJoinExpressionNode,The method has 5 parameters. Parameters: parseInfo' innerSequence' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,Remotion.Linq.Parsing.Structure.IntermediateModel,JoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\JoinExpressionNode.cs,JoinExpressionNode,The method has 5 parameters. Parameters: parseInfo' innerSequence' outerKeySelector' innerKeySelector' resultSelector
Long Identifier,BrightstarDB.Config,EmbeddedServiceConfiguration,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Config\EmbeddedServiceConfiguration.cs,EmbeddedServiceConfiguration,The length of the parameter enableTransactionLoggingOnNewStores is 35.
Long Identifier,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleEqualsNotEquals,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleEqualsNotEquals,The length of the parameter querySourceReferenceExpression is 30.
Long Identifier,BrightstarDB.Server,PreconditionFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\PreConditionFailedException.cs,PreconditionFailedException,The length of the parameter existancePreconditionFailureCount is 33.
Long Identifier,BrightstarDB.Server,PreconditionFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\PreConditionFailedException.cs,PreconditionFailedException,The length of the parameter existancePreconditionFailedNTriples is 35.
Long Identifier,BrightstarDB.Server,PreconditionFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\PreConditionFailedException.cs,PreconditionFailedException,The length of the parameter nonExistancePreconditionFailureCount is 36.
Long Identifier,BrightstarDB.Server,PreconditionFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\PreConditionFailedException.cs,PreconditionFailedException,The length of the parameter nonExistancePreconditionFailedNTriples is 38.
Long Identifier,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,ServerCore,The length of the parameter enableTransactionLoggingOnNewStores is 35.
Long Identifier,BrightstarDB.Storage.TransactionLog,PersistentTransactionLog,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\TransactionLog\PersistentTransactionLog.cs,,The length of the parameter _currentTransactionDataStartPosition is 36.
Long Identifier,Remotion.Linq.Clauses.Expressions,ExtensionExpression,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\Expressions\ExtensionExpression.cs,,The length of the parameter DefaultExtensionExpressionNodeType is 34.
Long Identifier,Remotion.Linq,ReflectionUtility,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\ReflectionUtility.cs,TryGetItemTypeOfIEnumerable,The length of the parameter implementedEnumerableInterface is 30.
Long Identifier,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitUnknownNonExtensionExpression,The length of the parameter expressionAsExtensionExpression is 31.
Long Identifier,Remotion.Linq.Parsing.ExpressionTreeVisitors,SubQueryFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\SubQueryFindingExpressionTreeVisitor.cs,VisitExpression,The length of the parameter potentialQueryOperatorExpression is 32.
Long Identifier,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,Transform,The length of the parameter leftSideAsMethodCallExpression is 30.
Long Identifier,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,Transform,The length of the parameter leftSideArgument2AsConstantExpression is 37.
Long Identifier,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The length of the parameter leftSideAsMethodCallExpression is 30.
Long Identifier,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The length of the parameter leftSideArgument2AsConstantExpression is 37.
Long Identifier,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,,The length of the parameter c_vbCompareStringOperatorMethodName is 35.
Long Identifier,Remotion.Linq.Parsing.Structure,MethodCallExpressionParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\MethodCallExpressionParser.cs,Parse,The length of the parameter additionalConstructorParameters is 31.
Long Identifier,Remotion.Linq.Parsing.Structure,MethodCallExpressionParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\MethodCallExpressionParser.cs,ProcessArgumentExpression,The length of the parameter parametersWithSubQueriesDetected is 32.
Long Identifier,Remotion.Linq.Parsing.Structure,MethodCallExpressionParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\MethodCallExpressionParser.cs,CreateExpressionNode,The length of the parameter additionalConstructorParameters is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,GroupByWithResultSelectorExpressionNode,The length of the parameter elementSelectorOrResultSelector is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateParseInfoWithGroupNode,The length of the parameter elementSelectorOrResultSelector is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateParseInfoWithGroupNode,The length of the parameter simulatedGroupByCallWithoutResultSelector is 41.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateSelectorForSelectNode,The length of the parameter elementSelectorOrResultSelector is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateSelectorForSelectNode,The length of the parameter bodyWithGroupingAndKeyReplaced is 30.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,GetOptionalElementSelector,The length of the parameter elementSelectorOrResultSelector is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,GetResultSelector,The length of the parameter elementSelectorOrResultSelector is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeFactory,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeFactory.cs,CreateExpressionNode,The length of the parameter additionalConstructorParameters is 31.
Long Identifier,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeFactory,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeFactory.cs,GetParameterArray,The length of the parameter additionalConstructorParameters is 31.
Long Statement,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The length of the statement  "                output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24); " is 121.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ValidateStoreName,The length of the statement  "            if (storeName == null) throw new ArgumentNullException(argName' Strings.BrightstarServiceClient_StoreNameMustNotBeNull); " is 120.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ValidateStoreName,The length of the statement  "            if (String.IsNullOrEmpty(storeName)) throw new ArgumentException(Strings.BrightstarServiceClient_StoreNameMustNotBeEmptyString' argName); " is 137.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,DoesStoreExist,The length of the statement  "                throw new BrightstarClientException(String.Format("Could not verify existence of store - '{0}'"'webExceptionDetail)' wex);                 " is 122.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The length of the statement  "            if (String.IsNullOrEmpty(queryExpression)) throw new ArgumentException(Strings.StringParameterMustBeNonEmpty' "queryExpression"); " is 129.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The length of the statement  "            if (resultsFormat == null && graphFormat == null) throw new ArgumentException("Either a SparqlResultsFormat or an RdfFormat (or both) must be specified"); " is 154.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The length of the statement  "            if (resultsFormat == null && graphFormat == null) throw new ArgumentException("Either a SparqlResultsFormat or an RdfFormat (or both) must be specified"); " is 154.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ReExecuteTransaction,The length of the statement  "            if (transactionInfo.StoreName != storeName) throw new ArgumentException(Strings.BrightstarServiceClient_InvalidTransactionInfoObject' "transactionInfo"); " is 153.
Long Statement,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,Deserialize,The length of the statement  "            if (responseStream == null) throw new BrightstarClientException("No body found in response. Expected a " + typeof(T).Name); " is 123.
Long Statement,BrightstarDB.Client,BrightstarRestUpdatableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestUpdatableStore.cs,ExecuteQuery,The length of the statement  "            var resultStream = _client.ExecuteQuery(_storeName' queryContext.SparqlQuery' datasetGraphUris' null' queryContext.SparqlResultsFormat' " is 135.
Long Statement,BrightstarDB.Client,BrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarService.cs,MakeSparqlDataObjectContext,The length of the statement  "                throw new NotSupportedException("The PCL and mobile builds of BrightstarDB do not currently support stores that use SPARQL Update. The store may be opened as a read-only store by removing the update= parameter in the connection string."); " is 238.
Long Statement,BrightstarDB.Client,BrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarService.cs,GetRestClient,The length of the statement  "                requestAuthenticator = new CredentialsRequestAuthenticator(new NetworkCredential(connectionString.UserName' connectionString.Password)); " is 136.
Long Statement,BrightstarDB.Client,DataObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObject.cs,RemoveInversePropertiesOfType,The length of the statement  "            AddDeleteTriples(new Triple{Subject = Constants.WildcardUri' Predicate = type.Identity' Object = Identity' IsLiteral = false}); " is 127.
Long Statement,BrightstarDB.Client,DataObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObject.cs,UpdateIdentity,The length of the statement  "            if (String.IsNullOrWhiteSpace(newIdentity)) throw new ArgumentException("DataObject Identity must not be an empty string or whitespace."' "newIdentity"); " is 153.
Long Statement,BrightstarDB.Client,DataObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObject.cs,UpdateIdentity,The length of the statement  "                ret.BindTriples(_triples.Union(_store.GetReferencingTriples(this)).Select(t => ReplaceIdentity(t' newIdentity))' true' enforceClassUniqueConstraint); " is 149.
Long Statement,BrightstarDB.Client,DataObjectStoreBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObjectStoreBase.cs,MakeDataObject,The length of the statement  "                return RegisterDataObject(new DataObject(this' Curie.ResolveCurie(new Curie(identity)' _namespaceMappings).ToString())); " is 120.
Long Statement,BrightstarDB.Client,DataObjectStoreBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObjectStoreBase.cs,SetClassUniqueConstraints,The length of the statement  "                types.Select(x=>new Triple{Subject = identity' Predicate = DataObject.TypeDataObject.Identity' Object = x' Graph = Constants.WildcardUri})); " is 140.
Long Statement,BrightstarDB.Client,DataObjectStoreBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DataObjectStoreBase.cs,ReplaceIdentity,The length of the statement  "            foreach (var addTriple in AddTriples.GetMatches(new Triple{Subject=null' Predicate=null' Object=oldIdentity' IsLiteral = false}).ToList()) " is 138.
Long Statement,BrightstarDB.Client,DotNetRdfConfigurationHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfConfigurationHelper.cs,GetConfigurationObject,The length of the statement  "            Uri targetUri = id.StartsWith("#") ? new Uri(configurationGraph.BaseUri + id) : new Uri(configurationGraph.BaseUri' id); " is 120.
Long Statement,BrightstarDB.Client,DotNetRdfStorageProvidersDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfStorageProvidersDataObjectContext.cs,OpenStore,The length of the statement  "            return CreateDataObjectStore(namespaceMappings' optimisticLockingEnabled' updateGraph' defaultDataSet' versionTrackingGraph' storageProvider); " is 142.
Long Statement,BrightstarDB.Client,DotNetRdfStorageServerDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\DotNetRdfStorageServerDataObjectContext.cs,DoesStoreExist,The length of the statement  "            if (string.IsNullOrEmpty(storeName)) throw new ArgumentException(Strings.BrightstarServiceClient_StoreNameMustNotBeEmptyString); " is 128.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The length of the statement  "            return ExecuteQuery(storeName' queryExpression' defaultGraphUri == null ? null : new[] { defaultGraphUri }' ifNotModifiedSince' " is 127.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The length of the statement  "            if (resultsFormat == null && graphFormat == null) throw new ArgumentException("Either resultsFormat or graphFormat must be non-NULL"); " is 134.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The length of the statement  "                throw new BrightstarClientException("Error querying store " + storeName + " with expression " + queryExpression + ". " + ex.Message' ex); " is 137.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteQuery,The length of the statement  "                streamFormat = _serverCore.Query(commitPoint.StoreName' commitPoint.Id' queryExpression' defaultGraphUris' resultsFormat' graphFormat' pStream); " is 144.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteTransaction,The length of the statement  "                Logging.LogError(BrightstarEventId.ServerCoreException' "Error Queing Transaction {0} {1} {2}"' storeName' deletePatterns' insertData); " is 135.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ExecuteUpdate,The length of the statement  "                Logging.LogError(BrightstarEventId.ServerCoreException' "Error queing SPARQL update {0} {1}"' storeName' updateExpression); " is 123.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetJobInfo,The length of the statement  "            if (storeName == null) throw new ArgumentNullException("storeName"' Strings.BrightstarServiceClient_StoreNameMustNotBeNull); " is 124.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetJobInfo,The length of the statement  "            if (String.Empty.Equals(storeName)) throw new ArgumentException(Strings.BrightstarServiceClient_StoreNameMustNotBeEmptyString' "storeName"); " is 140.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The length of the statement  "                return commitPoints.Select(c => new CommitPointInfoObject {Id = c.LocationOffset' CommitTime = c.CommitTime' JobId = c.JobId' StoreName = storeName}).Cast<ICommitPointInfo>(); " is 175.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The length of the statement  "                return commitPoints.Select(c => new CommitPointInfoObject {Id = c.LocationOffset' CommitTime = c.CommitTime' JobId = c.JobId' StoreName = storeName}).Cast<ICommitPointInfo>(); " is 175.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetStatistics,The length of the statement  "            if (take > 100) throw new ArgumentOutOfRangeException("take"' Strings.BrightstarServiceClient_GetStatistics_TakeTooLarge); " is 122.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,UpdateStatistics,The length of the statement  "                Logging.LogError(BrightstarEventId.ServerCoreException' "Error queuing statistics update job for store {0}"' storeName); " is 120.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,RevertToCommitPoint,The length of the statement  "                Logging.LogError(BrightstarEventId.ServerCoreException' "Error reverting to commit point {0} for store {1}"'commitPoint.Id' storeName); " is 135.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ReExecuteTransaction,The length of the statement  "                Logging.LogError(BrightstarEventId.ServerCoreException' "Error rexecuting transaction with JobId {0} for store {1}"' transactionInfo.JobId' storeName); " is 151.
Long Statement,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,ReExecuteTransaction,The length of the statement  "                throw new BrightstarClientException(String.Format("Error rexecuting transaction with JobId {0} for store {1}. {2}"' transactionInfo.JobId' storeName' ex.Message)' ex); " is 167.
Long Statement,BrightstarDB.Client,EmbeddedDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedDataObjectStore.cs,DoSaveChanges,The length of the statement  "                throw new BrightstarClientException(status.ExceptionDetail != null  && !String.IsNullOrEmpty(status.ExceptionDetail.Message) ? status.ExceptionDetail.Message : "The transaction encountered an error"); " is 200.
Long Statement,BrightstarDB.Client,EmbeddedDataObjectStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedDataObjectStore.cs,DoSaveChanges,The length of the statement  "                throw new BrightstarClientException("Unexpected job status on completion: " + status.JobStatus + ". Last message was: " + status.Information); " is 142.
Long Statement,BrightstarDB.Client,SparqlDataObjectContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlDataObjectContext.cs,OpenStore,The length of the statement  "            if (!storeName.Equals(_storeName)) throw new BrightstarClientException(Strings.BrightstarServiceClient_StoreDoesNotExist); " is 122.
Long Statement,BrightstarDB.Client,SparqlResultDataObjectHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlResultDataObjectHelper.cs,BindDataObjects,The length of the statement  "                            // Have collected all the triples we are going to see for the previously encountered subject' so emit its data object now " is 121.
Long Statement,BrightstarDB.Client,SparqlResultDataObjectHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlResultDataObjectHelper.cs,BindDataObjects,The length of the statement  "                       $"Expected a result set with either 1 or 3 columns. Got a result set with {sparqlResultSet.Variables.Count()} columns"' nameof(sparqlResultSet)); " is 145.
Long Statement,BrightstarDB.Dto,JobRequestObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Dto\JobRequestObject.cs,CreateExportJob,The length of the statement  "            if (String.IsNullOrWhiteSpace(exportFileName)) throw new ArgumentException(Strings.StringParameterMustBeNonEmpty' "exportFileName"); " is 132.
Long Statement,BrightstarDB.Dto,JobRequestObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Dto\JobRequestObject.cs,CreateExportJob,The length of the statement  "            if (graphUri != null && String.IsNullOrWhiteSpace(graphUri)) throw new ArgumentException(Strings.StringParameterMustBeNonEmpty' "graphUri"); " is 140.
Long Statement,BrightstarDB.Dto,JobRequestObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Dto\JobRequestObject.cs,CreateSparqlUpdateJob,The length of the statement  "            if (String.IsNullOrWhiteSpace(updateExpression)) throw new ArgumentException(Strings.StringParameterMustBeNonEmpty' "updateExpression"); " is 136.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityCollection<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityCollection.cs,Set,The length of the statement  "                foreach(var item in LoadedObjects.Except(items.Cast<BrightstarEntityObject>()' new BrightstarEntityObjectComparer()).ToList()) " is 126.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityCollection<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityCollection.cs,InternalAdd,The length of the statement  "                throw new ArgumentException(String.Format(Strings.InvalidEntityType' typeof(BrightstarEntityObject).FullName)' "toAdd"); " is 120.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityCollection<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityCollection.cs,AssertBrightstarObject,The length of the statement  "                throw new ArgumentException( String.Format(Strings.InvalidEntityType' typeof(BrightstarEntityObject).FullName)' argumentName); " is 126.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,_Add,The length of the statement  "                    string.Format("Cannot add an object of type {0} to this context as it does not implement any known entity interface."' o.GetType().FullName)); " is 142.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,_AddOrUpdate,The length of the statement  "                    string.Format("Cannot add or update an object of type {0} to this context as it does not implement any known entity interface."' o.GetType().FullName)); " is 152.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,Refresh,The length of the statement  "            if (!(entity is BrightstarEntityObject)) throw new ArgumentException("Expected entity to extend the BrightstarEntityObject class"' "entity"); " is 141.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,BindRowsToEntites,The length of the statement  "            if (resultSet == null) throw new ArgumentException("Result does not contain a SPARQL Result Table"' nameof(sparqlQueryResult)); " is 127.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,BindSparqlResultToAnonymousType,The length of the statement  "                    if (converter == null) throw new EntityFrameworkException("No converter available for type '{0}'"' propertyType.FullName); " is 122.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityContext.cs,ExecuteInstanceQuery,The length of the statement  "            var sparqlQuery = string.Format("ASK {0} {{ <{1}> a <{2}>. }}"' _store.GetDatasetClause()' instanceIdentifier' typeIdentifier); " is 127.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,GetPropertyHint,The length of the statement  "                throw new ArgumentException(String.Format("Cannot find property named '{0}' on type '{1}'"' propertyName' GetType().FullName)); " is 127.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,GetPropertyHint,The length of the statement  "                    String.Format("No property mapping hint found for property named '{0}' on type '{1}'"' propertyName' GetType().FullName)); " is 122.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,GetPropertyUri,The length of the statement  "                throw new ArgumentException(String.Format("Property '{0}' on type '{1}' does not map to a literal property type"' propertyName' GetType().FullName)); " is 149.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,ReportPropertyChanged,The length of the statement  "                    throw new ArgumentException(String.Format("Cannot find property named '{0}' on type '{1}'"' propertyName' GetType().FullName)); " is 127.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,ReportPropertyChanged,The length of the statement  "                            String.Format("The property mapping type {0} is not supported by the Brightstar EntityFramework"' propertyHint.MappingType)); " is 125.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,SetRelatedObject,The length of the statement  "                // If the value entity has a single-value forward property of this type then all existing arcs from that value need removing " is 124.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,SetRelatedObject,The length of the statement  "                    foreach (var existingValueRef in entity.DataObject.GetPropertyValues(propertyHint.SchemaTypeUri).OfType<IDataObject>().ToList()) " is 128.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntityObject,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntityObject.cs,OnPropertyChanged,The length of the statement  "            if (identityInfo != null && identityInfo.KeyProperties != null && identityInfo.KeyProperties.Any(p => p.Name.Equals(propertyName))) " is 131.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntitySet<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntitySet.cs,Add,The length of the statement  "                throw new EntityFrameworkException("Only items of type {0} can be added to an BrightstarEntitySet"' typeof(BrightstarEntityObject).FullName); " is 141.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntitySet<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntitySet.cs,Add,The length of the statement  "                        "Object is already attached to a different context. It must be detached from its current context before adding it to a new context."); " is 134.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntitySet<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntitySet.cs,AddOrUpdate,The length of the statement  "                throw new EntityFrameworkException("Only items of type {0} can be added to an BrightstarEntitySet"' typeof(BrightstarEntityObject).FullName); " is 141.
Long Statement,BrightstarDB.EntityFramework,BrightstarEntitySet<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\BrightstarEntitySet.cs,AddOrUpdate,The length of the statement  "                        "Object is already attached to a different context. It must be detached from its current context before adding it to a new context."); " is 134.
Long Statement,BrightstarDB.EntityFramework,EntityContext,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\EntityContext.cs,MapTypeToUri,The length of the statement  "            if (EntityMappingStore.IsKnownInterface(type)) return EntityMappingStore.GetMappedInterfaceTypeUri(EntityMappingStore.GetImplType(type)); " is 137.
Long Statement,BrightstarDB.EntityFramework,NamespaceDeclarations,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\NamespaceDeclarations.cs,GetEnumerator,The length of the statement  "            return _assembly.GetCustomAttributes(typeof (NamespaceDeclarationAttribute)' false).Cast<NamespaceDeclarationAttribute>().GetEnumerator(); " is 138.
Long Statement,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,AddMappingsForType,The length of the statement  "                                        "The property '{0}' on type '{1}' is marked with the InverseProperty attribute but its referenced type ('{2}') is not marked with a Entity attribute."' " is 151.
Long Statement,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,AddMappingsForType,The length of the statement  "                                throw new ReflectionMappingException(String.Format("The property '{0}' does not exist on type '{1}'."' inversePropertyAttr.InversePropertyName' targetType.FullName)); " is 166.
Long Statement,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,GetIdentityInfo,The length of the statement  "                            String.Format("Could not instantiate type {0} as a key converter for entity type {1}. Ensure that this type implements the IKeyConverter interface."' " is 149.
Long Statement,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,GetForwardPropertyTypeUri,The length of the statement  "                        "Not allowed to map a property decorated with InversePropertyAttribute to another property decorated with the InversePropertyAttribute. Check the attributes of the property {0} on type {1} and the property {2} on type {3}."' " is 224.
Long Statement,BrightstarDB.EntityFramework,ReflectionMappingProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\ReflectionMappingProvider.cs,GetAssemblyMappingInfo,The length of the statement  "            foreach(var prefixAttr in assembly.GetCustomAttributes(typeof(NamespaceDeclarationAttribute)' false).OfType<NamespaceDeclarationAttribute>()) " is 141.
Long Statement,BrightstarDB.EntityFramework.Query,ExpressionTreeVisitorBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\ExpressionTreeVisitorBase.cs,GetSourceVarName,The length of the statement  "                        new SelectVariableNameExpression(querySource.ReferencedQuerySource.ItemName' VariableBindingType.Resource' querySource.ReferencedQuerySource.ItemType)); " is 152.
Long Statement,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,CreateUnhandledItemException,The length of the statement  "            var message = string.Format("The expression '{0}' (type: {1}) is not supported in a FILTER expression."' itemText' typeof(T)); " is 126.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitQueryModel,The length of the statement  "                && (queryModel.SelectClause.Selector as QuerySourceReferenceExpression).ReferencedQuerySource.Equals(queryModel.MainFromClause)) " is 128.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitQueryModel,The length of the statement  "                            if (constExpression != null && memberExpression != null && memberExpression.Expression is QuerySourceReferenceExpression) " is 121.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitWhereClause,The length of the statement  "            SparqlGeneratorWhereExpressionTreeVisitor.GetSparqlExpression(whereClause.Predicate' _queryBuilder' _context.FilterOptimizationEnabled); " is 136.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitJoinClause,The length of the statement  "            var inner = SparqlGeneratorWhereExpressionTreeVisitor.GetSparqlExpression(joinClause.InnerKeySelector' _queryBuilder' _context.FilterOptimizationEnabled); " is 154.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitJoinClause,The length of the statement  "            var outer = SparqlGeneratorWhereExpressionTreeVisitor.GetSparqlExpression(joinClause.OuterKeySelector' _queryBuilder' _context.FilterOptimizationEnabled); " is 154.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitResultOperator,The length of the statement  "                    throw new EntityFrameworkException("Unable to cast to type '{0}' as it is not a valid entity type."' castOperator.CastItemType); " is 128.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,GetExpressionVariable,The length of the statement  "            var selector = SparqlGeneratorWhereExpressionTreeVisitor.GetSparqlExpression(expression' _queryBuilder' _context.FilterOptimizationEnabled); " is 140.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,GetSparqlExpression,The length of the statement  "                queryBuilder.AddBindExpression("STRAFTER(STR(?" + selectId.Name + ")' " +  SparqlQueryBuilder.QuoteLiteralString(selectId.IdentifierPrefix) + ")"' selectVar); " is 158.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,VisitMemberExpression,The length of the statement  "                if (_queryBuilder.TryGetQuerySourceMapping(source.ReferencedQuerySource' out mappedSourceExpression) && mappedSourceExpression is SelectVariableNameExpression) " is 159.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,VisitMemberInitExpression,The length of the statement  "                            "Unable to map constructor expression to a SPARQL results variable. Only simple property expressions are currently supported. Invalid expression is: {0}"' " is 154.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,CreateUnhandledItemException,The length of the statement  "            var message = string.Format("The expression '{0}' (type: {1}) is not supported by this LINQ provider."' itemText' typeof(T)); " is 125.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,GetSparqlExpression,The length of the statement  "            var visitor = new SparqlGeneratorWhereExpressionTreeVisitor(queryBuilder' canOptimizeFilter' expression.Type == typeof(bool)); " is 126.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,AppendPropertyConstraint,The length of the statement  "           QueryBuilder.AddTripleConstraint(GraphNode.Variable' sourceVar' GraphNode.Iri' propertyHint.SchemaTypeUri' GraphNode.Raw' QueryBuilder.MakeSparqlConstant(constantExpression.Value' false)); " is 188.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleCompareExpression,The length of the statement  "                    "LINQ to SPARQL does not currently support a comparison expression where the first argument is not a member expression."); " is 122.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitSubQueryExpression,The length of the statement  "                _filterWriter = new FilterWriter(this' QueryBuilder' new StringBuilder()); // TODO: Could check FromExpression to see if it is optimisable " is 138.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,AddFromPart,The length of the statement  "            AddQuerySourceMapping(querySource' new SelectVariableNameExpression(itemVarName' VariableBindingType.Resource' querySource.ItemType)); " is 134.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,ApplyAggregate,The length of the statement  "            _aggregates.Add(new Tuple<string' string>(NextVariable()' String.Format("{0}(?{1})"' aggregateFunction' aggregateVar))); " is 120.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,MakeSparqlConstant,The length of the statement  "            throw new ArgumentException(string.Format("Unable to serialize value {0} ({1}) as a SPARQL constant"' value' value.GetType())); " is 127.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,MakeSparqlStringConstant,The length of the statement  "                //.Replace("\""' "\\\"") - not necessary as we are surrounding the string with single quotes' and DNR complains if we also escape the double-quote " is 146.
Long Statement,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,MakeSparqlNumericConstant,The length of the statement  "            if (value is byte || value is short || value is ushort || value is int || value is uint || value is long || value is ulong) " is 123.
Long Statement,BrightstarDB.Profiling,Timing,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Profiling\BrightstarProfiler.cs,Log,The length of the statement  "            sb.AppendFormat("{0'-44} {1'12:F1} {2'10} {3'10:F1}\r\n"' indent + Name' DurationMilliseconds' Repetitions' Profiler.GetRoundedMilliseconds(_elapsedTicks / Repetitions)); " is 170.
Long Statement,BrightstarDB.Query,BrightstarRdfProvider,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\BrightstarRdfProvider.cs,GetID,The length of the statement  "                throw new NotImplementedException("The BrightsatrRdfProvider cannot resolve the ID for nodes of type " + value.GetType().FullName); " is 131.
Long Statement,BrightstarDB.Rdf,RdfDatatypes,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\RdfDatatypes.cs,GetRdfDatatype,The length of the statement  "            throw new ArgumentException(string.Format("The type {0} is not mapped to any known RDF datatype"' systemType.FullName)' nameof(systemType)); " is 140.
Long Statement,BrightstarDB.Rdf,RdfDatatypes,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\RdfDatatypes.cs,GetLiteralString,The length of the statement  "            throw new ArgumentException(string.Format("The type {0} is not mapped to any known RDF datatype"' value.GetType().FullName)' nameof(value)); " is 140.
Long Statement,BrightstarDB.Rdf,RdfDatatypes,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\RdfDatatypes.cs,ParseLiteralString,The length of the statement  "            throw new ArgumentException(string.Format("The datatype URI {0} is not mapped to any known RDF datatype"' literalDatatype)' nameof(literalDatatype)); " is 149.
Long Statement,BrightstarDB.Server,ExportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ExportJob.cs,GetWriterSink,The length of the statement  "            throw new BrightstarClientException(String.Format(Strings.ExportJob_UnsupportedExportFormat' exportFormat.MediaTypes[0])); " is 122.
Long Statement,BrightstarDB.Server,ImportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ImportJob.cs,Run,The length of the statement  "                Logging.LogInfo("Error processing import job on file " + _contentFileName + ". Error Message: " + ex.Message + " Stack trace: " + ex.StackTrace); " is 145.
Long Statement,BrightstarDB.Server,ImportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ImportJob.cs,Triple,The length of the statement  "            _importTripleSink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' obj' objIsBNode' objIsLiteral' dataType' langCode' graphUri); " is 140.
Long Statement,BrightstarDB.Server,ImportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ImportJob.cs,GetParser,The length of the statement  "            bool isGZiped = fileExtension.EndsWith(MimeTypesHelper.DefaultGZipExtension' StringComparison.InvariantCultureIgnoreCase); " is 122.
Long Statement,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,CreateStore,The length of the statement  "            var store = _storeManager.CreateStore(Path.Combine(_baseLocation' storeName)' persistenceType' true' _enableTransactionLogging); " is 128.
Long Statement,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,ProcessTransaction,The length of the statement  "            return storeWorker.ProcessTransaction(preconditions' notExistsPreconditions' deletePatterns' insertData' defaultGraphUri' "nt"' jobLabel); " is 138.
Long Statement,BrightstarDB.Server,ServerCoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCoreManager.cs,GetServerCore,The length of the statement  "                    var serverCore = new ServerCore(baseLocation' QueryCache' PersistenceType' serviceConfiguration.EnableTransactionLoggingOnNewStores); " is 133.
Long Statement,BrightstarDB.Server,StoreWorker,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\StoreWorker.cs,ProcessJobs,The length of the statement  "                                Logging.LogInfo("Job completed in {0} : Current memory usage : {1}"'et.Subtract(st).TotalMilliseconds' System.Diagnostics.Process.GetCurrentProcess().WorkingSet64 ); " is 165.
Long Statement,BrightstarDB.Server,StoreWorker,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\StoreWorker.cs,CreateSnapshot,The length of the statement  "            _storeManager.CreateSnapshot(_storeLocation' Path.Combine(_baseLocation' destinationStoreName)' persistenceType' commitPointId); " is 128.
Long Statement,BrightstarDB.Server,UpdateTransaction,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\UpdateTransaction.cs,Run,The length of the statement  "                        throw new PreconditionFailedException(preconditionSink.FailedPreconditionCount' preconditionSink.GetFailedPreconditions()' " is 122.
Long Statement,BrightstarDB.Server,UpdateTransaction,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\UpdateTransaction.cs,Run,The length of the statement  "                Logging.LogInfo("Preconditions failed in UpdateTransaction ({0}): Count={1}' Triples={2}"' JobId' ex.ExistenceFailureCount' ex.ExistenceFailedTriples); " is 151.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Insert,The length of the statement  "                var newChildNodeId = Insert(txnId' childNode' key' value' out childSplit' out rightChild' out childSplitKey' overwrite' profiler); " is 130.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTree,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTree.cs,Insert,The length of the statement  "                            // update child pointers if required (need to check both internalNode and rightNode as we don't know which side the modified child node ended up on) " is 148.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeBuilder.cs,Build,The length of the statement  "            var nodeList = MakeInternalNodes(txnId' MakeLeafNodes(txnId' orderedValues.GetEnumerator()' profiler)' profiler).ToList(); " is 122.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateStore,The length of the statement  "                    dataPageStore = new AppendOnlyFilePageStore(_persistenceManager' dataFilePath' PageSize' false' _storeConfiguration.DisableBackgroundWrites); " is 141.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateStore,The length of the statement  "                    dataPageStore = new BinaryFilePageStore(_persistenceManager' dataFilePath' PageSize' false' 0' 1' _storeConfiguration.DisableBackgroundWrites); " is 143.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateStore,The length of the statement  "            IPageStore resourcePageStore = new AppendOnlyFilePageStore(_persistenceManager' resourceFilePath' PageSize' false' _storeConfiguration.DisableBackgroundWrites); " is 160.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,OpenStore,The length of the statement  "                        dataPageStore = new AppendOnlyFilePageStore(_persistenceManager' dataFilePath' PageSize' readOnly' _storeConfiguration.DisableBackgroundWrites); " is 144.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,OpenStore,The length of the statement  "                var resourcePageStore = new AppendOnlyFilePageStore(_persistenceManager' resourceFilePath' PageSize' readOnly' _storeConfiguration.DisableBackgroundWrites); " is 156.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,OpenStore,The length of the statement  "            var commitPoint = GetMasterFile(storeLocation).GetCommitPoints().FirstOrDefault(cp => cp.LocationOffset == commitPointId); " is 122.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,OpenStore,The length of the statement  "                var pageStore = new AppendOnlyFilePageStore(_persistenceManager' dataFilePath' PageSize' true' _storeConfiguration.DisableBackgroundWrites); " is 140.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,OpenStore,The length of the statement  "                var resourceStore = new AppendOnlyFilePageStore(_persistenceManager' resourceFilePath' PageSize' true' _storeConfiguration.DisableBackgroundWrites); " is 148.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateConsolidationStore,The length of the statement  "                    return new AppendOnlyFilePageStore(_persistenceManager' storePath' PageSize' false' _storeConfiguration.DisableBackgroundWrites); " is 129.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateConsolidationStore,The length of the statement  "                    return new BinaryFilePageStore(_persistenceManager' storePath' PageSize' false' 0' 1' _storeConfiguration.DisableBackgroundWrites); " is 131.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateConsolidationStore,The length of the statement  "                    throw new NotImplementedException(String.Format("No support for creating consolidated store with persistence type {0}"' _storeConfiguration.PersistenceType)); " is 158.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateSnapshot,The length of the statement  "                        destPageStore = new BinaryFilePageStore(_persistenceManager' dataFilePath' PageSize' false' 0' 1' _storeConfiguration.DisableBackgroundWrites); " is 143.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,Split,The length of the statement  "            _config.BTreeDebug("LeafNode.Split. SplitKey={0}. NumToMove={1}. Structure Before: {2}"' splitKey.Dump()' numToMove' Dump()); " is 125.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,Scan,The length of the statement  "            // TODO: Replace this with a version that passes in a key/value buffer to fill instead of always creating a new KeyValuePair " is 124.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,Scan,The length of the statement  "            for (startOffset = BPlusTreeConfiguration.LeafNodeHeaderSize' startIx = 0; startOffset < endIx && _page.Data.Compare(startOffset' fromKey' 0' _config.KeySize) < 0; startOffset+=_config.KeySize' startIx++ ){} " is 207.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,StartNewPage,The length of the statement  "                _pageStore.Write(transactionId' _currentPage' BitConverter.GetBytes(nextPage.Id)' 0' _pageStore.PageSize-8' 8' profiler); " is 121.
Long Statement,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,BindSubjectObject,The length of the statement  "                        _subjectRelatedResourceIndex.EnumerateRelatedResources(sid' StoreConstants.NullUlong' graphs[0]).Where(r=>r.ResourceId == oid) " is 126.
Long Statement,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,EnumeratePredicateRelationships,The length of the statement  "                foreach(var entry in predicateIndex.Scan(MakePredicateIndexKey(0' 0' 0)' MakePredicateIndexKey(ulong.MaxValue' int.MaxValue' ulong.MaxValue)' profiler)) " is 152.
Long Statement,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,EnumerateAll,The length of the statement  "                foreach(var relatedResourceEntry in predicateIndexEntry.Value.Scan(MakePredicateIndexKey(0' 0' 0)' MakePredicateIndexKey(ulong.MaxValue' int.MaxValue' ulong.MaxValue)' profiler)) " is 178.
Long Statement,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,EnumeratePredicateIndexes,The length of the statement  "            return Scan(0ul' ulong.MaxValue' profiler).Select(predicateEntry => new KeyValuePair<ulong' PredicateRelatedResourceIndex>(predicateEntry.Key' GetPredicateIndex(predicateEntry.Key' BitConverter.ToUInt64(predicateEntry.Value' 0)' profiler))); " is 241.
Long Statement,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,WritePredicateIndexes,The length of the statement  "                yield return new KeyValuePair<byte[]' byte[]>(BitConverter.GetBytes(predicateId)' BitConverter.GetBytes(newPredicateIndexId)); " is 126.
Long Statement,BrightstarDB.Storage.BTreeStore,ObjectCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectCache.cs,TryGetValue,The length of the statement  "            return _lowPriorityItems.TryGetValue(id' out p); // _highPriorityItems.TryGetValue(id' out p); // || _lowPriorityItems.TryGetValue(id' out p); " is 142.
Long Statement,BrightstarDB.Storage.BTreeStore,PersistentBTree<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\PersistentBTree.cs,Insert,The length of the statement  "                Logging.LogWarning(BrightstarEventId.StorePerformanceWarning' "Long insert. Insert count={0}. Insert time={1}ms"' insertCount' " is 126.
Long Statement,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,DeleteTriple,The length of the statement  "            if (sid == StoreConstants.NullUlong || pid == StoreConstants.NullUlong || oid == StoreConstants.NullUlong || gid == StoreConstants.NullUlong) return; " is 149.
Long Statement,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,LoadObject,The length of the statement  "                    "Invalid object detected in LoadObject({0}). Attempted to load object from offset {1} and read in an object with ObjectId set to {2}."'  " is 135.
Long Statement,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,LoadObject,The length of the statement  "                throw new BrightstarInternalException(String.Format("Invalid object detected in LoadObject({0}). Attempted to load object from offset {1} and read in an object with ObjectId set to {2}."' objectId' offset' obj.ObjectId)); " is 221.
Long Statement,BrightstarDB.Storage,StoreManagerFactory,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\StoreManagerFactory.cs,GetStoreManager,The length of the statement  "            return storeConfiguration.UseIsolatedStorage ? (IStoreManager) new IsolatedStorageStoreManager(storeConfiguration) : new FileStoreManager(storeConfiguration); " is 158.
Long Statement,BrightstarDB.Storage,StoreManagerFactory,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\StoreManagerFactory.cs,GetStoreManager,The length of the statement  "            return storeConfiguration.UseIsolatedStorage ? new BPlusTreeStore.BPlusTreeStoreManager(storeConfiguration' new IsolatedStoragePersistanceManager()) : new BPlusTreeStore.BPlusTreeStoreManager(storeConfiguration' new FilePersistenceManager()); " is 242.
Long Statement,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,_MakeWriteable,The length of the statement  "            // Copy the read buffer for the immediately preceding transaction id to the other buffer for use in the write transaction " is 121.
Long Statement,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,Write,The length of the statement  "                Logging.LogDebug("BinaryFilePage: Write {0} [{1}|{2}] @ txn {3}"' Id' FirstTransactionId' SecondTransactionId' currentTransactionId); " is 133.
Long Statement,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,Preload,The length of the statement  "            // TODO: This is a bit unsatisfactory' it would be better to scan through the tree loading the internal nodes in a breadth-first manner " is 135.
Long Statement,BrightstarDB.Storage.Persistence,BlockProviderStream,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BlockProviderStream.cs,Read,The length of the statement  "                            "Read(buff' {0}' {1}) about to fail. Block provider reports block with offset {2} as active block and internal length is {3}. AvailableByteCount={4}"' " is 150.
Long Statement,BrightstarDB.Storage.Persistence,BlockProviderStream,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BlockProviderStream.cs,Read,The length of the statement  "                                 "Error in BlockProviderStream.Read. Path is {0}' _pos={1}' _blockOffset={2}' _blockLength={3}. Read called with count={4}. Exception: {5}"' " is 139.
Long Statement,BrightstarDB.Storage.Persistence,BlockProviderStream,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BlockProviderStream.cs,Write,The length of the statement  "                    String.Format("Block files are append only. Asked to write to block with offset {0} but active block offset is {1}"' _blockOffset' activeOffset)); " is 146.
Long Statement,BrightstarDB.Utils,IndexedCircularBuffer<TKey;TValue>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\CircularBufferIndex.cs,Insert,The length of the statement  "                    Logging.LogError(BrightstarEventId.Undefined' "Key and value buffers got out of sync. Resetting IndexedCircularBuffer"); " is 120.
Long Statement,BrightstarDB.Utils,SparqlQueryHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\SparqlQueryHelper.cs,GetResultModel,The length of the statement  "            if (sparqlQuery == null) throw new ArgumentNullException("sparqlQuery"' Strings.BrightstarServiceClient_QueryMustNotBeNull); " is 124.
Long Statement,BrightstarDB.Utils,SparqlQueryHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\SparqlQueryHelper.cs,GetResultModel,The length of the statement  "            if (String.IsNullOrEmpty(sparqlQuery)) throw new ArgumentException(Strings.BrightstarServiceClient_QueryMustNotBeEmptyString' "sparqlQuery"); " is 141.
Long Statement,Remotion.Linq.Clauses,FromClauseBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\FromClauseBase.cs,ToString,The length of the statement  "      var result = string.Format ("from {0} {1} in {2}"' ItemType.Name' ItemName' FormattingExpressionTreeVisitor.Format (FromExpression)); " is 133.
Long Statement,Remotion.Linq.Clauses,Ordering,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\Ordering.cs,ToString,The length of the statement  "      return FormattingExpressionTreeVisitor.Format (Expression) + (OrderingDirection == OrderingDirection.Asc ? " asc" : " desc"); " is 125.
Long Statement,Remotion.Linq.Clauses,QuerySourceMapping,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\QuerySourceMapping.cs,ReplaceMapping,The length of the statement  "        throw new InvalidOperationException ("Query source has not been associated with an expression' cannot replace its mapping."); " is 125.
Long Statement,Remotion.Linq.Clauses,ResultOperatorBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperatorBase.cs,InvokeExecuteMethod,The length of the statement  "        var message = string.Format ("Cannot call method '{0}' on input of type '{1}': {2}"' method.Name' input.GetType ()' ex.Message); " is 128.
Long Statement,Remotion.Linq.Clauses,ResultOperatorBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperatorBase.cs,CheckSequenceItemType,The length of the statement  "        throw new ArgumentTypeException (message' "inputInfo"' typeof (IEnumerable<>).MakeGenericType (expectedItemType)' sequenceInfo.ItemExpression.Type); " is 148.
Long Statement,Remotion.Linq.Clauses.ExpressionTreeVisitors,AccessorFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ExpressionTreeVisitors\AccessorFindingExpressionTreeVisitor.cs,FindAccessorLambda,The length of the statement  "            "The given expression '{0}' does not contain the searched expression '{1}' in a nested NewExpression with member assignments or a " " is 131.
Long Statement,Remotion.Linq.Clauses.ExpressionTreeVisitors,ReferenceReplacingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ExpressionTreeVisitors\ReferenceReplacingExpressionTreeVisitor.cs,ReplaceClauseReferences,The length of the statement  "      return new ReferenceReplacingExpressionTreeVisitor (querySourceMapping' throwOnUnmappedReferences).VisitExpression (expression); " is 128.
Long Statement,Remotion.Linq.Clauses.ExpressionTreeVisitors,ReferenceReplacingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ExpressionTreeVisitors\ReferenceReplacingExpressionTreeVisitor.cs,VisitQuerySourceReferenceExpression,The length of the statement  "        var message = "Cannot replace reference to clause '" + expression.ReferencedQuerySource.ItemName + "'' there is no mapped expression."; " is 135.
Long Statement,Remotion.Linq.Clauses.ExpressionTreeVisitors,ReferenceReplacingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ExpressionTreeVisitors\ReferenceReplacingExpressionTreeVisitor.cs,VisitSubQueryExpression,The length of the statement  "      expression.QueryModel.TransformExpressions (ex => ReplaceClauseReferences (ex' _querySourceMapping' _throwOnUnmappedReferences)); " is 129.
Long Statement,Remotion.Linq.Clauses.ExpressionTreeVisitors,ReverseResolvingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ExpressionTreeVisitors\ReverseResolvingExpressionTreeVisitor.cs,VisitQuerySourceReferenceExpression,The length of the statement  "        var accessorLambda = AccessorFindingExpressionTreeVisitor.FindAccessorLambda (expression' _itemExpression' _lambdaParameter); " is 125.
Long Statement,Remotion.Linq.Clauses.ExpressionTreeVisitors,ReverseResolvingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ExpressionTreeVisitors\ReverseResolvingExpressionTreeVisitor.cs,VisitQuerySourceReferenceExpression,The length of the statement  "            "Cannot create a LambdaExpression that retrieves the value of '{0}' from items with a structure of '{1}'. The item expression does not " " is 136.
Long Statement,Remotion.Linq.Clauses.ResultOperators,AggregateFromSeedResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\AggregateFromSeedResultOperator.cs,GetOutputDataInfo,The length of the statement  "            "The seed expression and the aggregating function don't have matching types. The seed is of type '{0}'' but the function aggregates '{1}'."' " is 140.
Long Statement,Remotion.Linq.Clauses.ResultOperators,AggregateFromSeedResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\AggregateFromSeedResultOperator.cs,GetOutputDataInfo,The length of the statement  "      var resultTransformedType = OptionalResultSelector != null ? OptionalResultSelector.Type.GetGenericArguments ()[0] : null; " is 122.
Long Statement,Remotion.Linq.Clauses.ResultOperators,AggregateFromSeedResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\AggregateFromSeedResultOperator.cs,GetOutputDataInfo,The length of the statement  "            "The aggregating function and the result selector don't have matching types. The function aggregates type '{0}'' but the result selector " " is 138.
Long Statement,Remotion.Linq.Clauses.ResultOperators,AverageResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\AverageResultOperator.cs,ExecuteInMemory,The length of the statement  "      var method = typeof (Enumerable).GetMethod ("Average"' BindingFlags.Public | BindingFlags.Static' null' new[] { typeof (IEnumerable<T>) }' null); " is 145.
Long Statement,Remotion.Linq.Clauses.ResultOperators,AverageResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\AverageResultOperator.cs,ExecuteInMemory,The length of the statement  "      Debug.Assert (GetOutputDataInfo (input.DataInfo).DataType == method.ReturnType' "ReturnType of method matches return type of this operator"); " is 141.
Long Statement,Remotion.Linq.Clauses.ResultOperators,CastResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\CastResultOperator.cs,ExecuteInMemory,The length of the statement  "      var castMethod = typeof (Enumerable).GetMethod ("Cast"' new[] { typeof (IEnumerable) }).MakeGenericMethod (CastItemType); " is 121.
Long Statement,Remotion.Linq.Clauses.ResultOperators,ContainsResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\ContainsResultOperator.cs,GetOutputDataInfo,The length of the statement  "        throw new ArgumentTypeException (message' "inputInfo"' typeof (IEnumerable<>).MakeGenericType (Item.Type)' sequenceInfo.ItemExpression.Type); " is 141.
Long Statement,Remotion.Linq.Clauses.ResultOperators,DefaultIfEmptyResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\DefaultIfEmptyResultOperator.cs,ExecuteInMemory,The length of the statement  "          OptionalDefaultValue != null ? sequence.DefaultIfEmpty ((T) GetConstantOptionalDefaultValue ()) : sequence.DefaultIfEmpty (); " is 125.
Long Statement,Remotion.Linq.Clauses.ResultOperators,GroupResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\GroupResultOperator.cs,ExecuteGroupingInMemory,The length of the statement  "      var keySelectorLambda = ReverseResolvingExpressionTreeVisitor.ReverseResolve (input.DataInfo.ItemExpression' KeySelector); " is 122.
Long Statement,Remotion.Linq.Clauses.ResultOperators,GroupResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\GroupResultOperator.cs,ExecuteGroupingInMemory,The length of the statement  "      var elementSelectorLambda = ReverseResolvingExpressionTreeVisitor.ReverseResolve (input.DataInfo.ItemExpression' ElementSelector); " is 130.
Long Statement,Remotion.Linq.Clauses.ResultOperators,OfTypeResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\OfTypeResultOperator.cs,ExecuteInMemory,The length of the statement  "      var castMethod = typeof (Enumerable).GetMethod ("OfType"' new[] { typeof (IEnumerable) }).MakeGenericMethod (SearchedItemType); " is 127.
Long Statement,Remotion.Linq.Clauses.ResultOperators,SequenceTypePreservingResultOperatorBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\SequenceTypePreservingResultOperatorBase.cs,GetOutputDataInfo,The length of the statement  "      return new StreamedSequenceInfo (typeof (IQueryable<>).MakeGenericType (inputSequenceInfo.ItemExpression.Type)' inputSequenceInfo.ItemExpression); " is 146.
Long Statement,Remotion.Linq.Clauses.ResultOperators,SumResultOperator,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\ResultOperators\SumResultOperator.cs,ExecuteInMemory,The length of the statement  "      var method = typeof (Enumerable).GetMethod ("Sum"' BindingFlags.Public | BindingFlags.Static' null' new[] { typeof (IEnumerable<T>) }' null); " is 141.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedScalarValueInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedScalarValueInfo.cs,ExecuteQueryModel,The length of the statement  "      // wrap executeMethod into a delegate instead of calling Invoke in order to allow for exceptions that are bubbled up correctly " is 126.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedSequenceInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedSequenceInfo.cs,MakeClosedGenericExecuteMethod,The length of the statement  "        throw new ArgumentException ("GenericMethodDefinition must be a generic method definition."' "genericMethodDefinition"); " is 120.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedSequenceInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedSequenceInfo.cs,MakeClosedGenericExecuteMethod,The length of the statement  "        throw new ArgumentException ("GenericMethodDefinition must have exactly one generic parameter."' "genericMethodDefinition"); " is 124.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedSequenceInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedSequenceInfo.cs,ExecuteQueryModel,The length of the statement  "      // wrap executeMethod into a delegate instead of calling Invoke in order to allow for exceptions that are bubbled up correctly " is 126.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedSingleValueInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedSingleValueInfo.cs,ExecuteQueryModel,The length of the statement  "      // wrap executeMethod into a delegate instead of calling Invoke in order to allow for exceptions that are bubbled up correctly " is 126.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedValue,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedValue.cs,GetTypedValue,The length of the statement  "        string message = string.Format ("Cannot retrieve the current value as type '{0}' because it is null."' typeof (T).FullName); " is 124.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedValueInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedValueInfo.cs,AdjustDataType,The length of the statement  "        var message = string.Format ("'{0}' cannot be used as the new data type for a value of type '{1}'."' dataType' DataType); " is 121.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedValueInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedValueInfo.cs,MakeClosedGenericExecuteMethod,The length of the statement  "        throw new ArgumentException ("GenericMethodDefinition must be a generic method definition."' "genericMethodDefinition"); " is 120.
Long Statement,Remotion.Linq.Clauses.StreamedData,StreamedValueInfo,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Clauses\StreamedData\StreamedValueInfo.cs,MakeClosedGenericExecuteMethod,The length of the statement  "        throw new ArgumentException ("GenericMethodDefinition must have exactly one generic parameter."' "genericMethodDefinition"); " is 124.
Long Statement,Remotion.Linq.Collections,ObservableCollection<T>,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Collections\ObservableCollection.cs,AsChangeResistantEnumerableWithIndex,The length of the statement  "      using (var enumerator = (ChangeResistantObservableCollectionEnumerator<T>) AsChangeResistantEnumerable ().GetEnumerator ()) " is 123.
Long Statement,Remotion.Linq,DefaultQueryProvider,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\DefaultQueryProvider.cs,CheckQueryableType,The length of the statement  "            "Expected the generic type definition of an implementation of IQueryable<T> with exactly one type argument' but found {0} arguments."' " is 134.
Long Statement,Remotion.Linq,QueryModel,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\QueryModel.cs,GetOutputDataInfo,The length of the statement  "          .Aggregate ((IStreamedDataInfo) SelectClause.GetOutputDataInfo ()' (current' resultOperator) => resultOperator.GetOutputDataInfo (current)); " is 140.
Long Statement,Remotion.Linq,QueryModel,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\QueryModel.cs,Clone,The length of the statement  "      clone.TransformExpressions (ex => CloningExpressionTreeVisitor.AdjustExpressionAfterCloning (ex' cloneContext.QuerySourceMapping)); " is 131.
Long Statement,Remotion.Linq,QueryModelBuilder,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\QueryModelBuilder.cs,AddClause,The length of the statement  "          "Cannot add clause of type '{0}' to a query model. Only instances of IBodyClause' MainFromClause' or ISelectGroupClause are supported."' " is 136.
Long Statement,Remotion.Linq,QueryProviderBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\QueryProviderBase.cs,CreateQuery,The length of the statement  "      return (IQueryable) s_genericCreateQueryMethod.MakeGenericMethod (elementType).Invoke (this' new object[] { expression }); " is 122.
Long Statement,Remotion.Linq,ReflectionUtility,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\ReflectionUtility.cs,GetMethod,The length of the statement  "      throw new ArgumentException (string.Format ("Cannot extract a method from the given expression '{0}'."' wrappedCall.Body)' "wrappedCall"); " is 138.
Long Statement,Remotion.Linq.EagerFetching,FetchManyRequest,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\EagerFetching\FetchManyRequest.cs,ModifyFetchQueryModel,The length of the statement  "      var fromExpression = Expression.MakeMemberAccess (new QuerySourceReferenceExpression (fetchQueryModel.MainFromClause)' RelationMember); " is 135.
Long Statement,Remotion.Linq.EagerFetching,FetchManyRequest,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\EagerFetching\FetchManyRequest.cs,ModifyFetchQueryModel,The length of the statement  "      var memberFromClause = new AdditionalFromClause (fetchQueryModel.GetNewName ("#fetch")' _relatedObjectType' fromExpression); " is 124.
Long Statement,Remotion.Linq.EagerFetching,FetchOneRequest,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\EagerFetching\FetchOneRequest.cs,ModifyFetchQueryModel,The length of the statement  "      fetchQueryModel.SelectClause.Selector = Expression.MakeMemberAccess (fetchQueryModel.SelectClause.Selector' RelationMember); " is 124.
Long Statement,Remotion.Linq.EagerFetching,FetchRequestBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\EagerFetching\FetchRequestBase.cs,CreateFetchQueryModel,The length of the statement  "            "The given source query model selects items that do not match the fetch request. In order to fetch the relation member '{0}'' the query " " is 137.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitAndConvert,The length of the statement  "            "When called from '{0}'' expressions of type '{1}' can only be replaced with other non-null expressions of type '{2}'."' " is 120.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitList,The length of the statement  "          throw new NotSupportedException ("The current list only supports objects of type '" + typeof (T).Name + "' as its elements."); " is 126.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitUnknownNonExtensionExpression,The length of the statement  "      var message = string.Format ("Expression type '{0}' is not supported by this {1}."' expression.GetType().Name' GetType ().Name); " is 128.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "        return Expression.MakeBinary (expression.NodeType' newLeft' newRight' expression.IsLiftedToNull' expression.Method' newConversion); " is 131.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitLambdaExpression,The length of the statement  "      ReadOnlyCollection<ParameterExpression> newParameters = VisitAndConvert (expression.Parameters' "VisitLambdaExpression"); " is 121.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitNewExpression,The length of the statement  "          return Expression.New (expression.Constructor' AdjustArgumentsForNewExpression (newArguments' expression.Members)' expression.Members); " is 135.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitListInitExpression,The length of the statement  "        throw new NotSupportedException ("ListInitExpressions only support non-null instances of type 'NewExpression' as their NewExpression member."); " is 143.
Long Statement,Remotion.Linq.Parsing,ExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitor.cs,VisitMemberBinding,The length of the statement  "              memberBinding.BindingType == MemberBindingType.ListBinding' "Invalid member binding type " + memberBinding.GetType().FullName); " is 127.
Long Statement,Remotion.Linq.Parsing,ParserException,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ParserException.cs,CreateMessage,The length of the statement  "        return string.Format ("Expected {0} for {1}' found '{2}' ({3})."' expected' context' expression' expression.GetType ().Name); " is 125.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitExtensionExpression,The length of the statement  "        return VisitUnhandledItem<ExtensionExpression' Expression> (expression' "VisitExtensionExpression"' BaseVisitExtensionExpression); " is 130.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitUnknownNonExtensionExpression,The length of the statement  "      return VisitUnhandledItem<Expression' Expression> (expression' "VisitUnknownNonExtensionExpression"' BaseVisitUnknownNonExtensionExpression); " is 141.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "      return VisitUnhandledItem<BinaryExpression' Expression> (expression' "VisitBinaryExpression"' BaseVisitBinaryExpression); " is 121.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitTypeBinaryExpression,The length of the statement  "      return VisitUnhandledItem<TypeBinaryExpression' Expression> (expression' "VisitTypeBinaryExpression"' BaseVisitTypeBinaryExpression); " is 133.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitConstantExpression,The length of the statement  "      return VisitUnhandledItem<ConstantExpression' Expression> (expression' "VisitConstantExpression"' BaseVisitConstantExpression); " is 127.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitConditionalExpression,The length of the statement  "      return VisitUnhandledItem<ConditionalExpression' Expression> (expression' "VisitConditionalExpression"' BaseVisitConditionalExpression); " is 136.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitParameterExpression,The length of the statement  "      return VisitUnhandledItem<ParameterExpression' Expression> (expression' "VisitParameterExpression"' BaseVisitParameterExpression); " is 130.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitLambdaExpression,The length of the statement  "      return VisitUnhandledItem<LambdaExpression' Expression> (expression' "VisitLambdaExpression"' BaseVisitLambdaExpression); " is 121.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitMethodCallExpression,The length of the statement  "      return VisitUnhandledItem<MethodCallExpression' Expression> (expression' "VisitMethodCallExpression"' BaseVisitMethodCallExpression); " is 133.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitInvocationExpression,The length of the statement  "      return VisitUnhandledItem<InvocationExpression' Expression> (expression' "VisitInvocationExpression"' BaseVisitInvocationExpression); " is 133.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitMemberExpression,The length of the statement  "      return VisitUnhandledItem<MemberExpression' Expression> (expression' "VisitMemberExpression"' BaseVisitMemberExpression); " is 121.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitNewArrayExpression,The length of the statement  "      return VisitUnhandledItem<NewArrayExpression' Expression> (expression' "VisitNewArrayExpression"' BaseVisitNewArrayExpression); " is 127.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitMemberInitExpression,The length of the statement  "      return VisitUnhandledItem<MemberInitExpression' Expression> (expression' "VisitMemberInitExpression"' BaseVisitMemberInitExpression); " is 133.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitListInitExpression,The length of the statement  "      return VisitUnhandledItem<ListInitExpression' Expression> (expression' "VisitListInitExpression"' BaseVisitListInitExpression); " is 127.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitMemberAssignment,The length of the statement  "      return VisitUnhandledItem<MemberAssignment' MemberBinding> (memberAssigment' "VisitMemberAssignment"' BaseVisitMemberAssignment); " is 129.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitMemberMemberBinding,The length of the statement  "      return VisitUnhandledItem<MemberMemberBinding' MemberBinding> (binding' "VisitMemberMemberBinding"' BaseVisitMemberMemberBinding); " is 130.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitMemberListBinding,The length of the statement  "      return VisitUnhandledItem<MemberListBinding' MemberBinding> (listBinding' "VisitMemberListBinding"' BaseVisitMemberListBinding); " is 128.
Long Statement,Remotion.Linq.Parsing,ThrowingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ThrowingExpressionTreeVisitor.cs,VisitSubQueryExpression,The length of the statement  "      return VisitUnhandledItem<SubQueryExpression' Expression> (expression' "VisitSubQueryExpression"' BaseVisitSubQueryExpression); " is 127.
Long Statement,Remotion.Linq.Parsing,TupleExpressionBuilder,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\TupleExpressionBuilder.cs,GetExpressionsFromTuple,The length of the statement  "      while (tupleExpression.Type.IsGenericType && tupleExpression.Type.GetGenericTypeDefinition() == typeof (KeyValuePair<'>)) " is 121.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.MemberBindings,PropertyInfoBinding,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\MemberBindings\PropertyInfoBinding.cs,MatchesReadAccess,The length of the statement  "      if (methodInfo != null && ((PropertyInfo) BoundMember).CanRead && methodInfo == ((PropertyInfo) BoundMember).GetGetMethod()) " is 124.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors,PartialEvaluatingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\PartialEvaluatingExpressionTreeVisitor.cs,EvaluateSubtree,The length of the statement  "        Expression<Func<object>> lambdaWithoutParameters = Expression.Lambda<Func<object>> (Expression.Convert (subtree' typeof (object))); " is 131.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors,SubQueryFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\SubQueryFindingExpressionTreeVisitor.cs,VisitExpression,The length of the statement  "      if (potentialQueryOperatorExpression != null && _nodeTypeProvider.IsRegistered (potentialQueryOperatorExpression.Method)) " is 121.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors,TransparentIdentifierRemovingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TransparentIdentifierRemovingExpressionTreeVisitor.cs,ReplaceTransparentIdentifiers,The length of the statement  "        expressionAfterRemove = new TransparentIdentifierRemovingExpressionTreeVisitor().VisitExpression (expressionAfterRemove); " is 121.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation,ExpressionTransformerRegistry,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\ExpressionTransformerRegistry.cs,TransformExpression,The length of the statement  "                "A '{0}' with node type '{1}' cannot be handled by the IExpressionTransformer<{2}>. The transformer was probably registered for " " is 129.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,MemberAddingNewExpressionTransformerBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\MemberAddingNewExpressionTransformerBase.cs,GetMemberForNewExpression,The length of the statement  "      // In .NET 4' Expression.New (...) will convert the get method into a property. That way' the generated NewExpression will look exactly like " is 140.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,NullableValueTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\NullableValueTransformer.cs,IsDeclaredByNullableType,The length of the statement  "      return memberInfo.DeclaringType.IsGenericType && memberInfo.DeclaringType.GetGenericTypeDefinition() == typeof (Nullable<>); " is 124.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,TupleNewExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\TupleNewExpressionTransformer.cs,GetMembers,The length of the statement  "      return arguments.Select ((expr' i) => GetMemberForNewExpression (constructorInfo.DeclaringType' "Item" + (i + 1))).ToArray (); " is 126.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,Transform,The length of the statement  "      if (leftSideAsMethodCallExpression != null && (IsVBOperator (leftSideAsMethodCallExpression.Method' c_vbCompareStringOperatorMethodName))) " is 138.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,Transform,The length of the statement  "            rightSideAsConstantExpression != null && rightSideAsConstantExpression.Value is Int32 && (int) rightSideAsConstantExpression.Value == 0' " is 136.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The length of the statement  "          binaryExpression = Expression.Equal (leftSideAsMethodCallExpression.Arguments[0]' leftSideAsMethodCallExpression.Arguments[1]); " is 127.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The length of the statement  "          binaryExpression = Expression.NotEqual (leftSideAsMethodCallExpression.Arguments[0]' leftSideAsMethodCallExpression.Arguments[1]); " is 130.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The length of the statement  "      var vbExpression = new VBStringComparisonExpression (methodCallExpression' (bool) leftSideArgument2AsConstantExpression.Value); " is 127.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The length of the statement  "          string.Format ("Binary expression with node type '{0}' is not supported in a VB string comparison."' expression.NodeType)); " is 123.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBInformationIsNothingExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBInformationIsNothingExpressionTransformer.cs,IsVBIsNothing,The length of the statement  "      return operatorMethod.DeclaringType.FullName == c_vbInformationClassName && operatorMethod.Name == c_vbIsNothingMethodName; " is 123.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation,EvaluatableTreeFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TreeEvaluation\EvaluatableTreeFindingExpressionTreeVisitor.cs,VisitExpression,The length of the statement  "      // To find these nodes' first assume that the current subtree is evaluatable iff it is one of the standard nodes. Store the evaluatability  " is 138.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation,EvaluatableTreeFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TreeEvaluation\EvaluatableTreeFindingExpressionTreeVisitor.cs,VisitExpression,The length of the statement  "      // Then call the specific Visit... method for this expression. This will determine if this node by itself is not evaluatable by setting  " is 135.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation,EvaluatableTreeFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TreeEvaluation\EvaluatableTreeFindingExpressionTreeVisitor.cs,VisitExpression,The length of the statement  "      // _isCurrentSubtreeEvaluatable to false if it isn't. It will also investigate the evaluatability info of the child nodes and set  " is 129.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation,EvaluatableTreeFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TreeEvaluation\EvaluatableTreeFindingExpressionTreeVisitor.cs,VisitExpression,The length of the statement  "      _isCurrentSubtreeEvaluatable &= isParentNodeEvaluatable; // the _isCurrentSubtreeEvaluatable flag now relates to the parent node again " is 134.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation,EvaluatableTreeFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TreeEvaluation\EvaluatableTreeFindingExpressionTreeVisitor.cs,VisitMemberInitExpression,The length of the statement  "      // Visit the NewExpression only if the List initializers is evaluatable. It makes no sense to evaluate the ListExpression if the initializers " is 141.
Long Statement,Remotion.Linq.Parsing.ExpressionTreeVisitors.TreeEvaluation,EvaluatableTreeFindingExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\TreeEvaluation\EvaluatableTreeFindingExpressionTreeVisitor.cs,VisitListInitExpression,The length of the statement  "      // Visit the NewExpression only if the List initializers is evaluatable. It makes no sense to evaluate the NewExpression if the initializers " is 140.
Long Statement,Remotion.Linq.Parsing.Structure,ExpressionTreeParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\ExpressionTreeParser.cs,ParseNonQueryOperatorExpression,The length of the statement  "            "Cannot parse expression '{0}' as it has an unsupported type. Only query sources (that is' expressions that implement IEnumerable) " " is 132.
Long Statement,Remotion.Linq.Parsing.Structure,MethodCallExpressionParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\MethodCallExpressionParser.cs,ProcessArgumentExpression,The length of the statement  "      // First' convert the argument expressions to their actual values - this unwraps ConstantantExpressions and UnaryExpressions " is 124.
Long Statement,Remotion.Linq.Parsing.Structure,MethodCallExpressionParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\MethodCallExpressionParser.cs,ProcessArgumentExpression,The length of the statement  "      var parametersWithSubQueriesDetected = SubQueryFindingExpressionTreeVisitor.Process (convertedParameters' _nodeTypeProvider); " is 125.
Long Statement,Remotion.Linq.Parsing.Structure,MethodCallExpressionParser,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\MethodCallExpressionParser.cs,UnwrapArgumentExpression,The length of the statement  "      // Each argument of a MethodCallExpression will either be a UnaryExpression/Quote' which represents an expression passed to a Queryable method' " is 143.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,AggregateExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\AggregateExpressionNode.cs,GetResolvedFunc,The length of the statement  "          r => Expression.Lambda (r.GetResolvedExpression (Func.Body' Func.Parameters[1]' clauseGenerationContext)' Func.Parameters[0])); " is 127.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,AggregateFromSeedExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\AggregateFromSeedExpressionNode.cs,GetResolvedFunc,The length of the statement  "          r => Expression.Lambda (r.GetResolvedExpression (Func.Body' Func.Parameters[1]' clauseGenerationContext)' Func.Parameters[0])); " is 127.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,AllExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\AllExpressionNode.cs,GetResolvedPredicate,The length of the statement  "      return _cachedPredicate.GetOrCreate (r => r.GetResolvedExpression (Predicate.Body' Predicate.Parameters[0]' clauseGenerationContext)); " is 134.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,CastExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\CastExpressionNode.cs,Resolve,The length of the statement  "      var expressionWithCast = ReplacingExpressionTreeVisitor.Replace (inputParameter' convertExpression' expressionToBeResolved); " is 124.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,DefaultIfEmptyExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\DefaultIfEmptyExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,DistinctExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\DistinctExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ExceptExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ExceptExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ExpressionResolver,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ExpressionResolver.cs,GetResolvedExpression,The length of the statement  "      resolvedExpression = TransparentIdentifierRemovingExpressionTreeVisitor.ReplaceTransparentIdentifiers (resolvedExpression); " is 123.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByExpressionNode.cs,GetResolvedKeySelector,The length of the statement  "      return _cachedKeySelector.GetOrCreate (r => r.GetResolvedExpression (KeySelector.Body' KeySelector.Parameters[0]' clauseGenerationContext)); " is 140.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByExpressionNode.cs,GetResolvedOptionalElementSelector,The length of the statement  "              r => r.GetResolvedExpression (OptionalElementSelector.Body' OptionalElementSelector.Parameters[0]' clauseGenerationContext)); " is 125.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByExpressionNode.cs,CreateResultOperator,The length of the statement  "        resolvedElementSelector = Source.Resolve (KeySelector.Parameters[0]' KeySelector.Parameters[0]' clauseGenerationContext); " is 121.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateParseInfoWithGroupNode,The length of the statement  "      var simulatedParseInfo = new MethodCallExpressionParseInfo(parseInfo.AssociatedIdentifier' parseInfo.Source' simulatedGroupByCallWithoutResultSelector); " is 152.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateParseInfoWithGroupNode,The length of the statement  "      return new MethodCallExpressionParseInfo (parseInfo.AssociatedIdentifier' groupBySourceNode' parseInfo.ParsedExpression); " is 121.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateSelectorForSelectNode,The length of the statement  "      // If there is an element selector' the element type will be that returned by the element selector. Otherwise' it will be the type flowing into " is 143.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateSelectorForSelectNode,The length of the statement  "      var bodyWithGroupingAndKeyReplaced = MultiReplacingExpressionTreeVisitor.Replace (expressionMapping' resultSelector.Body); " is 122.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupJoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupJoinExpressionNode.cs,GetResolvedResultSelector,The length of the statement  "          QuerySourceExpressionNodeUtility.ReplaceParameterWithReference (this' ResultSelector.Parameters[1]' ResultSelector.Body' clauseGenerationContext)' " is 146.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupJoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupJoinExpressionNode.cs,Resolve,The length of the statement  "      // so we first resolve the result selector' then we substitute the result for the inputParameter in the expressionToBeResolved " is 126.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupJoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupJoinExpressionNode.cs,ApplyNodeSpecificSemantics,The length of the statement  "      var groupJoinClause = new GroupJoinClause (ResultSelector.Parameters[1].Name' ResultSelector.Parameters[1].Type' joinClause); " is 125.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,IntersectExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\IntersectExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,JoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\JoinExpressionNode.cs,GetResolvedResultSelector,The length of the statement  "          QuerySourceExpressionNodeUtility.ReplaceParameterWithReference (this' ResultSelector.Parameters[1]' ResultSelector.Body' clauseGenerationContext)' " is 146.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,JoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\JoinExpressionNode.cs,Resolve,The length of the statement  "      // so we first resolve the result selector' then we substitute the result for the inputParameter in the expressionToBeResolved " is 126.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,JoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\JoinExpressionNode.cs,ApplyNodeSpecificSemantics,The length of the statement  "      // The resolved inner key selector has a back-reference to the clause' so we need to create the clause with a dummy selector before we can  " is 138.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MainSourceExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MainSourceExpressionNode.cs,Apply,The length of the statement  "        throw new ArgumentException ("QueryModel has to be null because MainSourceExpressionNode marks the start of a query."' "queryModel"); " is 133.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeBase.cs,WrapQueryModel,The length of the statement  "      // change the Source of this node so that Resolve will later correctly go to the new main from clause we create for the sub query " is 129.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeBase.cs,CreateResolveNotSupportedException,The length of the statement  "              GetType().Name + " does not support resolving of expressions' because it does not stream any data to the following node."); " is 123.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeBase.cs,CreateOutputParameterNotSupportedException,The length of the statement  "              GetType().Name + " does not support creating a parameter for its output because it does not stream any data to the following node."); " is 133.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeFactory,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeFactory.cs,CreateExpressionNode,The length of the statement  "            "Expression node type '{0}' contains too many constructors. It must only contain a single constructor' allowing null to be passed for any optional arguments."' " is 159.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeFactory,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeFactory.cs,GetArgumentMismatchMessage,The length of the statement  "            "{0} If you tried to pass a delegate instead of a LambdaExpression' this is not supported because delegates are not parsable expressions."' " is 139.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,MethodCallExpressionNodeFactory,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\MethodCallExpressionNodeFactory.cs,GetParameterArray,The length of the statement  "            "The constructor of expression node type '{0}' only takes {1} parameters' but you specified {2} (including the parse info parameter)."' " is 135.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,OfTypeExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\OfTypeExpressionNode.cs,Resolve,The length of the statement  "      var expressionWithCast = ReplacingExpressionTreeVisitor.Replace (inputParameter' convertExpression' expressionToBeResolved); " is 124.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,OrderByDescendingExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\OrderByDescendingExpressionNode.cs,GetResolvedKeySelector,The length of the statement  "      return _cachedSelector.GetOrCreate (r => r.GetResolvedExpression (KeySelector.Body' KeySelector.Parameters[0]' clauseGenerationContext)); " is 137.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,OrderByDescendingExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\OrderByDescendingExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,OrderByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\OrderByExpressionNode.cs,GetResolvedKeySelector,The length of the statement  "      return _cachedSelector.GetOrCreate (r => r.GetResolvedExpression (KeySelector.Body' KeySelector.Parameters[0]' clauseGenerationContext)); " is 137.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,OrderByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\OrderByExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,QuerySourceExpressionNodeUtility,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\QuerySourceExpressionNodeUtility.cs,GetQuerySourceForNode,The length of the statement  "            "Cannot retrieve an IQuerySource for the given {0}. Be sure to call Apply before calling methods that require IQuerySources' and pass in " " is 138.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ResultOperatorExpressionNodeBase,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ResultOperatorExpressionNodeBase.cs,WrapQueryModelAfterEndOfQuery,The length of the statement  "      // Result operators can safely be appended to the previous query model even after another result operator' so do not wrap the previous " is 134.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ReverseExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ReverseExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,SelectExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SelectExpressionNode.cs,GetResolvedSelector,The length of the statement  "      return _cachedSelector.GetOrCreate (r => r.GetResolvedExpression (Selector.Body' Selector.Parameters[0]' clauseGenerationContext)); " is 131.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,SelectManyExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SelectManyExpressionNode.cs,GetResolvedResultSelector,The length of the statement  "      // we resolve the selector by first substituting j by a QuerySourceReferenceExpression pointing back to us' before asking the previous node  " is 139.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,SelectManyExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SelectManyExpressionNode.cs,GetResolvedResultSelector,The length of the statement  "                   QuerySourceExpressionNodeUtility.ReplaceParameterWithReference (this' ResultSelector.Parameters[1]' ResultSelector.Body' clauseGenerationContext)' " is 146.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,SelectManyExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SelectManyExpressionNode.cs,Resolve,The length of the statement  "      // so we first resolve the result selector' then we substitute the result for the inputParameter in the expressionToBeResolved " is 126.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,SelectManyExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SelectManyExpressionNode.cs,ApplyNodeSpecificSemantics,The length of the statement  "      var clause = new AdditionalFromClause (ResultSelector.Parameters[1].Name' ResultSelector.Parameters[1].Type' resolvedCollectionSelector); " is 137.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,SkipExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SkipExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,TakeExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\TakeExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ThenByDescendingExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ThenByDescendingExpressionNode.cs,GetResolvedKeySelector,The length of the statement  "      return _cachedSelector.GetOrCreate (r => r.GetResolvedExpression (KeySelector.Body' KeySelector.Parameters[0]' clauseGenerationContext)); " is 137.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ThenByDescendingExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ThenByDescendingExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ThenByDescendingExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ThenByDescendingExpressionNode.cs,ApplyNodeSpecificSemantics,The length of the statement  "        throw new ParserException ("ThenByDescending expressions must follow OrderBy' OrderByDescending' ThenBy' or ThenByDescending expressions."); " is 140.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ThenByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ThenByExpressionNode.cs,GetResolvedKeySelector,The length of the statement  "      return _cachedSelector.GetOrCreate (r => r.GetResolvedExpression (KeySelector.Body' KeySelector.Parameters[0]' clauseGenerationContext)); " is 137.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ThenByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ThenByExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,ThenByExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\ThenByExpressionNode.cs,ApplyNodeSpecificSemantics,The length of the statement  "        throw new ParserException ("ThenByDescending expressions must follow OrderBy' OrderByDescending' ThenBy' or ThenByDescending expressions."); " is 140.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,UnionExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\UnionExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,WhereExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\WhereExpressionNode.cs,GetResolvedPredicate,The length of the statement  "      return _cachedPredicate.GetOrCreate (r => r.GetResolvedExpression (Predicate.Body' Predicate.Parameters[0]' clauseGenerationContext)); " is 134.
Long Statement,Remotion.Linq.Parsing.Structure.IntermediateModel,WhereExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\WhereExpressionNode.cs,Resolve,The length of the statement  "      // this simply streams its input data to the output without modifying its structure' so we resolve by passing on the data to the previous node " is 142.
Long Statement,Remotion.Linq.Parsing.Structure.NodeTypeProviders,MethodInfoBasedNodeTypeRegistry,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\NodeTypeProviders\MethodInfoBasedNodeTypeRegistry.cs,GetRegisterableMethodDefinition,The length of the statement  "        return (MethodInfo) MethodBase.GetMethodFromHandle (genericMethodDefinition.MethodHandle' declaringTypeDefinition.TypeHandle); " is 126.
Long Statement,Remotion.Linq.Parsing.Structure.NodeTypeProviders,MethodInfoBasedNodeTypeRegistry,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\NodeTypeProviders\MethodInfoBasedNodeTypeRegistry.cs,Register,The length of the statement  "              "Cannot register method '{0}' in closed generic type '{1}'' try to register its equivalent in the generic type definition instead."'  " is 132.
Long Statement,Remotion.Linq.Transformations,SubQueryFromClauseFlattener,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Transformations\SubQueryFromClauseFlattener.cs,FlattenSubQuery,The length of the statement  "      queryModel.TransformExpressions (ex => ReferenceReplacingExpressionTreeVisitor.ReplaceClauseReferences (ex' innerSelectorMapping' false)); " is 138.
Long Statement,Remotion.Linq.Transformations,SubQueryFromClauseFlattener,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Transformations\SubQueryFromClauseFlattener.cs,FlattenSubQuery,The length of the statement  "      queryModel.TransformExpressions (ex => ReferenceReplacingExpressionTreeVisitor.ReplaceClauseReferences (ex' innerBodyClauseMapping' false)); " is 140.
Long Statement,Remotion.Linq.Utilities,ArgumentTypeException,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Utilities\ArgumentTypeException.cs,FormatMessage,The length of the statement  "        return string.Format ("Argument {0} has type {2} when type {1} was expected."' argumentName' expectedType' actualTypeName); " is 123.
Long Statement,Remotion.Linq.Utilities,ArgumentUtility,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Utilities\ArgumentUtility.cs,CheckTypeIsAssignableFrom,The length of the statement  "          string message = string.Format ("Argument {0} is a {2}' which cannot be assigned to type {1}."' argumentName' expectedType' actualType); " is 136.
Complex Conditional,BrightstarDB.Portable.Compatibility,Path,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\Path.cs,Combine,The conditional expression  "path2[0] == DirectorySeparatorChar || path2[0] == AltDirectorySeparatorChar ||                  (path2.Length > 1 && path2[1] == VolumeSeparatorChar)"  is complex.
Complex Conditional,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,ExecuteQuery,The conditional expression  "_clientCache != null && cacheKey != null && LastResponseTimestamp.HasValue && responseStream != null"  is complex.
Complex Conditional,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The conditional expression  "(octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet)"  is complex.
Complex Conditional,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitQueryModel,The conditional expression  "queryModel.BodyClauses.Count == 1                   && queryModel.BodyClauses[0] is Remotion.Linq.Clauses.WhereClause                  && queryModel.SelectClause.Selector is QuerySourceReferenceExpression                  && (queryModel.SelectClause.Selector as QuerySourceReferenceExpression).ReferencedQuerySource.Equals(queryModel.MainFromClause)"  is complex.
Complex Conditional,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionBuilder.cs,VisitMemberBinding,The conditional expression  "propertyInfo != null                       && assignment != null                       && assignment.Expression.Type.IsValueType                       && !propertyInfo.PropertyType.IsValueType"  is complex.
Complex Conditional,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleEqualsNotEquals,The conditional expression  "(value == null && defValue == null) || (value != null && value.Equals(defValue))"  is complex.
Complex Conditional,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,GetStringComparisonFlags,The conditional expression  "(arg1.Type == typeof (bool) && (bool) arg1.Value) ||                      (arg1.Type == typeof (StringComparison) &&                       ((StringComparison) arg1.Value == StringComparison.CurrentCultureIgnoreCase ||  #if !PORTABLE                           (StringComparison) arg1.Value == StringComparison.InvariantCultureIgnoreCase ||  #endif                           (StringComparison) arg1.Value == StringComparison.OrdinalIgnoreCase))"  is complex.
Complex Conditional,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,SafeSparqlVarName,The conditional expression  "(c >= 0x41 && c <= 0x5A) ||                      (c>=0x61 && c<=0x7A) ||                      (c>=0x00C0&& c<=0x00D6) ||                       (c>=0x00D8 && c<=0x00F6) ||                       (c>=0x00F8 && c<=0x02FF) ||                       (c>=0x0370 && c<=0x037D) ||                       (c>=0x037F && c<=0x1FFF) ||                       (c>=0x200C && c<=0x200D) ||                       (c>=0x2070 && c<=0x218F) ||                       (c>=0x2C00 && c<=0x2FEF) ||                       (c>=0x3001 && c<=0xD7FF) ||                       (c>=0xF900 && c<=0xFDCF) ||                       (c>=0xFDF0 && c<=0xFFFD)"  is complex.
Complex Conditional,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,MakeSparqlNumericConstant,The conditional expression  "value is byte || value is short || value is ushort || value is int || value is uint || value is long || value is ulong"  is complex.
Complex Conditional,BrightstarDB.Rdf,NQuadsWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NQuadsWriter.cs,AppendEscapedLiteral,The conditional expression  "c == 0x20 || c == 0x21 || c >= 0x23 && c <= 0x5B || c >= 0x5D && c <= 0x7E"  is complex.
Complex Conditional,BrightstarDB.Rdf,NQuadsWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NQuadsWriter.cs,AppendEscapedLiteral,The conditional expression  "c <= 0x8 || c == 0xB || c == 0xC || (c >= 0x0E && c <= 0x1F) ||                                   (c > 0x7F && c <= 0xFFFF)"  is complex.
Complex Conditional,BrightstarDB.Rdf,NTriplesWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesWriter.cs,AppendEscapedLiteral,The conditional expression  "c == 0x20 || c == 0x21 || c >= 0x23 && c <= 0x5B || c >= 0x5D && c <= 0x7E"  is complex.
Complex Conditional,BrightstarDB.Rdf,NTriplesWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesWriter.cs,AppendEscapedLiteral,The conditional expression  "c <= 0x8 || c == 0xB || c == 0xC || (c >= 0x0E && c <= 0x1F) ||                                   (c > 0x7F && c <= 0xFFFF)"  is complex.
Complex Conditional,BrightstarDB.Server,StatsMonitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\StatsMonitor.cs,OnJobScheduled,The conditional expression  "(Configuration.StatsUpdateTransactionCount == 0 ||                       _jobCounter >= Configuration.StatsUpdateTransactionCount) &&                      (Configuration.StatsUpdateTimespan == 0 ||                       DateTime.UtcNow.Subtract(_lastStatsUpdateTime).TotalSeconds >= Configuration.StatsUpdateTimespan)"  is complex.
Complex Conditional,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,Matches,The conditional expression  "isLiteral && dataTypeId == _dataTypeId && langCodeId == _langCodeId && resourceValue.StartsWith(_prefix)"  is complex.
Complex Conditional,BrightstarDB.Storage.BTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Store.cs,DeleteTriple,The conditional expression  "sid == StoreConstants.NullUlong || pid == StoreConstants.NullUlong || oid == StoreConstants.NullUlong || gid == StoreConstants.NullUlong"  is complex.
Complex Conditional,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The conditional expression  "in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80"  is complex.
Complex Conditional,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The conditional expression  "in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1"  is complex.
Virtual Method Call from Constructor,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,MD5,The constructor "MD5" calls a virtual method "Initialize".
Virtual Method Call from Constructor,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,SparqlQueryBuilder,The constructor "SparqlQueryBuilder" calls a virtual method "GetDataset".
Empty Catch Block,BrightstarDB.Portable.Adaptation,ProbingAdapterResolver,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Adaptation\ProbingAdapterResolver.cs,ProbeForPlatformSpecificAssembly,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Portable.Compatibility,ConcurrentQueue<T>,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\ConcurrentQueue.cs,TryDequeue,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Client,TransactionPreconditionsFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\TransactionPreconditionsFailedException.cs,TransactionPreconditionsFailedException,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Client,TransactionPreconditionsFailedException,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\TransactionPreconditionsFailedException.cs,TransactionPreconditionsFailedException,The method has an empty catch block.
Empty Catch Block,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,VisitConstantExpression,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Query,SparqlQueryHandler,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\SparqlQueryHandler.cs,ExecuteSparql,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Query.Processor,VariableEqualsOptimizer,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\Processor\VariableEqualsOptimizer.cs,OptimiseFilter,The method has an empty catch block.
Empty Catch Block,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,AddRelatedResource,The method has an empty catch block.
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,ROTATE_LEFT,The following statement contains a magic number: return (((x) << (n)) | ((x) >> (32 - (n))));
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Initialize,The following statement contains a magic number: state[2] = 0x98badcfe;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Initialize,The following statement contains a magic number: state[3] = 0x10325476;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: index = (int)((this.count[0] >> 3) & 0x3F);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: if ((this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3))                  this.count[1]++;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: if ((this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3))                  this.count[1]++;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: this.count[1] += ((uint)count >> 29);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: partLen = 64 - index;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: if (count >= partLen)              {                  Buffer.BlockCopy(input' offset' this.buffer' index' partLen);                  Transform(this.buffer' 0);                    for (i = partLen; i + 63 < count; i += 64)                      Transform(input' offset + i);                    index = 0;              }              else                  i = 0;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashCore,The following statement contains a magic number: if (count >= partLen)              {                  Buffer.BlockCopy(input' offset' this.buffer' index' partLen);                  Transform(this.buffer' 0);                    for (i = partLen; i + 63 < count; i += 64)                      Transform(input' offset + i);                    index = 0;              }              else                  i = 0;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: byte[] digest = new byte[16];
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: byte[] bits = new byte[8];
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: Encode(bits' 0' this.count' 0' 8);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: index = (int)((uint)(this.count[0] >> 3) & 0x3f);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: HashCore(bits' 0' 8);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: Encode(digest' 0' state' 0' 16);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: state[2] = 0;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,HashFinal,The following statement contains a magic number: state[3] = 0;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: uint[] x = new uint[16];
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: Decode(x' 0' block' offset' 64);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[2]' S13' 0x242070db);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[3]' S14' 0xc1bdceee);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[4]' S11' 0xf57c0faf);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[5]' S12' 0x4787c62a);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[6]' S13' 0xa8304613);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[7]' S14' 0xfd469501);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[8]' S11' 0x698098d8);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[9]' S12' 0x8b44f7af);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[10]' S13' 0xffff5bb1);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[11]' S14' 0x895cd7be);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[12]' S11' 0x6b901122);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[13]' S12' 0xfd987193);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[14]' S13' 0xa679438e);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[15]' S14' 0x49b40821);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[6]' S22' 0xc040b340);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[11]' S23' 0x265e5a51);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[5]' S21' 0xd62f105d);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[10]' S22' 0x2441453);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[15]' S23' 0xd8a1e681);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[4]' S24' 0xe7d3fbc8);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[9]' S21' 0x21e1cde6);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[14]' S22' 0xc33707d6);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[3]' S23' 0xf4d50d87);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[8]' S24' 0x455a14ed);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[13]' S21' 0xa9e3e905);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[2]' S22' 0xfcefa3f8);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[7]' S23' 0x676f02d9);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[12]' S24' 0x8d2a4c8a);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[5]' S31' 0xfffa3942);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[8]' S32' 0x8771f681);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[11]' S33' 0x6d9d6122);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[14]' S34' 0xfde5380c);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[4]' S32' 0x4bdecfa9);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[7]' S33' 0xf6bb4b60);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[10]' S34' 0xbebfbc70);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[13]' S31' 0x289b7ec6);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[3]' S33' 0xd4ef3085);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[6]' S34' 0x4881d05);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[9]' S31' 0xd9d4d039);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[12]' S32' 0xe6db99e5);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[15]' S33' 0x1fa27cf8);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[2]' S34' 0xc4ac5665);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[7]' S42' 0x432aff97);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[14]' S43' 0xab9423a7);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[5]' S44' 0xfc93a039);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[12]' S41' 0x655b59c3);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[3]' S42' 0x8f0ccc92);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[10]' S43' 0xffeff47d);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[8]' S41' 0x6fa87e4f);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[15]' S42' 0xfe2ce6e0);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[6]' S43' 0xa3014314);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[13]' S44' 0x4e0811a1);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[4]' S41' 0xf7537e82);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[11]' S42' 0xbd3af235);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[2]' S43' 0x2ad7d2bb);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[9]' S44' 0xeb86d391);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: state[2] += c;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Transform,The following statement contains a magic number: state[3] += d;
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)              {                  output[j] = (byte)(input[i] & 0xff);                  output[j + 1] = (byte)((input[i] >> 8) & 0xff);                  output[j + 2] = (byte)((input[i] >> 16) & 0xff);                  output[j + 3] = (byte)((input[i] >> 24) & 0xff);              }
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)              {                  output[j] = (byte)(input[i] & 0xff);                  output[j + 1] = (byte)((input[i] >> 8) & 0xff);                  output[j + 2] = (byte)((input[i] >> 16) & 0xff);                  output[j + 3] = (byte)((input[i] >> 24) & 0xff);              }
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)              {                  output[j] = (byte)(input[i] & 0xff);                  output[j + 1] = (byte)((input[i] >> 8) & 0xff);                  output[j + 2] = (byte)((input[i] >> 16) & 0xff);                  output[j + 3] = (byte)((input[i] >> 24) & 0xff);              }
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)              {                  output[j] = (byte)(input[i] & 0xff);                  output[j + 1] = (byte)((input[i] >> 8) & 0xff);                  output[j + 2] = (byte)((input[i] >> 16) & 0xff);                  output[j + 3] = (byte)((input[i] >> 24) & 0xff);              }
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)              {                  output[j] = (byte)(input[i] & 0xff);                  output[j + 1] = (byte)((input[i] >> 8) & 0xff);                  output[j + 2] = (byte)((input[i] >> 16) & 0xff);                  output[j + 3] = (byte)((input[i] >> 24) & 0xff);              }
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)              {                  output[j] = (byte)(input[i] & 0xff);                  output[j + 1] = (byte)((input[i] >> 8) & 0xff);                  output[j + 2] = (byte)((input[i] >> 16) & 0xff);                  output[j + 3] = (byte)((input[i] >> 24) & 0xff);              }
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)                  output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)                  output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)                  output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)                  output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)                  output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)                  output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) << 24);
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,ComputeHash,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,BrightstarDB,MD5,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\MD5.cs,ComputeHash,The following statement contains a magic number: while (0 < (count = inputStream.Read(buffer' 0' 4096)))              {                  HashCore(buffer' 0' count);              }
Magic Number,BrightstarDB,Logging,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Logging.cs,Shutdown,The following statement contains a magic number: LogWorker.Wait(2000);
Magic Number,BrightstarDB,Logging,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Logging.cs,DoWriteLog,The following statement contains a magic number: while (!_stopping)              {                  if (!LogQueue.IsEmpty)                  {                      if (!String.IsNullOrEmpty(_logFileName))                      {                          using (var logStream = _persistenceManager.GetOutputStream(_logFileName' FileMode.Append))                          {                              using (var logWriter = new StreamWriter(logStream))                              {                                  LogItem logItem;                                  while (LogQueue.TryDequeue(out logItem))                                  {                                      logItem.WriteTo(logWriter);                                  }                                  logStream.Flush();                                  logWriter.Close();                              }                          }                      }                      else                      {                          // Not currently logging to a file - so just dequeue all the messages                          LogItem logItem;                          while (LogQueue.TryDequeue(out logItem))                          {                              // No-op                          }                      }                  }                  Wait.Reset();                  Wait.WaitOne(1000);              }
Magic Number,BrightstarDB,RdfFormat,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\RdfFormat.cs,GetResultsFormat,The following statement contains a magic number: var encodingName =                  parts.Where(p => p.ToLowerInvariant().StartsWith("charset="))                       .Select(p => p.Substring(8))                       .FirstOrDefault();
Magic Number,BrightstarDB,SparqlResultsFormat,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\SparqlResultsFormat.cs,GetResultsFormat,The following statement contains a magic number: var encodingName =                  parts.Where(p => p.ToLowerInvariant().StartsWith("charset="))                       .Select(p => p.Substring(8))                       .FirstOrDefault();
Magic Number,Mono.Security.Cryptography,HMACAlgorithm,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\MonoCrypto\HMACAlgorithm.cs,CreateHash,The following statement contains a magic number: block = new BlockProcessor (algo' 8);
Magic Number,Mono.Security.Cryptography,HMACAlgorithm,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\MonoCrypto\HMACAlgorithm.cs,KeySetup,The following statement contains a magic number: byte[] buf = new byte [64];
Magic Number,Mono.Security.Cryptography,HMACAlgorithm,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\MonoCrypto\HMACAlgorithm.cs,KeySetup,The following statement contains a magic number: for (int i = key.Length; i < 64; ++i)  				buf [i] = padding;
Magic Number,System.Security.Cryptography,HMAC,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\MonoCrypto\HMAC.cs,HMAC,The following statement contains a magic number: _blockSizeValue = 64;
Magic Number,System.Security.Cryptography,HMACSHA256,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\MonoCrypto\HMACSHA256.cs,HMACSHA256,The following statement contains a magic number: HashSizeValue = 256;
Magic Number,BrightstarDB.Caching,AbstractCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Caching\AbstractCache.cs,AbstractCache,The following statement contains a magic number: _highwaterMark = (long)(highwaterMark > 0 ? highwaterMark : cacheMaxSize*0.9);
Magic Number,BrightstarDB.Caching,AbstractCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Caching\AbstractCache.cs,AbstractCache,The following statement contains a magic number: _lowwaterMark =                  (long)                  (lowwaterMark > 0                       ? lowwaterMark                       : (highwaterMark > 0 ? highwaterMark - (cacheMaxSize*0.25) : cacheMaxSize*0.65));
Magic Number,BrightstarDB.Caching,AbstractCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Caching\AbstractCache.cs,AbstractCache,The following statement contains a magic number: _lowwaterMark =                  (long)                  (lowwaterMark > 0                       ? lowwaterMark                       : (highwaterMark > 0 ? highwaterMark - (cacheMaxSize*0.25) : cacheMaxSize*0.65));
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetJobInfo,The following statement contains a magic number: if (take > 100) throw new ArgumentException(Strings.BrightstarServiceClient_GetJobInfo_TakeToLarge' "take");
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetCommitPoints,The following statement contains a magic number: if (take > 100) throw new ArgumentException(Strings.BrightstarServiceClient_GetCommitPoints_TakeToLarge' "take");
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetTransactions,The following statement contains a magic number: if (take > 100) throw new ArgumentException(Strings.BrightstarServiceClient_GetTransactions_TakeTooLarge' "take");
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetCommitPoints,The following statement contains a magic number: if (take > 100)                  throw new ArgumentException(Strings.BrightstarServiceClient_GetCommitPoints_TakeToLarge' "take");
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,GetStatistics,The following statement contains a magic number: if (take > 100) throw new ArgumentException(Strings.BrightstarServiceClient_GetStatistics_TakeTooLarge);
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The following statement contains a magic number: foreach (var octet in bytes)              {                    if ((octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet))                  {                      escapeBuilder.Append((char)octet);                  }                  else                  {                      escapeBuilder.AppendFormat("%{0:X2}"' octet);                  }              }
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The following statement contains a magic number: foreach (var octet in bytes)              {                    if ((octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet))                  {                      escapeBuilder.Append((char)octet);                  }                  else                  {                      escapeBuilder.AppendFormat("%{0:X2}"' octet);                  }              }
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The following statement contains a magic number: foreach (var octet in bytes)              {                    if ((octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet))                  {                      escapeBuilder.Append((char)octet);                  }                  else                  {                      escapeBuilder.AppendFormat("%{0:X2}"' octet);                  }              }
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The following statement contains a magic number: foreach (var octet in bytes)              {                    if ((octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet))                  {                      escapeBuilder.Append((char)octet);                  }                  else                  {                      escapeBuilder.AppendFormat("%{0:X2}"' octet);                  }              }
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The following statement contains a magic number: foreach (var octet in bytes)              {                    if ((octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet))                  {                      escapeBuilder.Append((char)octet);                  }                  else                  {                      escapeBuilder.AppendFormat("%{0:X2}"' octet);                  }              }
Magic Number,BrightstarDB.Client,BrightstarRestClient,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestClient.cs,EscapeDataString,The following statement contains a magic number: foreach (var octet in bytes)              {                    if ((octet > 47 && octet < 58) ||                      (octet > 64 && octet < 91) ||                      (octet > 96 && octet < 123) ||                      Mark.Contains(octet))                  {                      escapeBuilder.Append((char)octet);                  }                  else                  {                      escapeBuilder.AppendFormat("%{0:X2}"' octet);                  }              }
Magic Number,BrightstarDB.Client,BrightstarRestUpdatableStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\BrightstarRestUpdatableStore.cs,PostTransaction,The following statement contains a magic number: while (!(jobInfo.JobCompletedOk || jobInfo.JobCompletedWithErrors))              {  #if PORTABLE      // Very rudimentary synchronous wait                  var ev = new ManualResetEvent(false);                  ev.WaitOne(200);  #else                  Thread.Sleep(20);  #endif                  jobInfo = _client.GetJobInfo(_storeName' jobInfo.JobId);              }
Magic Number,BrightstarDB.Client,CachedQueryResult,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\CachedQueryResult.cs,FromBinary,The following statement contains a magic number: var result = Encoding.UTF8.GetString(bytes' 8' bytes.Length - 8);
Magic Number,BrightstarDB.Client,CachedQueryResult,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\CachedQueryResult.cs,FromBinary,The following statement contains a magic number: var result = Encoding.UTF8.GetString(bytes' 8' bytes.Length - 8);
Magic Number,BrightstarDB.Client,CachedQueryResult,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\CachedQueryResult.cs,ToBinary,The following statement contains a magic number: byte[] buff = new byte[resultByteSize+8];
Magic Number,BrightstarDB.Client,CachedQueryResult,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\CachedQueryResult.cs,ToBinary,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(Timestamp.Ticks)' buff' 8);
Magic Number,BrightstarDB.Client,CachedQueryResult,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\CachedQueryResult.cs,ToBinary,The following statement contains a magic number: Encoding.UTF8.GetBytes(Result' 0' Result.Length' buff' 8);
Magic Number,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The following statement contains a magic number: try              {                  if (take > 100) take = 100;                  var commitPoints = _serverCore.GetCommitPoints(storeName).Skip(skip).Take(take);  // ReSharper disable RedundantEnumerableCastCall  // not redundant for SILVERLIGHT build                  return commitPoints.Select(c => new CommitPointInfoObject {Id = c.LocationOffset' CommitTime = c.CommitTime' JobId = c.JobId' StoreName = storeName}).Cast<ICommitPointInfo>();  // ReSharper restore RedundantEnumerableCastCall              }              catch (Exception ex)              {                  Logging.LogError(BrightstarEventId.ServerCoreException' "Error getting commit points for store {0}"' storeName);                  throw new BrightstarClientException("Error getting commit points for store " + storeName + ". " + ex.Message' ex);              }
Magic Number,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The following statement contains a magic number: try              {                  if (take > 100) take = 100;                  var commitPoints = _serverCore.GetCommitPoints(storeName).Skip(skip).Take(take);  // ReSharper disable RedundantEnumerableCastCall  // not redundant for SILVERLIGHT build                  return commitPoints.Select(c => new CommitPointInfoObject {Id = c.LocationOffset' CommitTime = c.CommitTime' JobId = c.JobId' StoreName = storeName}).Cast<ICommitPointInfo>();  // ReSharper restore RedundantEnumerableCastCall              }              catch (Exception ex)              {                  Logging.LogError(BrightstarEventId.ServerCoreException' "Error getting commit points for store {0}"' storeName);                  throw new BrightstarClientException("Error getting commit points for store " + storeName + ". " + ex.Message' ex);              }
Magic Number,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The following statement contains a magic number: try              {                  if (take > 100) take = 100;                  DateTime latestUtc = latest.ToUniversalTime();                  DateTime earliestUtc = earliest.ToUniversalTime();                  var commitPoints =                      _serverCore.GetCommitPoints(storeName).SkipWhile(x => x.CommitTime > latestUtc).TakeWhile(                          x => x.CommitTime > earliestUtc).Skip(skip).Take(take);  // ReSharper disable RedundantEnumerableCastCall  // not redundant for SILVERLIGHT build                  return commitPoints.Select(c => new CommitPointInfoObject {Id = c.LocationOffset' CommitTime = c.CommitTime' JobId = c.JobId' StoreName = storeName}).Cast<ICommitPointInfo>();  // ReSharper restore RedundantEnumerableCastCall              }              catch (Exception ex)              {                  Logging.LogError(BrightstarEventId.ServerCoreException' "Error getting commit points for store {0}"' storeName);                  throw new BrightstarClientException("Error getting commit points for store " + storeName + ". " + ex.Message' ex);              }
Magic Number,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetCommitPoints,The following statement contains a magic number: try              {                  if (take > 100) take = 100;                  DateTime latestUtc = latest.ToUniversalTime();                  DateTime earliestUtc = earliest.ToUniversalTime();                  var commitPoints =                      _serverCore.GetCommitPoints(storeName).SkipWhile(x => x.CommitTime > latestUtc).TakeWhile(                          x => x.CommitTime > earliestUtc).Skip(skip).Take(take);  // ReSharper disable RedundantEnumerableCastCall  // not redundant for SILVERLIGHT build                  return commitPoints.Select(c => new CommitPointInfoObject {Id = c.LocationOffset' CommitTime = c.CommitTime' JobId = c.JobId' StoreName = storeName}).Cast<ICommitPointInfo>();  // ReSharper restore RedundantEnumerableCastCall              }              catch (Exception ex)              {                  Logging.LogError(BrightstarEventId.ServerCoreException' "Error getting commit points for store {0}"' storeName);                  throw new BrightstarClientException("Error getting commit points for store " + storeName + ". " + ex.Message' ex);              }
Magic Number,BrightstarDB.Client,EmbeddedBrightstarService,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\EmbeddedBrightstarService.cs,GetStatistics,The following statement contains a magic number: if (take > 100) throw new ArgumentOutOfRangeException("take"' Strings.BrightstarServiceClient_GetStatistics_TakeTooLarge);
Magic Number,BrightstarDB.Client,SparqlResultDataObjectHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlResultDataObjectHelper.cs,BindDataObjects,The following statement contains a magic number: switch (sparqlResultSet.Variables.Count())              {                  case 1:                      // Single column results set contains only data object IRIs                      foreach (var uriNode in sparqlResultSet.Select(row => row[0] as IUriNode).Where(uriNode => uriNode?.Uri != null))                      {                          yield return _storeContext.MakeDataObject(uriNode.Uri.ToString());                      }                      break;                  case 3:                      // Columns are triples' s' p' o in that order                      foreach (var t in sparqlResultSet.Select(row=>MakeTriple(row[0]' row[1]' row[2])))                      {                          if (resourceTriples.ContainsKey(t.Subject))                          {                              resourceTriples[t.Subject].Add(t);                          }                          else                          {                              resourceTriples[t.Subject] = new List<Triple> {t};                          }                          if (resultsAreOrdered && lastLoadedSubject != null && !lastLoadedSubject.Equals(t.Subject))                          {                              // Have collected all the triples we are going to see for the previously encountered subject' so emit its data object now                              yield return MakeDataObject(lastLoadedSubject' resourceTriples[lastLoadedSubject]);                          }                          lastLoadedSubject = t.Subject;                      }                      if (resultsAreOrdered && lastLoadedSubject != null)                      {                          // Emit the final result                          yield return MakeDataObject(lastLoadedSubject' resourceTriples[lastLoadedSubject]);                      }                      else                      {                          // We have batched up all of the triples and can now emit the separate data objects                          foreach (var entry in resourceTriples)                          {                              yield return MakeDataObject(entry.Key' entry.Value);                          }                      }                      break;                  default:                      throw new ArgumentException(                         $"Expected a result set with either 1 or 3 columns. Got a result set with {sparqlResultSet.Variables.Count()} columns"' nameof(sparqlResultSet));              }
Magic Number,BrightstarDB.Client,SparqlResultDataObjectHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Client\SparqlResultDataObjectHelper.cs,BindDataObjects,The following statement contains a magic number: switch (sparqlResultSet.Variables.Count())              {                  case 1:                      // Single column results set contains only data object IRIs                      foreach (var uriNode in sparqlResultSet.Select(row => row[0] as IUriNode).Where(uriNode => uriNode?.Uri != null))                      {                          yield return _storeContext.MakeDataObject(uriNode.Uri.ToString());                      }                      break;                  case 3:                      // Columns are triples' s' p' o in that order                      foreach (var t in sparqlResultSet.Select(row=>MakeTriple(row[0]' row[1]' row[2])))                      {                          if (resourceTriples.ContainsKey(t.Subject))                          {                              resourceTriples[t.Subject].Add(t);                          }                          else                          {                              resourceTriples[t.Subject] = new List<Triple> {t};                          }                          if (resultsAreOrdered && lastLoadedSubject != null && !lastLoadedSubject.Equals(t.Subject))                          {                              // Have collected all the triples we are going to see for the previously encountered subject' so emit its data object now                              yield return MakeDataObject(lastLoadedSubject' resourceTriples[lastLoadedSubject]);                          }                          lastLoadedSubject = t.Subject;                      }                      if (resultsAreOrdered && lastLoadedSubject != null)                      {                          // Emit the final result                          yield return MakeDataObject(lastLoadedSubject' resourceTriples[lastLoadedSubject]);                      }                      else                      {                          // We have batched up all of the triples and can now emit the separate data objects                          foreach (var entry in resourceTriples)                          {                              yield return MakeDataObject(entry.Key' entry.Value);                          }                      }                      break;                  default:                      throw new ArgumentException(                         $"Expected a result set with either 1 or 3 columns. Got a result set with {sparqlResultSet.Variables.Count()} columns"' nameof(sparqlResultSet));              }
Magic Number,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,HandleMethodCallExpression,The following statement contains a magic number: if (expression.Object != null && expression.Object.Type == typeof(string))              {                  if (expression.Method.Name.Equals("StartsWith"))                  {                      var constantExpression = expression.Arguments[0] as ConstantExpression;                      if (constantExpression != null)                      {                          if (expression.Arguments.Count == 1)                          {                              WriteFunction("STRSTARTS"' expression.Object' expression.Arguments[0]);                              return expression;                          }                          var flags =                              SparqlGeneratorWhereExpressionTreeVisitor.GetStringComparisonFlags(expression.Arguments[1]);                          WriteRegexFilter(expression.Object' "^" + Regex.Escape(constantExpression.Value.ToString())'                              flags);                          return expression;                      }                  }                  if (expression.Method.Name.Equals("EndsWith"))                  {                      var constantExpression = expression.Arguments[0] as ConstantExpression;                      if (constantExpression != null)                      {                          if (expression.Arguments.Count == 1)                          {                              WriteFunction("STRENDS"' expression.Object' expression.Arguments[0]);                          }                          if (expression.Arguments.Count > 1 && expression.Arguments[1] is ConstantExpression)                          {                              var flags = SparqlGeneratorWhereExpressionTreeVisitor.GetStringComparisonFlags(expression.Arguments[1]);                              WriteRegexFilter(expression.Object'                                                             Regex.Escape(constantExpression.Value.ToString()) + "$"'                                                             flags);                          }                          return expression;                      }                  }                  if (expression.Method.Name.Equals("Contains"))                  {                      var seekValue = expression.Arguments[0] as ConstantExpression;                      if (seekValue != null)                      {                          if (expression.Arguments.Count == 1)                          {                              WriteFunction("CONTAINS"' expression.Object' seekValue);                          }                          else if (expression.Arguments[1] is ConstantExpression)                          {                              var flags = SparqlGeneratorWhereExpressionTreeVisitor.GetStringComparisonFlags(expression.Arguments[1]);                              WriteRegexFilter(expression.Object' Regex.Escape(seekValue.Value.ToString())'                                                             flags);                          }                          return expression;                      }                  }                  if (expression.Method.Name.Equals("Substring"))                  {                      Expression start;                      var constantExpression = expression.Arguments[0] as ConstantExpression;                      if (constantExpression != null && expression.Arguments[0].Type == typeof(int))                      {                          start = Expression.Constant(((int)constantExpression.Value) + 1);                      }                      else                      {                          start = Expression.Add(expression.Arguments[0]' Expression.Constant(1));                      }                      if (expression.Arguments.Count == 1)                      {                          WriteFunction("SUBSTR"' expression.Object' start);                          return expression;                      }                      if (expression.Arguments.Count == 2)                      {                          WriteFunction("SUBSTR"' expression.Object' start' expression.Arguments[1]);                          return expression;                      }                  }                  if (expression.Method.Name.Equals("ToUpper"))                  {                      WriteFunction("UCASE"' expression.Object);                      return expression;                  }                  if (expression.Method.Name.Equals("ToLower"))                  {                      WriteFunction("LCASE"' expression.Object);                      return expression;                  }                  if (expression.Method.Name.Equals("Replace"))                  {                      _regexEscaping = true;                      WriteFunction("REPLACE"' expression.Object'  expression.Arguments[0]' expression.Arguments[1]);                      _regexEscaping = false;                      return expression;                  }              }
Magic Number,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,HandleMethodCallExpression,The following statement contains a magic number: if (expression.Object == null)              {                  // Static method                  if (expression.Method.DeclaringType == typeof(Regex))                  {                      if (expression.Method.Name.Equals("IsMatch"))                      {                          var sourceExpression = expression.Arguments[0];                          var regexExpression = expression.Arguments[1] as ConstantExpression;                          var flagsExpression = expression.Arguments.Count > 2                                                    ? expression.Arguments[2] as ConstantExpression                                                    : null;                          if (regexExpression != null)                          {                              var regex = regexExpression.Value.ToString();                              string flags = String.Empty;                              if (flagsExpression != null && flagsExpression.Type == typeof(RegexOptions))                              {                                  var regexOptions = (RegexOptions)flagsExpression.Value;                                  if ((regexOptions & RegexOptions.IgnoreCase) == RegexOptions.IgnoreCase) flags += "i";                                  if ((regexOptions & RegexOptions.Multiline) == RegexOptions.Multiline) flags += "m";                                  if ((regexOptions & RegexOptions.Singleline) == RegexOptions.Singleline) flags += "s";                                  if ((regexOptions & RegexOptions.IgnorePatternWhitespace) == RegexOptions.IgnorePatternWhitespace)                                      flags += "x";                              }                              WriteRegexFilter(sourceExpression' regex' String.Empty.Equals(flags) ? null : flags);                              return expression;                          }                      }                  }                  if (typeof(string) == expression.Method.DeclaringType)                  {                      if (expression.Method.Name.Equals("Concat"))                      {                          WriteFunction("CONCAT"' expression.Arguments.ToArray());                          return expression;                      }                  }                  if (typeof(Math) == expression.Method.DeclaringType)                  {                      string fnName = null;                      switch (expression.Method.Name)                      {                          case "Round":                              fnName = "ROUND";                              break;                          case "Floor":                              fnName = "FLOOR";                              break;                          case "Ceiling":                              fnName = "CEIL";                              break;                      }                      if (fnName != null)                      {                          WriteFunction(fnName' expression.Arguments[0]);                          return expression;                      }                  }              }
Magic Number,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,HandleMethodCallExpression,The following statement contains a magic number: if (expression.Object == null)              {                  // Static method                  if (expression.Method.DeclaringType == typeof(Regex))                  {                      if (expression.Method.Name.Equals("IsMatch"))                      {                          var sourceExpression = expression.Arguments[0];                          var regexExpression = expression.Arguments[1] as ConstantExpression;                          var flagsExpression = expression.Arguments.Count > 2                                                    ? expression.Arguments[2] as ConstantExpression                                                    : null;                          if (regexExpression != null)                          {                              var regex = regexExpression.Value.ToString();                              string flags = String.Empty;                              if (flagsExpression != null && flagsExpression.Type == typeof(RegexOptions))                              {                                  var regexOptions = (RegexOptions)flagsExpression.Value;                                  if ((regexOptions & RegexOptions.IgnoreCase) == RegexOptions.IgnoreCase) flags += "i";                                  if ((regexOptions & RegexOptions.Multiline) == RegexOptions.Multiline) flags += "m";                                  if ((regexOptions & RegexOptions.Singleline) == RegexOptions.Singleline) flags += "s";                                  if ((regexOptions & RegexOptions.IgnorePatternWhitespace) == RegexOptions.IgnorePatternWhitespace)                                      flags += "x";                              }                              WriteRegexFilter(sourceExpression' regex' String.Empty.Equals(flags) ? null : flags);                              return expression;                          }                      }                  }                  if (typeof(string) == expression.Method.DeclaringType)                  {                      if (expression.Method.Name.Equals("Concat"))                      {                          WriteFunction("CONCAT"' expression.Arguments.ToArray());                          return expression;                      }                  }                  if (typeof(Math) == expression.Method.DeclaringType)                  {                      string fnName = null;                      switch (expression.Method.Name)                      {                          case "Round":                              fnName = "ROUND";                              break;                          case "Floor":                              fnName = "FLOOR";                              break;                          case "Ceiling":                              fnName = "CEIL";                              break;                      }                      if (fnName != null)                      {                          WriteFunction(fnName' expression.Arguments[0]);                          return expression;                      }                  }              }
Magic Number,BrightstarDB.EntityFramework.Query,SparqlGeneratorQueryModelVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorQueryModelVisitor.cs,VisitResultOperator,The following statement contains a magic number: if (resultOperator is SingleResultOperator && index == 0)              {                  // Grab first 2 rows. If there are two then the outer wrapper will fail.                  _queryBuilder.Limit = 2;                  return;              }
Magic Number,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitMethodCallExpression,The following statement contains a magic number: if (expression.Object == null)              {                  // Static method                  var declType = expression.Method.DeclaringType;                  if (declType != null)                  {                      if (declType == typeof (Regex))                      {                          if (expression.Method.Name.Equals("IsMatch"))                          {                              var sourceExpression = expression.Arguments[0];                              var regexExpression = expression.Arguments[1] as ConstantExpression;                              var flagsExpression = expression.Arguments.Count > 2                                  ? expression.Arguments[2] as ConstantExpression                                  : null;                              if (regexExpression != null)                              {                                  var regex = regexExpression.Value.ToString();                                  var flags = string.Empty;                                  if (flagsExpression != null && flagsExpression.Type == typeof (RegexOptions))                                  {                                      var regexOptions = (RegexOptions) flagsExpression.Value;                                      if ((regexOptions & RegexOptions.IgnoreCase) == RegexOptions.IgnoreCase)                                          flags += "i";                                      if ((regexOptions & RegexOptions.Multiline) == RegexOptions.Multiline) flags += "m";                                      if ((regexOptions & RegexOptions.Singleline) == RegexOptions.Singleline)                                          flags += "s";                                      if ((regexOptions & RegexOptions.IgnorePatternWhitespace) ==                                          RegexOptions.IgnorePatternWhitespace)                                          flags += "x";                                  }                                  _filterWriter.WriteRegexFilter(sourceExpression' regex'                                      string.Empty.Equals(flags) ? null : flags);                                  return expression;                              }                          }                      }                      if (typeof (string) == declType)                      {                          if (expression.Method.Name.Equals("Concat"))                          {                              _filterWriter.WriteFunction("CONCAT"' expression.Arguments.ToArray());                              return expression;                          }                      }                      if (typeof (Math) == declType)                      {                          string fnName = null;                          switch (expression.Method.Name)                          {                              case "Round":                                  fnName = "ROUND";                                  break;                              case "Floor":                                  fnName = "FLOOR";                                  break;                              case "Ceiling":                                  fnName = "CEIL";                                  break;                          }                          if (fnName != null)                          {                              _filterWriter.WriteFunction(fnName' expression.Arguments[0]);                              return expression;                          }                      }                  }              }
Magic Number,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitMethodCallExpression,The following statement contains a magic number: if (expression.Object == null)              {                  // Static method                  var declType = expression.Method.DeclaringType;                  if (declType != null)                  {                      if (declType == typeof (Regex))                      {                          if (expression.Method.Name.Equals("IsMatch"))                          {                              var sourceExpression = expression.Arguments[0];                              var regexExpression = expression.Arguments[1] as ConstantExpression;                              var flagsExpression = expression.Arguments.Count > 2                                  ? expression.Arguments[2] as ConstantExpression                                  : null;                              if (regexExpression != null)                              {                                  var regex = regexExpression.Value.ToString();                                  var flags = string.Empty;                                  if (flagsExpression != null && flagsExpression.Type == typeof (RegexOptions))                                  {                                      var regexOptions = (RegexOptions) flagsExpression.Value;                                      if ((regexOptions & RegexOptions.IgnoreCase) == RegexOptions.IgnoreCase)                                          flags += "i";                                      if ((regexOptions & RegexOptions.Multiline) == RegexOptions.Multiline) flags += "m";                                      if ((regexOptions & RegexOptions.Singleline) == RegexOptions.Singleline)                                          flags += "s";                                      if ((regexOptions & RegexOptions.IgnorePatternWhitespace) ==                                          RegexOptions.IgnorePatternWhitespace)                                          flags += "x";                                  }                                  _filterWriter.WriteRegexFilter(sourceExpression' regex'                                      string.Empty.Equals(flags) ? null : flags);                                  return expression;                              }                          }                      }                      if (typeof (string) == declType)                      {                          if (expression.Method.Name.Equals("Concat"))                          {                              _filterWriter.WriteFunction("CONCAT"' expression.Arguments.ToArray());                              return expression;                          }                      }                      if (typeof (Math) == declType)                      {                          string fnName = null;                          switch (expression.Method.Name)                          {                              case "Round":                                  fnName = "ROUND";                                  break;                              case "Floor":                                  fnName = "FLOOR";                                  break;                              case "Ceiling":                                  fnName = "CEIL";                                  break;                          }                          if (fnName != null)                          {                              _filterWriter.WriteFunction(fnName' expression.Arguments[0]);                              return expression;                          }                      }                  }              }
Magic Number,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,ReplaceFixedVariables,The following statement contains a magic number: foreach(var varName in _variableValueMapping.Keys)              {                  if (_selectVars.Contains(varName))                  {                      // selected variables cannot be replaced                      continue;                  }                  var matchPattern = @"([\s+|\.|\{|\(])\?(" + Regex.Escape(varName) + @")([\s+|'|=|]|\.|\))";                  var name = varName;                  query = Regex.Replace(query' matchPattern' m => m.Groups[1] + _variableValueMapping[name] +                                                                  m.Groups[3]);              }
Magic Number,BrightstarDB.Model,Curie,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Model\Curie.cs,Curie,The following statement contains a magic number: if (curie.StartsWith("[") && curie.EndsWith("]"))              {                  curie = curie.Substring(1' curie.Length - 2);              }
Magic Number,BrightstarDB.Model,Curie,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Model\Curie.cs,Curie,The following statement contains a magic number: if (curie.IndexOf(":") > 0)              {                  var split = curie.Split(':');                  if (split.Count() == 2)                  {                      Prefix = split[0];                      Suffix = split[1];                      IsValidCurie = true;                  }              }
Magic Number,BrightstarDB.Profiling,BrightstarProfiler,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Profiling\BrightstarProfiler.cs,BrightstarProfiler,The following statement contains a magic number: Counters = new Dictionary<string' long>(10);
Magic Number,BrightstarDB.Profiling,BrightstarProfiler,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Profiling\BrightstarProfiler.cs,GetRoundedMilliseconds,The following statement contains a magic number: long z = 10000*stopwatchElapsedTicks;
Magic Number,BrightstarDB.Profiling,BrightstarProfiler,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Profiling\BrightstarProfiler.cs,GetRoundedMilliseconds,The following statement contains a magic number: return msTimesTen/10;
Magic Number,BrightstarDB.Query,BrightstarFunctionFactory,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\BrightstarFunctionFactory.cs,TryCreateExpression,The following statement contains a magic number: if (func.StartsWith(BrightstarFunctionsNamespace))              {                  func = func.Substring(BrightstarFunctionsNamespace.Length);                  ISparqlExpression brightstarFunc = null;                  switch (func)                  {                      case BitAnd:                          if (args.Count == 2)                          {                              brightstarFunc = new BitAndFunc(args[0]' args[1]);                          }                           else                          {                              throw new RdfParseException("Incorrect number of arguments for the BrightstarDB bit_and() function.");                          }                          break;                      case BitOr:                          if (args.Count == 2)                          {                              brightstarFunc = new BitOrFunc(args[0]' args[1]);                          }                          else                          {                              throw new RdfParseException("Incorrect number of arguments for the BrightstarDB bit_and() function.");                          }                          break;                  }                  if (brightstarFunc != null)                  {                      expr = brightstarFunc;                      return true;                  }              }
Magic Number,BrightstarDB.Query,BrightstarFunctionFactory,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\BrightstarFunctionFactory.cs,TryCreateExpression,The following statement contains a magic number: if (func.StartsWith(BrightstarFunctionsNamespace))              {                  func = func.Substring(BrightstarFunctionsNamespace.Length);                  ISparqlExpression brightstarFunc = null;                  switch (func)                  {                      case BitAnd:                          if (args.Count == 2)                          {                              brightstarFunc = new BitAndFunc(args[0]' args[1]);                          }                           else                          {                              throw new RdfParseException("Incorrect number of arguments for the BrightstarDB bit_and() function.");                          }                          break;                      case BitOr:                          if (args.Count == 2)                          {                              brightstarFunc = new BitOrFunc(args[0]' args[1]);                          }                          else                          {                              throw new RdfParseException("Incorrect number of arguments for the BrightstarDB bit_and() function.");                          }                          break;                  }                  if (brightstarFunc != null)                  {                      expr = brightstarFunc;                      return true;                  }              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (subj.StartsWith("<"))              {                  // uri                  subject = subj.Substring(1' subj.Length - 2);              }              else if (subj.StartsWith("_:"))              {                  // blank node                  subject = subj.Substring(2' subj.Length - 2);                  subjectIsBNode = true;              }              else              {                  throw new RdfParserException(lineNumber' "Invalid triple. Subject URI or blank node expected.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (subj.StartsWith("<"))              {                  // uri                  subject = subj.Substring(1' subj.Length - 2);              }              else if (subj.StartsWith("_:"))              {                  // blank node                  subject = subj.Substring(2' subj.Length - 2);                  subjectIsBNode = true;              }              else              {                  throw new RdfParserException(lineNumber' "Invalid triple. Subject URI or blank node expected.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (subj.StartsWith("<"))              {                  // uri                  subject = subj.Substring(1' subj.Length - 2);              }              else if (subj.StartsWith("_:"))              {                  // blank node                  subject = subj.Substring(2' subj.Length - 2);                  subjectIsBNode = true;              }              else              {                  throw new RdfParserException(lineNumber' "Invalid triple. Subject URI or blank node expected.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (pred.StartsWith("<"))              {                  // uri                  predicate = pred.Substring(1' pred.Length - 2);              }              else if (pred.StartsWith("_:"))              {                  predicate = pred.Substring(2);                  predicateIsBNode = true;              }              else              {                  throw new RdfParserException("Invalid triple. Predicate URI or blank node expected.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (pred.StartsWith("<"))              {                  // uri                  predicate = pred.Substring(1' pred.Length - 2);              }              else if (pred.StartsWith("_:"))              {                  predicate = pred.Substring(2);                  predicateIsBNode = true;              }              else              {                  throw new RdfParserException("Invalid triple. Predicate URI or blank node expected.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (line.StartsWith("<"' StringComparison.OrdinalIgnoreCase))              {                  int lastAngle = line.IndexOf(">"' StringComparison.OrdinalIgnoreCase);                  string objectUri = line.Substring(1' lastAngle - 1);                    line = line.Substring(lastAngle + 1);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' objectUri' false' false' null'                                   null' graphUri);                  }                  catch (InvalidTripleException ex)                  {                      throw new RdfParserException(lineNumber' ex.Message);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else if (line.StartsWith("\""))              {                  // get string in quotes                  int lastQuote = line.LastIndexOf("\""' StringComparison.OrdinalIgnoreCase);                    string literalValue = line.Substring(1' lastQuote - 1);                    //literalValue = UnEscapeLiteralValue(literalValue);                  literalValue = UnescapeLiteral(literalValue);                    // check for lang code or data type                  line = line.Substring(lastQuote + 1).Trim();                    if (line.StartsWith("@"))                  {                      // langcode                      int index = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                      if (index < 0) index = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                      string langCode = line.Substring(1' index - 1).Trim();                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' langCode' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else if (line.StartsWith("^^"))                  {                      // data type                      var index = line.IndexOf('>');                      var dataType = line.Substring(3' index - 3);                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       dataType' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else                  {                      var graphUri = CheckContextForGraphUri(line);                      try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }              }              else if (line.StartsWith("_:"' StringComparison.OrdinalIgnoreCase))              {                  int end = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("."' StringComparison.OrdinalIgnoreCase);                    string bnodeId = line.Substring(2' end - 2).Trim();                    line = line.Substring(end);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      // create triple                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' bnodeId' true' false' null' null'                                   graphUri);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else              {                  throw new RdfParserException(lineNumber'                                               "Invalid triple. Expected object URI' blank node or literal value.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (line.StartsWith("<"' StringComparison.OrdinalIgnoreCase))              {                  int lastAngle = line.IndexOf(">"' StringComparison.OrdinalIgnoreCase);                  string objectUri = line.Substring(1' lastAngle - 1);                    line = line.Substring(lastAngle + 1);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' objectUri' false' false' null'                                   null' graphUri);                  }                  catch (InvalidTripleException ex)                  {                      throw new RdfParserException(lineNumber' ex.Message);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else if (line.StartsWith("\""))              {                  // get string in quotes                  int lastQuote = line.LastIndexOf("\""' StringComparison.OrdinalIgnoreCase);                    string literalValue = line.Substring(1' lastQuote - 1);                    //literalValue = UnEscapeLiteralValue(literalValue);                  literalValue = UnescapeLiteral(literalValue);                    // check for lang code or data type                  line = line.Substring(lastQuote + 1).Trim();                    if (line.StartsWith("@"))                  {                      // langcode                      int index = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                      if (index < 0) index = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                      string langCode = line.Substring(1' index - 1).Trim();                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' langCode' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else if (line.StartsWith("^^"))                  {                      // data type                      var index = line.IndexOf('>');                      var dataType = line.Substring(3' index - 3);                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       dataType' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else                  {                      var graphUri = CheckContextForGraphUri(line);                      try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }              }              else if (line.StartsWith("_:"' StringComparison.OrdinalIgnoreCase))              {                  int end = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("."' StringComparison.OrdinalIgnoreCase);                    string bnodeId = line.Substring(2' end - 2).Trim();                    line = line.Substring(end);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      // create triple                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' bnodeId' true' false' null' null'                                   graphUri);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else              {                  throw new RdfParserException(lineNumber'                                               "Invalid triple. Expected object URI' blank node or literal value.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (line.StartsWith("<"' StringComparison.OrdinalIgnoreCase))              {                  int lastAngle = line.IndexOf(">"' StringComparison.OrdinalIgnoreCase);                  string objectUri = line.Substring(1' lastAngle - 1);                    line = line.Substring(lastAngle + 1);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' objectUri' false' false' null'                                   null' graphUri);                  }                  catch (InvalidTripleException ex)                  {                      throw new RdfParserException(lineNumber' ex.Message);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else if (line.StartsWith("\""))              {                  // get string in quotes                  int lastQuote = line.LastIndexOf("\""' StringComparison.OrdinalIgnoreCase);                    string literalValue = line.Substring(1' lastQuote - 1);                    //literalValue = UnEscapeLiteralValue(literalValue);                  literalValue = UnescapeLiteral(literalValue);                    // check for lang code or data type                  line = line.Substring(lastQuote + 1).Trim();                    if (line.StartsWith("@"))                  {                      // langcode                      int index = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                      if (index < 0) index = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                      string langCode = line.Substring(1' index - 1).Trim();                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' langCode' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else if (line.StartsWith("^^"))                  {                      // data type                      var index = line.IndexOf('>');                      var dataType = line.Substring(3' index - 3);                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       dataType' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else                  {                      var graphUri = CheckContextForGraphUri(line);                      try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }              }              else if (line.StartsWith("_:"' StringComparison.OrdinalIgnoreCase))              {                  int end = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("."' StringComparison.OrdinalIgnoreCase);                    string bnodeId = line.Substring(2' end - 2).Trim();                    line = line.Substring(end);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      // create triple                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' bnodeId' true' false' null' null'                                   graphUri);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else              {                  throw new RdfParserException(lineNumber'                                               "Invalid triple. Expected object URI' blank node or literal value.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ParseLine,The following statement contains a magic number: if (line.StartsWith("<"' StringComparison.OrdinalIgnoreCase))              {                  int lastAngle = line.IndexOf(">"' StringComparison.OrdinalIgnoreCase);                  string objectUri = line.Substring(1' lastAngle - 1);                    line = line.Substring(lastAngle + 1);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' objectUri' false' false' null'                                   null' graphUri);                  }                  catch (InvalidTripleException ex)                  {                      throw new RdfParserException(lineNumber' ex.Message);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else if (line.StartsWith("\""))              {                  // get string in quotes                  int lastQuote = line.LastIndexOf("\""' StringComparison.OrdinalIgnoreCase);                    string literalValue = line.Substring(1' lastQuote - 1);                    //literalValue = UnEscapeLiteralValue(literalValue);                  literalValue = UnescapeLiteral(literalValue);                    // check for lang code or data type                  line = line.Substring(lastQuote + 1).Trim();                    if (line.StartsWith("@"))                  {                      // langcode                      int index = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                      if (index < 0) index = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                      string langCode = line.Substring(1' index - 1).Trim();                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' langCode' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else if (line.StartsWith("^^"))                  {                      // data type                      var index = line.IndexOf('>');                      var dataType = line.Substring(3' index - 3);                        line = line.Substring(index + 1);                      var graphUri = CheckContextForGraphUri(line);                        try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       dataType' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }                  else                  {                      var graphUri = CheckContextForGraphUri(line);                      try                      {                          _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' literalValue' false' true'                                       RdfDatatypes.PlainLiteral' null' graphUri);                      }                      catch (Exception ex)                      {                          throw new TripleSinkException(ex);                      }                  }              }              else if (line.StartsWith("_:"' StringComparison.OrdinalIgnoreCase))              {                  int end = line.IndexOf(" "' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("\t"' StringComparison.OrdinalIgnoreCase);                  if (end < 0) end = line.IndexOf("."' StringComparison.OrdinalIgnoreCase);                    string bnodeId = line.Substring(2' end - 2).Trim();                    line = line.Substring(end);                  var graphUri = CheckContextForGraphUri(line);                    try                  {                      // create triple                      _sink.Triple(subject' subjectIsBNode' predicate' predicateIsBNode' bnodeId' true' false' null' null'                                   graphUri);                  }                  catch (Exception ex)                  {                      throw new TripleSinkException(ex);                  }              }              else              {                  throw new RdfParserException(lineNumber'                                               "Invalid triple. Expected object URI' blank node or literal value.");              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,UnescapeLiteral,The following statement contains a magic number: var utf16Buff = new char[4];
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,UnescapeLiteral,The following statement contains a magic number: var utf32Buff = new char[8];
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,UnescapeLiteral,The following statement contains a magic number: foreach (var c in value)              {                  if (inEscape)                  {                      switch (c)                      {                          case '\\':                              ret.Append(c);                              break;                          case 't':                              ret.Append('\t');                              break;                          case 'b':                              ret.Append('\b');                              break;                          case 'n':                              ret.Append('\n');                              break;                          case 'r':                              ret.Append('\r');                              break;                          case 'f':                              ret.Append('\f');                              break;                          case '"':                              ret.Append('"');                              break;                          case '\'':                              ret.Append('\'');                              break;                          case 'u':                              inUtf16 = true;                              unicodeCharIx = 0;                              break;                          case 'U':                              inUtf32 = true;                              unicodeCharIx = 0;                              break;                          case '~':                          case '.':                          case '-':                          case '!':                          case '$':                          case '&':                          case '(':                          case ')':                          case '*':                          case '+':                          case ''':                          case ';':                          case '=':                          case '/':                          case '?':                          case '#':                          case '@':                          case '%':                          case '_':                              ret.Append(c);                              break;                          default:                              throw new FormatException("Unrecognized escape sequence \\" + c + " in literal \"" + value + "\"");                      }                      inEscape = false;                  }                  else if (inUtf16)                  {                      if (!IsHexDigit(c))                      {                          throw new FormatException("Unexpected non hex digit in unicode escaped string: " + c);                      }                      utf16Buff[unicodeCharIx++] = c;                      if (unicodeCharIx == 4)                      {                          ret.Append(ConvertToUtf16Char(new string(utf16Buff)));                          unicodeCharIx = 0;                          inUtf16 = false;                      }                  }                  else if (inUtf32)                  {                      if (!IsHexDigit(c))                      {                          throw new FormatException("Unexpected non hex digit in unicode escaped string: " + c);                      }                      utf32Buff[unicodeCharIx++] = c;                      if (unicodeCharIx == 4)                      {                          ret.Append(ConvertToUtf32Char(new string(utf32Buff)));                          unicodeCharIx = 0;                          inUtf32 = false;                      }                  }                  else                  {                      if (c == '\\')                      {                          inEscape = true;                      }                      else                      {                          ret.Append(c);                      }                  }              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,UnescapeLiteral,The following statement contains a magic number: foreach (var c in value)              {                  if (inEscape)                  {                      switch (c)                      {                          case '\\':                              ret.Append(c);                              break;                          case 't':                              ret.Append('\t');                              break;                          case 'b':                              ret.Append('\b');                              break;                          case 'n':                              ret.Append('\n');                              break;                          case 'r':                              ret.Append('\r');                              break;                          case 'f':                              ret.Append('\f');                              break;                          case '"':                              ret.Append('"');                              break;                          case '\'':                              ret.Append('\'');                              break;                          case 'u':                              inUtf16 = true;                              unicodeCharIx = 0;                              break;                          case 'U':                              inUtf32 = true;                              unicodeCharIx = 0;                              break;                          case '~':                          case '.':                          case '-':                          case '!':                          case '$':                          case '&':                          case '(':                          case ')':                          case '*':                          case '+':                          case ''':                          case ';':                          case '=':                          case '/':                          case '?':                          case '#':                          case '@':                          case '%':                          case '_':                              ret.Append(c);                              break;                          default:                              throw new FormatException("Unrecognized escape sequence \\" + c + " in literal \"" + value + "\"");                      }                      inEscape = false;                  }                  else if (inUtf16)                  {                      if (!IsHexDigit(c))                      {                          throw new FormatException("Unexpected non hex digit in unicode escaped string: " + c);                      }                      utf16Buff[unicodeCharIx++] = c;                      if (unicodeCharIx == 4)                      {                          ret.Append(ConvertToUtf16Char(new string(utf16Buff)));                          unicodeCharIx = 0;                          inUtf16 = false;                      }                  }                  else if (inUtf32)                  {                      if (!IsHexDigit(c))                      {                          throw new FormatException("Unexpected non hex digit in unicode escaped string: " + c);                      }                      utf32Buff[unicodeCharIx++] = c;                      if (unicodeCharIx == 4)                      {                          ret.Append(ConvertToUtf32Char(new string(utf32Buff)));                          unicodeCharIx = 0;                          inUtf32 = false;                      }                  }                  else                  {                      if (c == '\\')                      {                          inEscape = true;                      }                      else                      {                          ret.Append(c);                      }                  }              }
Magic Number,BrightstarDB.Rdf,NTriplesParser,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Rdf\NTriplesParser.cs,ConvertToUtf16Char,The following statement contains a magic number: try              {                  ushort i = Convert.ToUInt16(hex' 16);                  return Convert.ToChar(i);              }              catch              {                  throw new FormatException(String.Format("Unable to convert hex value {0} to a UTF-16 character"' hex));              }
Magic Number,BrightstarDB.Server,ImportJob,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ImportJob.cs,Triple,The following statement contains a magic number: if (_tripleCount % 1000 == 0)              {                  var percentComplete = ((double)_fileStream.Position / (_fileStream.Length));                  var jobStatus = StoreWorker.GetJobStatus(JobId.ToString());                  if (jobStatus != null)                  {                      jobStatus.Information = String.Format("Imported {0:N0} triples. Approximately {1:P1} complete"'                                                            _tripleCount' percentComplete);                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeConfiguration,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeConfiguration.cs,BPlusTreeConfiguration,The following statement contains a magic number: InternalSplitIndex = InternalBranchFactor/2;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeConfiguration,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeConfiguration.cs,BPlusTreeConfiguration,The following statement contains a magic number: LeafSplitIndex = LeafLoadFactor/2;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,InternalNode,The following statement contains a magic number: _page.SetData(BitConverter.GetBytes(leftPageId)' 0' PointerOffset(0)' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,InternalNode,The following statement contains a magic number: _page.SetData(BitConverter.GetBytes(rightPageId)' 0' PointerOffset(1)' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,InternalNode,The following statement contains a magic number: _page.SetData(BitConverter.GetBytes(onlyChild)' 0' PointerOffset(0)' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,InternalNode,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i < KeyCount + 1; i++' pointerOffset += 8)              {                  _page.SetData(BitConverter.GetBytes(values[i])' 0' pointerOffset' 8);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,InternalNode,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i < KeyCount + 1; i++' pointerOffset += 8)              {                  _page.SetData(BitConverter.GetBytes(values[i])' 0' pointerOffset' 8);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,DumpStructure,The following statement contains a magic number: var keyPrefix = new string(' '' indentLevel * 4);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Merge,The following statement contains a magic number: if (sibling.KeyCount + KeyCount < _config.InternalBranchFactor)              {                  if (sibling.LeftmostKey.Compare(RightmostKey) > 0)                  {                      EnsureWriteable(txnId);                      // Append join key followed by all of sibling's entries                      _page.SetData(joinKey' 0' KeyOffset(KeyCount)' _config.KeySize);                      _page.SetData(sibling.GetData()' KeyOffset(0)'                                    KeyOffset(KeyCount + 1)'                                    sibling.KeyCount*_config.KeySize);                      _page.SetData(sibling.GetData()' PointerOffset(0)'                                    PointerOffset(KeyCount + 1)'                                    (sibling.KeyCount + 1)*8);                      KeyCount = KeyCount + sibling.KeyCount + 1;                      return true;                  }                  throw new InvalidOperationException("Attempted to merge in left node.");              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Split,The following statement contains a magic number: var pointerCopyLength = (KeyCount - splitIndex)*8;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Split,The following statement contains a magic number: rightNodePage.SetData(BitConverter.GetBytes(~rightNodeKeyCount)' 0' 0' 4);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Insert,The following statement contains a magic number: _page.SetData(BitConverter.GetBytes(childPointer)' 0'                            PointerOffset(insertIndex + 1)' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,UpdateChildPointer,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' ocp' 0' 8) == 0)                  {                      _page.SetData(ncp' 0' pointerOffset' 8);  #if DEBUG_BTREE                      _config.BTreeDebug("InternalNode.UpdateChildPointer. Old={0}' New={1}. After: Id={2} {3}"'                          oldChildPointer' newChildPointer' PageId' Dump());  #endif                      return;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,UpdateChildPointer,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' ocp' 0' 8) == 0)                  {                      _page.SetData(ncp' 0' pointerOffset' 8);  #if DEBUG_BTREE                      _config.BTreeDebug("InternalNode.UpdateChildPointer. Old={0}' New={1}. After: Id={2} {3}"'                          oldChildPointer' newChildPointer' PageId' Dump());  #endif                      return;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,UpdateChildPointer,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' ocp' 0' 8) == 0)                  {                      _page.SetData(ncp' 0' pointerOffset' 8);  #if DEBUG_BTREE                      _config.BTreeDebug("InternalNode.UpdateChildPointer. Old={0}' New={1}. After: Id={2} {3}"'                          oldChildPointer' newChildPointer' PageId' Dump());  #endif                      return;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetRightSiblingId,The following statement contains a magic number: for(i=0'pointerOffset=PointerOffset(0); i < KeyCount; i++' pointerOffset+=8)              {                  if (_page.Data.Compare(pointerOffset' cni' 0' 8) == 0)                  {                      rightSiblingId = GetPointer(i + 1);                      return true;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetRightSiblingId,The following statement contains a magic number: for(i=0'pointerOffset=PointerOffset(0); i < KeyCount; i++' pointerOffset+=8)              {                  if (_page.Data.Compare(pointerOffset' cni' 0' 8) == 0)                  {                      rightSiblingId = GetPointer(i + 1);                      return true;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetLeftSibling,The following statement contains a magic number: if (_page.Data.Compare(PointerOffset(0)' cni' 0' 8) == 0)              {                  // First child has no left sibling                  leftSiblingId = 0;                  return false;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetLeftSibling,The following statement contains a magic number: for (i = 1' pointerOffset=PointerOffset(1); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' cni' 0' 8) == 0)                  {                      leftSiblingId = GetPointer(i - 1);                      return true;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetLeftSibling,The following statement contains a magic number: for (i = 1' pointerOffset=PointerOffset(1); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' cni' 0' 8) == 0)                  {                      leftSiblingId = GetPointer(i - 1);                      return true;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RedistributeFromLeft,The following statement contains a magic number: int evenOut = (KeyCount + left.KeyCount)/2 - KeyCount;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RedistributeFromLeft,The following statement contains a magic number: _page.SetData(left.GetData()' PointerOffset(left.KeyCount - (required - 1))'                            PointerOffset(0)' (required)*8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RedistributeFromRight,The following statement contains a magic number: _page.SetData(right.GetData()' PointerOffset(0)'                            PointerOffset(KeyCount + 1)' required*8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,SetLeftKey,The following statement contains a magic number: if (_page.Data.Compare(PointerOffset(0)' cni' 0' 8) == 0)              {                  // First pointer doesn't have a corresponding key to update                  return;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,SetLeftKey,The following statement contains a magic number: for (i = 1' pointerOffset = PointerOffset(1); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' cni' 0' 8) == 0)                  {                      EnsureWriteable(txnId);                      _page.SetData(childNodeKey' 0' KeyOffset(i - 1)' _config.KeySize);                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,SetLeftKey,The following statement contains a magic number: for (i = 1' pointerOffset = PointerOffset(1); i <= KeyCount; i++' pointerOffset += 8)              {                  if (_page.Data.Compare(pointerOffset' cni' 0' 8) == 0)                  {                      EnsureWriteable(txnId);                      _page.SetData(childNodeKey' 0' KeyOffset(i - 1)' _config.KeySize);                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Scan,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0)' keyOffset = KeyOffset(0);                   i < KeyCount;                   i++' pointerOffset += 8' keyOffset += _config.KeySize)              {                  if (fromKey.Compare(0' _page.Data' keyOffset' _config.KeySize) < 0)                  {                      yield return GetPointer(i);                      if (toKey.Compare(0' _page.Data' keyOffset' _config.KeySize) < 0)                      {                          yield break;                      }                  }                  if (toKey.Compare(0' _page.Data' keyOffset' _config.KeySize) < 0)                  {                      yield return GetPointer(i);                      yield break;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,PointerOffset,The following statement contains a magic number: return _config.InternalNodeChildStartOffset + (pointerIx*8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetPointer,The following statement contains a magic number: byte[] buff = new byte[8];
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,GetPointer,The following statement contains a magic number: Array.Copy(_page.Data' PointerOffset(pointerIx)' buff' 0' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Search,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i < KeyCount + 1; i++' pointerOffset+=8)              {                  var cmp = _page.Data.Compare(pointerOffset' p' 0' 8);                  if ( cmp == 0)                  {                      return i;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,Search,The following statement contains a magic number: for (i = 0' pointerOffset = PointerOffset(0); i < KeyCount + 1; i++' pointerOffset+=8)              {                  var cmp = _page.Data.Compare(pointerOffset' p' 0' 8);                  if ( cmp == 0)                  {                      return i;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RightShiftFrom,The following statement contains a magic number: int pointerShift = numPlaces*8;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RightShiftFrom,The following statement contains a magic number: _page.SetData(_page.Data' lastPointerOffset' lastPointerOffset+pointerShift' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RightShiftFrom,The following statement contains a magic number: for (i = KeyCount - 1'                   keyOffset = KeyOffset(KeyCount - 1)'                   pointerOffset = PointerOffset(KeyCount - 1);                   i >= ix;                   i--' keyOffset -= _config.KeySize' pointerOffset -= 8)              {                  _page.SetData(_page.Data' keyOffset' keyOffset + keyShift' _config.KeySize);                  _page.SetData(_page.Data' pointerOffset' pointerOffset + pointerShift' 8);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,RightShiftFrom,The following statement contains a magic number: for (i = KeyCount - 1'                   keyOffset = KeyOffset(KeyCount - 1)'                   pointerOffset = PointerOffset(KeyCount - 1);                   i >= ix;                   i--' keyOffset -= _config.KeySize' pointerOffset -= 8)              {                  _page.SetData(_page.Data' keyOffset' keyOffset + keyShift' _config.KeySize);                  _page.SetData(_page.Data' pointerOffset' pointerOffset + pointerShift' 8);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,InternalNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\InternalNode.cs,LeftShiftFrom,The following statement contains a magic number: _page.SetData(_page.Data' PointerOffset(ix + numPlaces)'                            PointerOffset(ix)' (KeyCount - ix - numPlaces + 1)*8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,LeafNode,The following statement contains a magic number: _prevPointer = BitConverter.ToUInt64(_page.Data' 4);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,LeafNode,The following statement contains a magic number: _nextPointer = BitConverter.ToUInt64(_page.Data' 12);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,Split,The following statement contains a magic number: rightNodePage.SetData(BitConverter.GetBytes(rightNodeKeyCount)' 0' 0' 4);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,RedistributeFromLeft,The following statement contains a magic number: int copyCount = (KeyCount + left.KeyCount)/2 - KeyCount;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,RedistributeFromRight,The following statement contains a magic number: int copyCount = (KeyCount + rightNode.KeyCount)/2 - KeyCount;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,LeafNode,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\LeafNode.cs,DumpStructure,The following statement contains a magic number: Console.WriteLine("{0}LEAF@{1}[{2} keys: {3} - {4}]"'                  new string(' '' indentLevel*4)' PageId' KeyCount' LeftmostKey.Dump()' RightmostKey.Dump());
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,InterlockedLoad,The following statement contains a magic number: using (profiler.Step("PrefixManager.InterlockedLoad"))              {                  int offset = 0;                  while (offset < _pageStore.PageSize)                  {                      ushort prefixLength = BitConverter.ToUInt16(page.Data' offset);                      offset += 2;                      if (prefixLength == ushort.MaxValue)                      {                          ulong nextPageId = BitConverter.ToUInt64(page.Data' offset);                          if (nextPageId == 0)                          {                              // End of data                              return;                          }                          page = _pageStore.Retrieve(nextPageId' profiler);                          offset = 0;                      }                      else                      {                          var prefix = Encoding.UTF8.GetString(page.Data' offset' prefixLength);                          offset += prefixLength;                          var uriLen = BitConverter.ToUInt16(page.Data' offset);                          offset += 2;                          var uri = Encoding.UTF8.GetString(page.Data' offset' uriLen);                          offset += uriLen;                          _prefixMappings[uri] = prefix;                          _shortValueMappings[prefix] = uri;                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,InterlockedLoad,The following statement contains a magic number: using (profiler.Step("PrefixManager.InterlockedLoad"))              {                  int offset = 0;                  while (offset < _pageStore.PageSize)                  {                      ushort prefixLength = BitConverter.ToUInt16(page.Data' offset);                      offset += 2;                      if (prefixLength == ushort.MaxValue)                      {                          ulong nextPageId = BitConverter.ToUInt64(page.Data' offset);                          if (nextPageId == 0)                          {                              // End of data                              return;                          }                          page = _pageStore.Retrieve(nextPageId' profiler);                          offset = 0;                      }                      else                      {                          var prefix = Encoding.UTF8.GetString(page.Data' offset' prefixLength);                          offset += prefixLength;                          var uriLen = BitConverter.ToUInt16(page.Data' offset);                          offset += 2;                          var uri = Encoding.UTF8.GetString(page.Data' offset' uriLen);                          offset += uriLen;                          _prefixMappings[uri] = prefix;                          _shortValueMappings[prefix] = uri;                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,Write,The following statement contains a magic number: foreach (var entry in _shortValueMappings)              {                  byte[] encodedPrefix = Encoding.UTF8.GetBytes(entry.Key);                  byte[] encodedUri = Encoding.UTF8.GetBytes(entry.Value);                  int totalLength = encodedUri.Length + encodedPrefix.Length + 4;                  if (offset + totalLength > (pageStore.PageSize - 10))                  {                      // Not enough room for the entry and the next page pointer                      // So create a new page for this entry and write a pointer to it                      // onto the current page                      IPage nextPage = pageStore.Create(transactionId);                      BitConverter.GetBytes(ushort.MaxValue).CopyTo(buff' offset);                      offset += 2;                      BitConverter.GetBytes(nextPage.Id).CopyTo(buff' offset);                      currentPage.SetData(buff);                      currentPage = nextPage;                      buff = new byte[pageStore.PageSize];                      offset = 0;                  }                  BitConverter.GetBytes((ushort)encodedPrefix.Length).CopyTo(buff' offset);                  offset += 2;                  encodedPrefix.CopyTo(buff' offset);                  offset += encodedPrefix.Length;                  BitConverter.GetBytes((ushort)encodedUri.Length).CopyTo(buff' offset);                  offset += 2;                  encodedUri.CopyTo(buff' offset);                  offset += encodedUri.Length;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,Write,The following statement contains a magic number: foreach (var entry in _shortValueMappings)              {                  byte[] encodedPrefix = Encoding.UTF8.GetBytes(entry.Key);                  byte[] encodedUri = Encoding.UTF8.GetBytes(entry.Value);                  int totalLength = encodedUri.Length + encodedPrefix.Length + 4;                  if (offset + totalLength > (pageStore.PageSize - 10))                  {                      // Not enough room for the entry and the next page pointer                      // So create a new page for this entry and write a pointer to it                      // onto the current page                      IPage nextPage = pageStore.Create(transactionId);                      BitConverter.GetBytes(ushort.MaxValue).CopyTo(buff' offset);                      offset += 2;                      BitConverter.GetBytes(nextPage.Id).CopyTo(buff' offset);                      currentPage.SetData(buff);                      currentPage = nextPage;                      buff = new byte[pageStore.PageSize];                      offset = 0;                  }                  BitConverter.GetBytes((ushort)encodedPrefix.Length).CopyTo(buff' offset);                  offset += 2;                  encodedPrefix.CopyTo(buff' offset);                  offset += encodedPrefix.Length;                  BitConverter.GetBytes((ushort)encodedUri.Length).CopyTo(buff' offset);                  offset += 2;                  encodedUri.CopyTo(buff' offset);                  offset += encodedUri.Length;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,Write,The following statement contains a magic number: foreach (var entry in _shortValueMappings)              {                  byte[] encodedPrefix = Encoding.UTF8.GetBytes(entry.Key);                  byte[] encodedUri = Encoding.UTF8.GetBytes(entry.Value);                  int totalLength = encodedUri.Length + encodedPrefix.Length + 4;                  if (offset + totalLength > (pageStore.PageSize - 10))                  {                      // Not enough room for the entry and the next page pointer                      // So create a new page for this entry and write a pointer to it                      // onto the current page                      IPage nextPage = pageStore.Create(transactionId);                      BitConverter.GetBytes(ushort.MaxValue).CopyTo(buff' offset);                      offset += 2;                      BitConverter.GetBytes(nextPage.Id).CopyTo(buff' offset);                      currentPage.SetData(buff);                      currentPage = nextPage;                      buff = new byte[pageStore.PageSize];                      offset = 0;                  }                  BitConverter.GetBytes((ushort)encodedPrefix.Length).CopyTo(buff' offset);                  offset += 2;                  encodedPrefix.CopyTo(buff' offset);                  offset += encodedPrefix.Length;                  BitConverter.GetBytes((ushort)encodedUri.Length).CopyTo(buff' offset);                  offset += 2;                  encodedUri.CopyTo(buff' offset);                  offset += encodedUri.Length;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,Write,The following statement contains a magic number: foreach (var entry in _shortValueMappings)              {                  byte[] encodedPrefix = Encoding.UTF8.GetBytes(entry.Key);                  byte[] encodedUri = Encoding.UTF8.GetBytes(entry.Value);                  int totalLength = encodedUri.Length + encodedPrefix.Length + 4;                  if (offset + totalLength > (pageStore.PageSize - 10))                  {                      // Not enough room for the entry and the next page pointer                      // So create a new page for this entry and write a pointer to it                      // onto the current page                      IPage nextPage = pageStore.Create(transactionId);                      BitConverter.GetBytes(ushort.MaxValue).CopyTo(buff' offset);                      offset += 2;                      BitConverter.GetBytes(nextPage.Id).CopyTo(buff' offset);                      currentPage.SetData(buff);                      currentPage = nextPage;                      buff = new byte[pageStore.PageSize];                      offset = 0;                  }                  BitConverter.GetBytes((ushort)encodedPrefix.Length).CopyTo(buff' offset);                  offset += 2;                  encodedPrefix.CopyTo(buff' offset);                  offset += encodedPrefix.Length;                  BitConverter.GetBytes((ushort)encodedUri.Length).CopyTo(buff' offset);                  offset += 2;                  encodedUri.CopyTo(buff' offset);                  offset += encodedUri.Length;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,Write,The following statement contains a magic number: foreach (var entry in _shortValueMappings)              {                  byte[] encodedPrefix = Encoding.UTF8.GetBytes(entry.Key);                  byte[] encodedUri = Encoding.UTF8.GetBytes(entry.Value);                  int totalLength = encodedUri.Length + encodedPrefix.Length + 4;                  if (offset + totalLength > (pageStore.PageSize - 10))                  {                      // Not enough room for the entry and the next page pointer                      // So create a new page for this entry and write a pointer to it                      // onto the current page                      IPage nextPage = pageStore.Create(transactionId);                      BitConverter.GetBytes(ushort.MaxValue).CopyTo(buff' offset);                      offset += 2;                      BitConverter.GetBytes(nextPage.Id).CopyTo(buff' offset);                      currentPage.SetData(buff);                      currentPage = nextPage;                      buff = new byte[pageStore.PageSize];                      offset = 0;                  }                  BitConverter.GetBytes((ushort)encodedPrefix.Length).CopyTo(buff' offset);                  offset += 2;                  encodedPrefix.CopyTo(buff' offset);                  offset += encodedPrefix.Length;                  BitConverter.GetBytes((ushort)encodedUri.Length).CopyTo(buff' offset);                  offset += 2;                  encodedUri.CopyTo(buff' offset);                  offset += encodedUri.Length;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,PrefixManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\PrefixManager.cs,Write,The following statement contains a magic number: offset += 2;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,ResourceTable,The following statement contains a magic number: _pointerSegment = (byte) ((_pageStore.PageSize - 8)/_segmentSize);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: if (pageSize <= 4096)              {                  return 16;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: if (pageSize <= 4096)              {                  return 16;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: if (pageSize <= 8192)              {                  return 32;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: if (pageSize <= 8192)              {                  return 32;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: if (pageSize < 16384)              {                  return 64;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: if (pageSize < 16384)              {                  return 64;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,CalculateSegmentSize,The following statement contains a magic number: return 128;
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,GetResource,The following statement contains a magic number: using (profiler.Step("ResourceTable.GetResource"))              {                  var currentPage = _pageStore.Retrieve(pageId' profiler);                  int resourceLength = BitConverter.ToInt32(currentPage.Data' segment*_segmentSize);                  int totalLength = resourceLength + 4;                  int segmentsToLoad = totalLength/_segmentSize;                  if (totalLength%_segmentSize > 0) segmentsToLoad++;                  var buffer = new byte[segmentsToLoad*_segmentSize];                  byte segmentIndex = segment;                  for (int i = 0; i < segmentsToLoad; i++)                  {                      if (segmentIndex == _pointerSegment)                      {                          ulong nextPageId = BitConverter.ToUInt64(currentPage.Data' _pageStore.PageSize - 8);                          currentPage = _pageStore.Retrieve(nextPageId' profiler);                          segmentIndex = 0;                      }                      Array.Copy(currentPage.Data' segmentIndex*_segmentSize' buffer' i*_segmentSize' _segmentSize);                      segmentIndex++;                  }                  return Encoding.UTF8.GetString(buffer' 4' resourceLength);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,GetResource,The following statement contains a magic number: using (profiler.Step("ResourceTable.GetResource"))              {                  var currentPage = _pageStore.Retrieve(pageId' profiler);                  int resourceLength = BitConverter.ToInt32(currentPage.Data' segment*_segmentSize);                  int totalLength = resourceLength + 4;                  int segmentsToLoad = totalLength/_segmentSize;                  if (totalLength%_segmentSize > 0) segmentsToLoad++;                  var buffer = new byte[segmentsToLoad*_segmentSize];                  byte segmentIndex = segment;                  for (int i = 0; i < segmentsToLoad; i++)                  {                      if (segmentIndex == _pointerSegment)                      {                          ulong nextPageId = BitConverter.ToUInt64(currentPage.Data' _pageStore.PageSize - 8);                          currentPage = _pageStore.Retrieve(nextPageId' profiler);                          segmentIndex = 0;                      }                      Array.Copy(currentPage.Data' segmentIndex*_segmentSize' buffer' i*_segmentSize' _segmentSize);                      segmentIndex++;                  }                  return Encoding.UTF8.GetString(buffer' 4' resourceLength);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,GetResource,The following statement contains a magic number: using (profiler.Step("ResourceTable.GetResource"))              {                  var currentPage = _pageStore.Retrieve(pageId' profiler);                  int resourceLength = BitConverter.ToInt32(currentPage.Data' segment*_segmentSize);                  int totalLength = resourceLength + 4;                  int segmentsToLoad = totalLength/_segmentSize;                  if (totalLength%_segmentSize > 0) segmentsToLoad++;                  var buffer = new byte[segmentsToLoad*_segmentSize];                  byte segmentIndex = segment;                  for (int i = 0; i < segmentsToLoad; i++)                  {                      if (segmentIndex == _pointerSegment)                      {                          ulong nextPageId = BitConverter.ToUInt64(currentPage.Data' _pageStore.PageSize - 8);                          currentPage = _pageStore.Retrieve(nextPageId' profiler);                          segmentIndex = 0;                      }                      Array.Copy(currentPage.Data' segmentIndex*_segmentSize' buffer' i*_segmentSize' _segmentSize);                      segmentIndex++;                  }                  return Encoding.UTF8.GetString(buffer' 4' resourceLength);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,Insert,The following statement contains a magic number: using (profiler.Step("ResourceTable.Insert"))              {                  var byteCount = Encoding.UTF8.GetByteCount(resource);                  var resourceBytes = new byte[byteCount + 4];                  BitConverter.GetBytes(byteCount).CopyTo(resourceBytes' 0);                  Encoding.UTF8.GetBytes(resource' 0' resource.Length' resourceBytes' 4);                  lock (_writeLock)                  {                      if (_nextSegment == _pointerSegment)                      {                          StartNewPage(transactionId' profiler);                      }                      pageId = _currentPage;                      segmentId = _nextSegment;                      for (int i = 0; i < (byteCount + 4); i += _segmentSize)                      {                          _pageStore.Write(transactionId' _currentPage' resourceBytes' i' _nextSegment*_segmentSize'                                           _segmentSize < (byteCount + 4 - i) ? _segmentSize : (byteCount + 4 - i)'                                           profiler);                          _nextSegment++;                          if (_nextSegment == _pointerSegment)                          {                              StartNewPage(transactionId' profiler);                          }                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,Insert,The following statement contains a magic number: using (profiler.Step("ResourceTable.Insert"))              {                  var byteCount = Encoding.UTF8.GetByteCount(resource);                  var resourceBytes = new byte[byteCount + 4];                  BitConverter.GetBytes(byteCount).CopyTo(resourceBytes' 0);                  Encoding.UTF8.GetBytes(resource' 0' resource.Length' resourceBytes' 4);                  lock (_writeLock)                  {                      if (_nextSegment == _pointerSegment)                      {                          StartNewPage(transactionId' profiler);                      }                      pageId = _currentPage;                      segmentId = _nextSegment;                      for (int i = 0; i < (byteCount + 4); i += _segmentSize)                      {                          _pageStore.Write(transactionId' _currentPage' resourceBytes' i' _nextSegment*_segmentSize'                                           _segmentSize < (byteCount + 4 - i) ? _segmentSize : (byteCount + 4 - i)'                                           profiler);                          _nextSegment++;                          if (_nextSegment == _pointerSegment)                          {                              StartNewPage(transactionId' profiler);                          }                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,Insert,The following statement contains a magic number: using (profiler.Step("ResourceTable.Insert"))              {                  var byteCount = Encoding.UTF8.GetByteCount(resource);                  var resourceBytes = new byte[byteCount + 4];                  BitConverter.GetBytes(byteCount).CopyTo(resourceBytes' 0);                  Encoding.UTF8.GetBytes(resource' 0' resource.Length' resourceBytes' 4);                  lock (_writeLock)                  {                      if (_nextSegment == _pointerSegment)                      {                          StartNewPage(transactionId' profiler);                      }                      pageId = _currentPage;                      segmentId = _nextSegment;                      for (int i = 0; i < (byteCount + 4); i += _segmentSize)                      {                          _pageStore.Write(transactionId' _currentPage' resourceBytes' i' _nextSegment*_segmentSize'                                           _segmentSize < (byteCount + 4 - i) ? _segmentSize : (byteCount + 4 - i)'                                           profiler);                          _nextSegment++;                          if (_nextSegment == _pointerSegment)                          {                              StartNewPage(transactionId' profiler);                          }                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,Insert,The following statement contains a magic number: using (profiler.Step("ResourceTable.Insert"))              {                  var byteCount = Encoding.UTF8.GetByteCount(resource);                  var resourceBytes = new byte[byteCount + 4];                  BitConverter.GetBytes(byteCount).CopyTo(resourceBytes' 0);                  Encoding.UTF8.GetBytes(resource' 0' resource.Length' resourceBytes' 4);                  lock (_writeLock)                  {                      if (_nextSegment == _pointerSegment)                      {                          StartNewPage(transactionId' profiler);                      }                      pageId = _currentPage;                      segmentId = _nextSegment;                      for (int i = 0; i < (byteCount + 4); i += _segmentSize)                      {                          _pageStore.Write(transactionId' _currentPage' resourceBytes' i' _nextSegment*_segmentSize'                                           _segmentSize < (byteCount + 4 - i) ? _segmentSize : (byteCount + 4 - i)'                                           profiler);                          _nextSegment++;                          if (_nextSegment == _pointerSegment)                          {                              StartNewPage(transactionId' profiler);                          }                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,Insert,The following statement contains a magic number: using (profiler.Step("ResourceTable.Insert"))              {                  var byteCount = Encoding.UTF8.GetByteCount(resource);                  var resourceBytes = new byte[byteCount + 4];                  BitConverter.GetBytes(byteCount).CopyTo(resourceBytes' 0);                  Encoding.UTF8.GetBytes(resource' 0' resource.Length' resourceBytes' 4);                  lock (_writeLock)                  {                      if (_nextSegment == _pointerSegment)                      {                          StartNewPage(transactionId' profiler);                      }                      pageId = _currentPage;                      segmentId = _nextSegment;                      for (int i = 0; i < (byteCount + 4); i += _segmentSize)                      {                          _pageStore.Write(transactionId' _currentPage' resourceBytes' i' _nextSegment*_segmentSize'                                           _segmentSize < (byteCount + 4 - i) ? _segmentSize : (byteCount + 4 - i)'                                           profiler);                          _nextSegment++;                          if (_nextSegment == _pointerSegment)                          {                              StartNewPage(transactionId' profiler);                          }                      }                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,StartNewPage,The following statement contains a magic number: if (_currentPage > 0)              {                  _pageStore.Write(transactionId' _currentPage' BitConverter.GetBytes(nextPage.Id)' 0' _pageStore.PageSize-8' 8' profiler);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,ResourceTable,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceTable.cs,StartNewPage,The following statement contains a magic number: if (_currentPage > 0)              {                  _pageStore.Write(transactionId' _currentPage' BitConverter.GetBytes(nextPage.Id)' 0' _pageStore.PageSize-8' 8' profiler);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Consolidate,The following statement contains a magic number: try              {                  var graphIndexId = _graphIndex.Write(consolidatePageStore' txnId' null);                  var prefixManagerId = _prefixManager.Write(consolidatePageStore' txnId' null);                  var resourceIndexId = _resourceIndex.Write(consolidatePageStore' txnId' null);                  var subjectRelatedResourceIndexId = _subjectRelatedResourceIndex.Write(consolidatePageStore' txnId' null);                  var objectRelatedResourceIndexId = _objectRelatedResourceIndex.Write(consolidatePageStore' txnId' null);                  var buff = CreateStoreHeader(graphIndexId' prefixManagerId' resourceIndexId'                                               subjectRelatedResourceIndexId'                                               objectRelatedResourceIndexId);                  var storePage = consolidatePageStore.Create(txnId);                  storePage.SetData(buff);                  storePage.SetData(buff' 0' 128);                  storePageId = storePage.Id;                  consolidatePageStore.Commit(txnId' null);                  // Close the stores to allow the rename to happen                  Close();              }              finally              {                  // Ensure we close the store even if an exception was raised occurred                   consolidatePageStore.Close();              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CopyTo,The following statement contains a magic number: storePage.SetData(buff' 0' 128);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,WarmupPageCache,The following statement contains a magic number: int totalLoaded = _subjectRelatedResourceIndex.Preload(pagesToPreload/3' profiler);
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Load,The following statement contains a magic number: using (profiler.Step("Store.Load"))              {                  // Validate the hash for the index bloc                  using (var sha1 = new SHA1Managed())                  {                      var recordedHash = new byte[20];                      Array.Copy(storePage.Data' 108' recordedHash' 0' 20);                      var calculatedHash = sha1.ComputeHash(storePage.Data' 0' 108);                      if (recordedHash.Compare(calculatedHash) != 0)                      {                          return false;                      }                  }                    // Load indexes from the pointers                  int storeVersion = BitConverter.ToInt32(storePage.Data' 0);                  if (storeVersion == 1)                  {                      _currentTxnId = BitConverter.ToUInt64(storePage.Data' 4);                      var graphIndexId = BitConverter.ToUInt64(storePage.Data' 12);                      _graphIndex = new ConcurrentGraphIndex(_pageStore' graphIndexId' profiler);                      var prefixManagerId = BitConverter.ToUInt64(storePage.Data' 20);                      _prefixManager = new PrefixManager(_pageStore' prefixManagerId' profiler);                      var resourceIndexId = BitConverter.ToUInt64(storePage.Data' 28);                      _resourceIndex = new ResourceIndex.ResourceIndex(_pageStore' _resourceTable' resourceIndexId);                      var relatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 36);                      _subjectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                   relatedResourceIndexId' profiler);                      var objectRelatedResourceIndexId = BitConverter.ToUInt64(storePage.Data' 44);                      _objectRelatedResourceIndex = new RelatedResourceIndex.RelatedResourceIndex(_pageStore'                                                                                                  objectRelatedResourceIndexId' profiler);                  }                  return true;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,Save,The following statement contains a magic number: using (profiler.Step("Store.Save"))              {                  _resourceTable.Commit(_currentTxnId + 1' profiler);                    var txnId = _currentTxnId + 1;                  var graphIndexId = _graphIndex.Save(txnId' profiler);                  var prefixManagerId = _prefixManager.Save(txnId' profiler);                  var resourceIndexId = _resourceIndex.Save(txnId' profiler);                  var subjectRelatedResourceIndexId = _subjectRelatedResourceIndex.Save(txnId' profiler);                  var objectRelatedResourceIndexId = _objectRelatedResourceIndex.Save(txnId' profiler);                  var buff = CreateStoreHeader(graphIndexId' prefixManagerId' resourceIndexId'                                               subjectRelatedResourceIndexId' objectRelatedResourceIndexId);                    var page = _pageStore.Create(txnId);                  page.SetData(buff);                  page.SetData(buff' 0' 128);                  _pageStore.Commit(txnId' profiler);                  return page.Id;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: var buff = new byte[128];
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore,Store,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\Store.cs,CreateStoreHeader,The following statement contains a magic number: using (var sha1 = new SHA1Managed())              {                  BitConverter.GetBytes(_currentTxnId + 1).CopyTo(buff' 4);                  BitConverter.GetBytes(graphIndexId).CopyTo(buff' 12);                  BitConverter.GetBytes(prefixManagerId).CopyTo(buff' 20);                  BitConverter.GetBytes(resourceIndexId).CopyTo(buff' 28);                  BitConverter.GetBytes(subjectRelatedResourceIndexId).CopyTo(buff' 36);                  BitConverter.GetBytes(objectRelatedResourceIndexId).CopyTo(buff' 44);                  var hash = sha1.ComputeHash(buff' 0' 108);                  hash.CopyTo(buff' 108);              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Write,The following statement contains a magic number: foreach (var graphIndexEntry in _allEntries)             {                 int entrySize = String.IsNullOrEmpty(graphIndexEntry.Uri)                                     ? 1                                     : 3 + Encoding.UTF8.GetByteCount(graphIndexEntry.Uri);                 if (offset + entrySize > pageStore.PageSize - 9)                 {                     IPage nextPage = pageStore.Create(transactionId);                     buff[offset] = 0xff;                     BitConverter.GetBytes(nextPage.Id).CopyTo(buff' pageStore.PageSize - 8);                     currentPage.SetData(buff);                     currentPage = nextPage;                     offset = 0;                 }                 else                 {                     if (String.IsNullOrEmpty(graphIndexEntry.Uri))                     {                         // Record an empty entry                         buff[offset++] = 2;                     }                     else                     {                         if (graphIndexEntry.IsDeleted)                         {                             buff[offset++] = 1;                         }                         else                         {                             buff[offset++] = 0;                         }                         var uriBytes = Encoding.UTF8.GetBytes(graphIndexEntry.Uri);                         BitConverter.GetBytes(uriBytes.Length).CopyTo(buff' offset);                         offset += 4;                         uriBytes.CopyTo(buff' offset);                         offset += uriBytes.Length;                     }                 }             }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Write,The following statement contains a magic number: foreach (var graphIndexEntry in _allEntries)             {                 int entrySize = String.IsNullOrEmpty(graphIndexEntry.Uri)                                     ? 1                                     : 3 + Encoding.UTF8.GetByteCount(graphIndexEntry.Uri);                 if (offset + entrySize > pageStore.PageSize - 9)                 {                     IPage nextPage = pageStore.Create(transactionId);                     buff[offset] = 0xff;                     BitConverter.GetBytes(nextPage.Id).CopyTo(buff' pageStore.PageSize - 8);                     currentPage.SetData(buff);                     currentPage = nextPage;                     offset = 0;                 }                 else                 {                     if (String.IsNullOrEmpty(graphIndexEntry.Uri))                     {                         // Record an empty entry                         buff[offset++] = 2;                     }                     else                     {                         if (graphIndexEntry.IsDeleted)                         {                             buff[offset++] = 1;                         }                         else                         {                             buff[offset++] = 0;                         }                         var uriBytes = Encoding.UTF8.GetBytes(graphIndexEntry.Uri);                         BitConverter.GetBytes(uriBytes.Length).CopyTo(buff' offset);                         offset += 4;                         uriBytes.CopyTo(buff' offset);                         offset += uriBytes.Length;                     }                 }             }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Write,The following statement contains a magic number: foreach (var graphIndexEntry in _allEntries)             {                 int entrySize = String.IsNullOrEmpty(graphIndexEntry.Uri)                                     ? 1                                     : 3 + Encoding.UTF8.GetByteCount(graphIndexEntry.Uri);                 if (offset + entrySize > pageStore.PageSize - 9)                 {                     IPage nextPage = pageStore.Create(transactionId);                     buff[offset] = 0xff;                     BitConverter.GetBytes(nextPage.Id).CopyTo(buff' pageStore.PageSize - 8);                     currentPage.SetData(buff);                     currentPage = nextPage;                     offset = 0;                 }                 else                 {                     if (String.IsNullOrEmpty(graphIndexEntry.Uri))                     {                         // Record an empty entry                         buff[offset++] = 2;                     }                     else                     {                         if (graphIndexEntry.IsDeleted)                         {                             buff[offset++] = 1;                         }                         else                         {                             buff[offset++] = 0;                         }                         var uriBytes = Encoding.UTF8.GetBytes(graphIndexEntry.Uri);                         BitConverter.GetBytes(uriBytes.Length).CopyTo(buff' offset);                         offset += 4;                         uriBytes.CopyTo(buff' offset);                         offset += uriBytes.Length;                     }                 }             }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Write,The following statement contains a magic number: foreach (var graphIndexEntry in _allEntries)             {                 int entrySize = String.IsNullOrEmpty(graphIndexEntry.Uri)                                     ? 1                                     : 3 + Encoding.UTF8.GetByteCount(graphIndexEntry.Uri);                 if (offset + entrySize > pageStore.PageSize - 9)                 {                     IPage nextPage = pageStore.Create(transactionId);                     buff[offset] = 0xff;                     BitConverter.GetBytes(nextPage.Id).CopyTo(buff' pageStore.PageSize - 8);                     currentPage.SetData(buff);                     currentPage = nextPage;                     offset = 0;                 }                 else                 {                     if (String.IsNullOrEmpty(graphIndexEntry.Uri))                     {                         // Record an empty entry                         buff[offset++] = 2;                     }                     else                     {                         if (graphIndexEntry.IsDeleted)                         {                             buff[offset++] = 1;                         }                         else                         {                             buff[offset++] = 0;                         }                         var uriBytes = Encoding.UTF8.GetBytes(graphIndexEntry.Uri);                         BitConverter.GetBytes(uriBytes.Length).CopyTo(buff' offset);                         offset += 4;                         uriBytes.CopyTo(buff' offset);                         offset += uriBytes.Length;                     }                 }             }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Write,The following statement contains a magic number: foreach (var graphIndexEntry in _allEntries)             {                 int entrySize = String.IsNullOrEmpty(graphIndexEntry.Uri)                                     ? 1                                     : 3 + Encoding.UTF8.GetByteCount(graphIndexEntry.Uri);                 if (offset + entrySize > pageStore.PageSize - 9)                 {                     IPage nextPage = pageStore.Create(transactionId);                     buff[offset] = 0xff;                     BitConverter.GetBytes(nextPage.Id).CopyTo(buff' pageStore.PageSize - 8);                     currentPage.SetData(buff);                     currentPage = nextPage;                     offset = 0;                 }                 else                 {                     if (String.IsNullOrEmpty(graphIndexEntry.Uri))                     {                         // Record an empty entry                         buff[offset++] = 2;                     }                     else                     {                         if (graphIndexEntry.IsDeleted)                         {                             buff[offset++] = 1;                         }                         else                         {                             buff[offset++] = 0;                         }                         var uriBytes = Encoding.UTF8.GetBytes(graphIndexEntry.Uri);                         BitConverter.GetBytes(uriBytes.Length).CopyTo(buff' offset);                         offset += 4;                         uriBytes.CopyTo(buff' offset);                         offset += uriBytes.Length;                     }                 }             }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Write,The following statement contains a magic number: BitConverter.GetBytes(0ul).CopyTo(buff' pageStore.PageSize - 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Read,The following statement contains a magic number: while(true)              {                  var marker = currentPage.Data[offset++];                  if (marker == 0xff)                  {                      ulong nextPageId = BitConverter.ToUInt64(currentPage.Data' _pageStore.PageSize - 8);                      if (nextPageId == 0) return;                      currentPage = _pageStore.Retrieve(nextPageId' profiler);                      offset = 0;                  }                  else if (marker == 2)                  {                      _allEntries.Add(new GraphIndexEntry(entryIndex++' null' true));                  }                  else                  {                      int uriByteLength = BitConverter.ToInt32(currentPage.Data' offset);                      offset += 4;                      var uri = Encoding.UTF8.GetString(currentPage.Data' offset' uriByteLength);                      offset += uriByteLength;                      var newEntry = new GraphIndexEntry(entryIndex++' uri' marker == 1);                      _allEntries.Add(newEntry);                      if (!newEntry.IsDeleted) _graphUriIndex[newEntry.Uri] = newEntry.Id;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Read,The following statement contains a magic number: while(true)              {                  var marker = currentPage.Data[offset++];                  if (marker == 0xff)                  {                      ulong nextPageId = BitConverter.ToUInt64(currentPage.Data' _pageStore.PageSize - 8);                      if (nextPageId == 0) return;                      currentPage = _pageStore.Retrieve(nextPageId' profiler);                      offset = 0;                  }                  else if (marker == 2)                  {                      _allEntries.Add(new GraphIndexEntry(entryIndex++' null' true));                  }                  else                  {                      int uriByteLength = BitConverter.ToInt32(currentPage.Data' offset);                      offset += 4;                      var uri = Encoding.UTF8.GetString(currentPage.Data' offset' uriByteLength);                      offset += uriByteLength;                      var newEntry = new GraphIndexEntry(entryIndex++' uri' marker == 1);                      _allEntries.Add(newEntry);                      if (!newEntry.IsDeleted) _graphUriIndex[newEntry.Uri] = newEntry.Id;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.GraphIndex,ConcurrentGraphIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\GraphIndex\ConcurrentGraphIndex.cs,Read,The following statement contains a magic number: while(true)              {                  var marker = currentPage.Data[offset++];                  if (marker == 0xff)                  {                      ulong nextPageId = BitConverter.ToUInt64(currentPage.Data' _pageStore.PageSize - 8);                      if (nextPageId == 0) return;                      currentPage = _pageStore.Retrieve(nextPageId' profiler);                      offset = 0;                  }                  else if (marker == 2)                  {                      _allEntries.Add(new GraphIndexEntry(entryIndex++' null' true));                  }                  else                  {                      int uriByteLength = BitConverter.ToInt32(currentPage.Data' offset);                      offset += 4;                      var uri = Encoding.UTF8.GetString(currentPage.Data' offset' uriByteLength);                      offset += uriByteLength;                      var newEntry = new GraphIndexEntry(entryIndex++' uri' marker == 1);                      _allEntries.Add(newEntry);                      if (!newEntry.IsDeleted) _graphUriIndex[newEntry.Uri] = newEntry.Id;                  }              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,GetPredicateIndex,The following statement contains a magic number: lock (_predicateIndexes)              {                  PredicateRelatedResourceIndex predicateIndex;                  if (_predicateIndexes.TryGetValue(predicateId' out predicateIndex))                  {                      return predicateIndex;                  }                  var buff = new byte[8];                    if (Search(predicateId' buff' profiler))                  {                      ulong predicateIndexRoot = BitConverter.ToUInt64(buff' 0);                      predicateIndex = new PredicateRelatedResourceIndex(PageStore' predicateIndexRoot);                      _predicateIndexes[predicateId] = predicateIndex;                      return predicateIndex;                  }                  return null;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,MakePredicateIndexKey,The following statement contains a magic number: var ret = new byte[20];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,MakePredicateIndexKey,The following statement contains a magic number: BitConverter.GetBytes(graphId).CopyTo(ret' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,MakePredicateIndexKey,The following statement contains a magic number: BitConverter.GetBytes(resourceId).CopyTo(ret' 12);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,GetGraphIdFromKey,The following statement contains a magic number: return BitConverter.ToInt32(key' 8);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.RelatedResourceIndex,RelatedResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\RelatedResourceIndex\RelatedResourceIndex.cs,GetResourceIdFromKey,The following statement contains a magic number: return BitConverter.ToUInt64(key' 12);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,LongLiteralResource,The following statement contains a magic number: _dataTypeId = BitConverter.ToUInt64(data' 9);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,LongLiteralResource,The following statement contains a magic number: _valuePage = BitConverter.ToUInt64(data' 17);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,LongLiteralResource,The following statement contains a magic number: _valueSegment = data[25];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,LongLiteralResource,The following statement contains a magic number: var prefixLength = (int) data[26];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,LongLiteralResource,The following statement contains a magic number: _prefix = Encoding.UTF8.GetString(data' 27' prefixLength);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,GetData,The following statement contains a magic number: var buff = new byte[64];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,GetData,The following statement contains a magic number: BitConverter.GetBytes(_dataTypeId).CopyTo(buff' 9);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,GetData,The following statement contains a magic number: BitConverter.GetBytes(_valuePage).CopyTo(buff' 17);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,GetData,The following statement contains a magic number: buff[25] = _valueSegment;
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,GetData,The following statement contains a magic number: buff[26] = (byte)_prefix.Length;
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongLiteralResource.cs,GetData,The following statement contains a magic number: Encoding.UTF8.GetBytes(_prefix).CopyTo(buff' 27);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,LongUriResource,The following statement contains a magic number: _valuePage = BitConverter.ToUInt64(data' 2);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,LongUriResource,The following statement contains a magic number: _valueSegment = data[10];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,LongUriResource,The following statement contains a magic number: _prefix = Encoding.UTF8.GetString(data' 11' prefixLength);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,GetData,The following statement contains a magic number: var buff = new byte[64];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,GetData,The following statement contains a magic number: BitConverter.GetBytes(_valuePage).CopyTo(buff' 2);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,GetData,The following statement contains a magic number: buff[10] = _valueSegment;
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,LongUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\LongUriResource.cs,GetData,The following statement contains a magic number: prefixBytes.CopyTo(buff' 11);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,GetResource,The following statement contains a magic number: using (profiler.Step("ResourceIndex.GetResource"))              {                  IResource resource;                  if (_resourceCache.TryGetValue(resourceId' out resource))                  {                      return resource;                  }                  var buff = new byte[64];                  if (Search(resourceId' buff' profiler))                  {                      resource = _resourceStore.FromBTreeValue(buff);                      _resourceCache.Add(resourceId' resource);                      return resource;                  }  #if DEBUG                  if (resourceId > 0)                  {                      // Repeat the search for debug purposes                      Search(resourceId' buff' profiler);                  }  #endif                  return null;              }
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,MakeHashString,The following statement contains a magic number: var sb = new StringBuilder(resourceValue.Length + 200);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ResourceIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ResourceIndex.cs,MakeId,The following statement contains a magic number: return ((ulong)hashcode << 32) + bucketposition;
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,ShortLiteralResource,The following statement contains a magic number: _dataTypeId = BitConverter.ToUInt64(btreeValue' 9);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,ShortLiteralResource,The following statement contains a magic number: var valueLength = btreeValue[17];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,ShortLiteralResource,The following statement contains a magic number: _value = Encoding.UTF8.GetString(btreeValue' 18' valueLength);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,GetData,The following statement contains a magic number: var buff = new byte[64];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,GetData,The following statement contains a magic number: BitConverter.GetBytes(_dataTypeId).CopyTo(buff' 9);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,GetData,The following statement contains a magic number: buff[17] = (byte) valueBytes.Length;
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortLiteralResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortLiteralResource.cs,GetData,The following statement contains a magic number: valueBytes.CopyTo(buff' 18);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortUriResource.cs,ShortUriResource,The following statement contains a magic number: _value = Encoding.UTF8.GetString(btreeValue' 2' length);
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortUriResource.cs,GetData,The following statement contains a magic number: var buff = new byte[64];
Magic Number,BrightstarDB.Storage.BPlusTreeStore.ResourceIndex,ShortUriResource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\ResourceIndex\ShortUriResource.cs,GetData,The following statement contains a magic number: valueBytes.CopyTo(buff' 2);
Magic Number,BrightstarDB.Storage.BTreeStore,AbstractStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\AbstractStoreManager.cs,GetLatestStorePositionFromMasterFile,The following statement contains a magic number: try              {                  Logging.LogDebug("Retrieving latest store position from masterfile : {0}"'masterFilePath);                  using (var fs = _persistenceManager.GetInputStream(masterFilePath))                  {                      Logging.LogDebug("Masterfile stream length is {0}"'  fs.Length);                      Logging.LogDebug("Attempting to seek to {0} bytes from end of stream."' CommitPoint.RecordSize);                      fs.Seek(-CommitPoint.RecordSize' SeekOrigin.End);                      Logging.LogDebug("Seek completed ok. Attempting to load commit point");                      var commitPoint = CommitPoint.Load(fs);                      Logging.LogDebug("Commit point load completed OK. Returning commit point offset as {0}"' commitPoint.LocationOffset);                      return commitPoint.LocationOffset;                  }              }              catch (InvalidCommitPointException icp)              {                  Logging.LogInfo("Caught InvalidCommitPointException: {0}"' icp);                  // start reading from the start of the file until we get to the dud one.                  // truncate the file at this point. log it and try again.                  var count = 0;                  CommitPoint validCommitPoint = null;                    const int headerSize = MasterfileHeaderLongCount * 8;                  while (true)                  {                      using (var fs = _persistenceManager.GetInputStream(masterFilePath))                      {                          try                          {                              Logging.LogInfo("Reading commit point at " + CommitPoint.RecordSize * count);                              fs.Seek((CommitPoint.RecordSize * count) + headerSize' SeekOrigin.Begin);                              var commitPoint = CommitPoint.Load(fs);                              validCommitPoint = commitPoint;                              count++;                          }                          catch (BrightstarInternalException)                          {                              var startOfBadCommit = (CommitPoint.RecordSize * count) + headerSize;                              Logging.LogInfo("Truncating file at " + startOfBadCommit);                                // truncate file.                              using (var stream = _persistenceManager.GetOutputStream(masterFilePath' FileMode.Truncate))                              {                                  stream.SetLength(startOfBadCommit);                              }                                // return last good commit                              return validCommitPoint.LocationOffset;                          }                      }                  }              }              catch (Exception ex)              {                  throw new BrightstarInternalException("Error while trying to recover to last valid commit point."' ex);              }
Magic Number,BrightstarDB.Storage.BTreeStore,Bucket,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Bucket.cs,Save,The following statement contains a magic number: return 4 + dataWritten;
Magic Number,BrightstarDB.Storage.BTreeStore,ItemCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ItemCache.cs,ItemCache,The following statement contains a magic number: for(int i = 0; i < dictCount; i++)              {                  _itemDictionaries[i] = new Dictionary<ulong' WeakReference>(maxCount/10);              }
Magic Number,BrightstarDB.Storage.BTreeStore,ObjectCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectCache.cs,ObjectCache,The following statement contains a magic number: _lowPriorityItems = new ItemCache(100' 10000' clearAtMax);
Magic Number,BrightstarDB.Storage.BTreeStore,ObjectCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectCache.cs,ObjectCache,The following statement contains a magic number: _lowPriorityItems = new ItemCache(100' 10000' clearAtMax);
Magic Number,BrightstarDB.Storage.BTreeStore,ObjectLocationContainer,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectLocationContainer.cs,ObjectLocationContainer,The following statement contains a magic number: _objectIdOffsetIndex = new List<ObjectIdOffsetEntry>(1000);
Magic Number,BrightstarDB.Storage.BTreeStore,ObjectLocationManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectLocationManager.cs,Save,The following statement contains a magic number: var count = 4;
Magic Number,BrightstarDB.Storage.BTreeStore,ObjectLocationManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectLocationManager.cs,Save,The following statement contains a magic number: dataStream.Write(count - 4);
Magic Number,BrightstarDB.Storage.BTreeStore,ObjectLocationManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ObjectLocationManager.cs,ObjectLocationManager,The following statement contains a magic number: _containerOffsets = new List<ulong>(1000);
Magic Number,BrightstarDB.Storage.BTreeStore,PersistentBTree<T>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\PersistentBTree.cs,Insert,The following statement contains a magic number: if (timer.ElapsedMilliseconds > 30)              {                  Logging.LogWarning(BrightstarEventId.StorePerformanceWarning' "Long insert. Insert count={0}. Insert time={1}ms"' insertCount'                                     timer.ElapsedMilliseconds);              }
Magic Number,BrightstarDB.Storage.BTreeStore,PredicateIndexResourceToObjectIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\PredicateIndexResourceToObjectIdIndex.cs,PredicateIndexResourceToObjectIdIndex,The following statement contains a magic number: _entries = new List<Entry>(100);
Magic Number,BrightstarDB.Storage.BTreeStore,Resource,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\Resource.cs,Save,The following statement contains a magic number: return 2 + count + lexValueBytes.Count() + langCodeByteCount;
Magic Number,BrightstarDB.Storage.BTreeStore,ResourceIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ResourceIdIndex.cs,GetHashableResourceString,The following statement contains a magic number: var sb = new StringBuilder(resourceValue.Length + 520);
Magic Number,BrightstarDB.Storage.BTreeStore,ResourceIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ResourceIdIndex.cs,MakeId,The following statement contains a magic number: return hashCode + (((ulong)bucketPosition) << 32);
Magic Number,BrightstarDB.Storage.BTreeStore,ResourceIdIndex,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BTreeStore\ResourceIdIndex.cs,GetResourceIdBucketOffset,The following statement contains a magic number: return (uint)(resourceId >> 32);
Magic Number,BrightstarDB.Storage,ByteArrayHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\ByteArrayHelper.cs,ToByteArray,The following statement contains a magic number: for(int i = 0; i < byteCount/8; i++)              {                  BitConverter.GetBytes(ulongs[i]).CopyTo(bytes' offset + i*8);              }
Magic Number,BrightstarDB.Storage,ByteArrayHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\ByteArrayHelper.cs,ToByteArray,The following statement contains a magic number: for(int i = 0; i < byteCount/8; i++)              {                  BitConverter.GetBytes(ulongs[i]).CopyTo(bytes' offset + i*8);              }
Magic Number,BrightstarDB.Storage,ByteArrayHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\ByteArrayHelper.cs,ToUlongArray,The following statement contains a magic number: for(int i = 0; i < ulongCount; i++)              {                  ret[i] = BitConverter.ToUInt64(bytes' offset + i*8);              }
Magic Number,BrightstarDB.Storage,ByteArrayHelper,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\ByteArrayHelper.cs,Increment,The following statement contains a magic number: for(int ix = 0; ix < mergedNodeKey.Length; ix++)              {                  if (mergedNodeKey[ix] < 255)                  {                      mergedNodeKey[ix]++;                      return;                  }                  mergedNodeKey[ix] = 0;              }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,CommitPoint,The following statement contains a magic number: VersionNumber = 2;
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Read,The following statement contains a magic number: try              {                  var record = new byte[RecordSize];                  var commitPointRecord = new byte[RecordSize/2];                  stream.Read(record' 0' RecordSize);                  if (!ValidateCommitPointRecord(record' 0' commitPointRecord))                  {                      if (!ValidateCommitPointRecord(record' RecordSize/2' commitPointRecord))                      {                          Logging.LogError(BrightstarEventId.CommitPointReadError'                                           "Invalid commit point. Hashcode validation failed");                          throw new InvalidCommitPointException(                              "Invalid commit point - failed hash validation on both halves of commit point record.");                      }                  }                  ReadCommitPointData(commitPointRecord);              }              catch (InvalidCommitPointException)              {                  throw;              }              catch (Exception ex)              {                  Logging.LogError(BrightstarEventId.CommitPointReadError'                                   "Error reading commit point from stream - " + ex);                  throw new InvalidCommitPointException(                      "Invalid CommitPoint - error reading commit point from stream: " + ex.Message' ex);              }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Read,The following statement contains a magic number: try              {                  var record = new byte[RecordSize];                  var commitPointRecord = new byte[RecordSize/2];                  stream.Read(record' 0' RecordSize);                  if (!ValidateCommitPointRecord(record' 0' commitPointRecord))                  {                      if (!ValidateCommitPointRecord(record' RecordSize/2' commitPointRecord))                      {                          Logging.LogError(BrightstarEventId.CommitPointReadError'                                           "Invalid commit point. Hashcode validation failed");                          throw new InvalidCommitPointException(                              "Invalid commit point - failed hash validation on both halves of commit point record.");                      }                  }                  ReadCommitPointData(commitPointRecord);              }              catch (InvalidCommitPointException)              {                  throw;              }              catch (Exception ex)              {                  Logging.LogError(BrightstarEventId.CommitPointReadError'                                   "Error reading commit point from stream - " + ex);                  throw new InvalidCommitPointException(                      "Invalid CommitPoint - error reading commit point from stream: " + ex.Message' ex);              }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Save,The following statement contains a magic number: var writeBuffer = new byte[256];
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Save,The following statement contains a magic number: var commitPointData = new byte[112];
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Save,The following statement contains a magic number: commitPointData.CopyTo(writeBuffer' 128);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Save,The following statement contains a magic number: hash.CopyTo(writeBuffer' 112);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Save,The following statement contains a magic number: hash.CopyTo(writeBuffer' 240);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,Save,The following statement contains a magic number: stream.Write(writeBuffer' 0' 256);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,WriteCommitPointData,The following statement contains a magic number: BitConverter.GetBytes(CommitNumber).CopyTo(commitPointData' 4);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,WriteCommitPointData,The following statement contains a magic number: BitConverter.GetBytes(LocationOffset).CopyTo(commitPointData' 12);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,WriteCommitPointData,The following statement contains a magic number: BitConverter.GetBytes(CommitTime.Ticks).CopyTo(commitPointData' 20);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,WriteCommitPointData,The following statement contains a magic number: JobId.ToByteArray().CopyTo(commitPointData' 28);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ValidateCommitPointRecord,The following statement contains a magic number: var dataLength = (RecordSize/2) - 16;
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ValidateCommitPointRecord,The following statement contains a magic number: var dataLength = (RecordSize/2) - 16;
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ValidateCommitPointRecord,The following statement contains a magic number: var recordedHash = new byte[16];
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ValidateCommitPointRecord,The following statement contains a magic number: Array.Copy(rawData' offset+dataLength' recordedHash' 0' 16);
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,CommitPoint,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\CommitPoint.cs,ReadCommitPointData,The following statement contains a magic number: if (VersionNumber == 2)              {                  CommitNumber = BitConverter.ToUInt64(commitPointData' 4);                  LocationOffset = BitConverter.ToUInt64(commitPointData' 12);                  var ticks = BitConverter.ToInt64(commitPointData' 20);                  CommitTime = new DateTime(ticks);                  var guidBytes = new byte[16];                  Array.Copy(commitPointData' 28' guidBytes' 0' 16);                  JobId = new Guid(guidBytes);              }              else              {                  throw new InvalidCommitPointException(String.Format("Unrecognized commit point data version '{0}'"'                                                                      VersionNumber));                }
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Save,The following statement contains a magic number: header[4] = (byte) StoreType;
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Save,The following statement contains a magic number: header[5] = (byte) PersistenceType;
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Save,The following statement contains a magic number: BitConverter.GetBytes(StoreFormatVersion).CopyTo(header' 6);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Save,The following statement contains a magic number: StoreSetId.ToByteArray().CopyTo(header' 10);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Save,The following statement contains a magic number: StoreId.ToByteArray().CopyTo(header' 26);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: StoreType = (StoreType) header[4];
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: PersistenceType = (PersistenceType) header[5];
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: StoreFormatVersion = BitConverter.ToInt32(header' 6);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: var guidBytes = new byte[16];
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: Array.Copy(header' 10' guidBytes' 0' 16);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: Array.Copy(header' 10' guidBytes' 0' 16);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: Array.Copy(header' 26' guidBytes' 0' 16);
Magic Number,BrightstarDB.Storage,MasterFile,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\MasterFile.cs,Load,The following statement contains a magic number: Array.Copy(header' 26' guidBytes' 0' 16);
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,WriteVarint,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,WriteVarint,The following statement contains a magic number: do              {                  buffer[count] = (byte) ((value & 0x7F) | 0x80);                  count++;              } while ((value >>= 7) != 0);
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 7;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 14;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 21;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 28;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 35;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 42;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 49;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= (chunk & 0x7F) << 56;
Magic Number,BrightstarDB.Storage,SerializationUtils,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\SerializationUtils.cs,ReadVarint,The following statement contains a magic number: value |= chunk << 63;
Magic Number,BrightstarDB.Storage,StoreExtensions,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\StoreExtensions.cs,Import,The following statement contains a magic number: tripleParser.Parse(triples' new StoreTripleSink(store' jobId' 500000)'                                 graphUri == null ? Constants.DefaultGraphUri : graphUri.ToString());
Magic Number,BrightstarDB.Storage,StringHashCodeExtension,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\StringHashCodeExtension.cs,GetBrightstarHashCode,The following statement contains a magic number: uint h = 5381;
Magic Number,BrightstarDB.Storage,StringHashCodeExtension,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\StringHashCodeExtension.cs,GetBrightstarHashCode,The following statement contains a magic number: for (int i = 0; i < arry.Length; i++)              {                  h = (h << 5) + h ^ arry[i];              }
Magic Number,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,AppendOnlyFilePageStore,The following statement contains a magic number: if ((_pageSize % 4096) != 0)              {                  throw new ArgumentException("Page size must be a multiple of 4096 bytes");              }
Magic Number,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,AppendOnlyFilePageStore,The following statement contains a magic number: var bitShift = (int)Math.Log(_pageSize' 2.0);
Magic Number,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,AppendOnlyFilePageStore,The following statement contains a magic number: if (!readOnly)              {                  _newPages = new List<WeakReference>(512);                  _newPageOffset = _nextPageId;              }
Magic Number,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,AppendOnlyFilePageStore,The following statement contains a magic number: if (!readOnly && !disableBackgroundWrites)              {                  _backgroundPageWriter =                      new BackgroundPageWriter(persistenceManager.GetOutputStream(filePath' FileMode.Open)' 1024);              }
Magic Number,BrightstarDB.Storage.Persistence,AppendOnlyFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\AppendOnlyFilePageStore.cs,RestartBackgroundWriter,The following statement contains a magic number: if (_backgroundPageWriter != null)              {                  lock (this)                  {                      _backgroundPageWriter.Dispose();                      _backgroundPageWriter =                          new BackgroundPageWriter(_peristenceManager.GetOutputStream(_path' FileMode.Open)' 1024);                  }              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: var pages = new byte[nominalPageSize * 2];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: var startOffset = nominalPageSize*2*((long) pageId - 1);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: lock (LoadLock)              {                  inputStream.Seek(startOffset' SeekOrigin.Begin);                  inputStream.Read(pages' 0' nominalPageSize*2);              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: FirstBuffer = new byte[nominalPageSize-8];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: Array.Copy(pages' 8' FirstBuffer' 0' nominalPageSize-8);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: Array.Copy(pages' 8' FirstBuffer' 0' nominalPageSize-8);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: SecondBuffer = new byte[nominalPageSize-8];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: Array.Copy(pages' nominalPageSize + 8' SecondBuffer' 0' nominalPageSize - 8);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: Array.Copy(pages' nominalPageSize + 8' SecondBuffer' 0' nominalPageSize - 8);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: FirstBuffer = new byte[nominalPageSize-8];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: SecondBuffer = new byte[nominalPageSize-8];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: FirstBuffer = new byte[_nominalPageSize-8];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: SecondBuffer = new byte[_nominalPageSize-8];
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: Array.Copy(readOnlyPage.FirstBuffer' FirstBuffer' _nominalPageSize-8);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,BinaryFilePage,The following statement contains a magic number: Array.Copy(readOnlyPage.SecondBuffer' SecondBuffer' _nominalPageSize-8);
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,_MakeWriteable,The following statement contains a magic number: lock (this)              {                  Array.Copy(srcBuffer' destBuffer' _nominalPageSize - 8);                  Data = destBuffer;                  IsWriteable = true;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,Write,The following statement contains a magic number: lock (this)              {                  var offset = _nominalPageSize*2*((long) Id - 1);                  outputStream.Seek(offset' SeekOrigin.Begin);                  outputStream.Write(BitConverter.GetBytes(FirstTransactionId)' 0' 8);                  outputStream.Write(FirstBuffer' 0' _nominalPageSize - 8);                  outputStream.Write(BitConverter.GetBytes(SecondTransactionId)' 0' 8);                  outputStream.Write(SecondBuffer' 0' _nominalPageSize - 8);                  IsDirty = false;                  Logging.LogDebug("BinaryFilePage: Write {0} [{1}|{2}] @ txn {3}"' Id' FirstTransactionId' SecondTransactionId' currentTransactionId);                  return 0L;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,Write,The following statement contains a magic number: lock (this)              {                  var offset = _nominalPageSize*2*((long) Id - 1);                  outputStream.Seek(offset' SeekOrigin.Begin);                  outputStream.Write(BitConverter.GetBytes(FirstTransactionId)' 0' 8);                  outputStream.Write(FirstBuffer' 0' _nominalPageSize - 8);                  outputStream.Write(BitConverter.GetBytes(SecondTransactionId)' 0' 8);                  outputStream.Write(SecondBuffer' 0' _nominalPageSize - 8);                  IsDirty = false;                  Logging.LogDebug("BinaryFilePage: Write {0} [{1}|{2}] @ txn {3}"' Id' FirstTransactionId' SecondTransactionId' currentTransactionId);                  return 0L;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,Write,The following statement contains a magic number: lock (this)              {                  var offset = _nominalPageSize*2*((long) Id - 1);                  outputStream.Seek(offset' SeekOrigin.Begin);                  outputStream.Write(BitConverter.GetBytes(FirstTransactionId)' 0' 8);                  outputStream.Write(FirstBuffer' 0' _nominalPageSize - 8);                  outputStream.Write(BitConverter.GetBytes(SecondTransactionId)' 0' 8);                  outputStream.Write(SecondBuffer' 0' _nominalPageSize - 8);                  IsDirty = false;                  Logging.LogDebug("BinaryFilePage: Write {0} [{1}|{2}] @ txn {3}"' Id' FirstTransactionId' SecondTransactionId' currentTransactionId);                  return 0L;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,Write,The following statement contains a magic number: lock (this)              {                  var offset = _nominalPageSize*2*((long) Id - 1);                  outputStream.Seek(offset' SeekOrigin.Begin);                  outputStream.Write(BitConverter.GetBytes(FirstTransactionId)' 0' 8);                  outputStream.Write(FirstBuffer' 0' _nominalPageSize - 8);                  outputStream.Write(BitConverter.GetBytes(SecondTransactionId)' 0' 8);                  outputStream.Write(SecondBuffer' 0' _nominalPageSize - 8);                  IsDirty = false;                  Logging.LogDebug("BinaryFilePage: Write {0} [{1}|{2}] @ txn {3}"' Id' FirstTransactionId' SecondTransactionId' currentTransactionId);                  return 0L;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePage,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePage.cs,Write,The following statement contains a magic number: lock (this)              {                  var offset = _nominalPageSize*2*((long) Id - 1);                  outputStream.Seek(offset' SeekOrigin.Begin);                  outputStream.Write(BitConverter.GetBytes(FirstTransactionId)' 0' 8);                  outputStream.Write(FirstBuffer' 0' _nominalPageSize - 8);                  outputStream.Write(BitConverter.GetBytes(SecondTransactionId)' 0' 8);                  outputStream.Write(SecondBuffer' 0' _nominalPageSize - 8);                  IsDirty = false;                  Logging.LogDebug("BinaryFilePage: Write {0} [{1}|{2}] @ txn {3}"' Id' FirstTransactionId' SecondTransactionId' currentTransactionId);                  return 0L;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,BinaryFilePageStore,The following statement contains a magic number: PageSize = _nominalPageSize - 8;
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,BinaryFilePageStore,The following statement contains a magic number: _nextPageId = (ulong) _inputStream.Length/((uint) _nominalPageSize*2) + 1;
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,BinaryFilePageStore,The following statement contains a magic number: if (CanWrite)              {                  if (!disableBackgroundWrites)                  {                      _backgroundPageWriter =                          new BackgroundPageWriter(_persistenceManager.GetOutputStream(_filePath' FileMode.Open)' 1024);                  }                  PageCache.Instance.BeforeEvict += BeforePageCacheEvict;              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,Commit,The following statement contains a magic number: if (CanWrite)              {                  if (_backgroundPageWriter != null)                  {                      foreach (var pageId in _modifiedPages.Keys)                      {                          var page = PageCache.Instance.Lookup(_partitionId' pageId) as BinaryFilePage;                          if (page != null && page.IsDirty)                          {                              _backgroundPageWriter.QueueWrite(page' commitId);                          }                      }                      _backgroundPageWriter.Flush();                      lock (_restartLock)                      {                          _backgroundPageWriter.Dispose();                          PageCache.Instance.Clear(_partitionId);                          UpdatePartitionId();                          _readTxnId = _writeTxnId;                          _writeTxnId++;                          _backgroundPageWriter =                              new BackgroundPageWriter(_persistenceManager.GetOutputStream(_filePath' FileMode.Open)' 1024);                      }                  }                  else                  {                      using (var outputStream = _persistenceManager.GetOutputStream(_filePath' FileMode.Open))                      {                          foreach (var pageId in _modifiedPages.Keys.OrderBy(x=>x))                          {                              var page = PageCache.Instance.Lookup(_partitionId' pageId) as BinaryFilePage;                              if (page != null && page.IsDirty)                              {                                  page.Write(outputStream' commitId);                              }                          }                          outputStream.Flush();                      }                      PageCache.Instance.Clear(_partitionId);                      UpdatePartitionId();                      _readTxnId = _writeTxnId;                      _writeTxnId++;                  }              }              else              {                  throw new InvalidOperationException("Attempt to Commit on a read-only store instance");              }
Magic Number,BrightstarDB.Storage.Persistence,BinaryFilePageStore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\BinaryFilePageStore.cs,Preload,The following statement contains a magic number: var maxPage = Math.Min((ulong)numPages / 2' _nextPageId - 1);
Magic Number,BrightstarDB.Storage.Persistence,LruPageCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\LruPageCache.cs,LruPageCache,The following statement contains a magic number: _highWaterMark = (int) (limit*0.95);
Magic Number,BrightstarDB.Storage.Persistence,LruPageCache,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\Persistence\LruPageCache.cs,LruPageCache,The following statement contains a magic number: _lowWaterMark = (int) (limit*0.80);
Magic Number,BrightstarDB.Storage.TransactionLog,TransactionInfo,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\TransactionLog\TransactionInfo.cs,Read,The following statement contains a magic number: if (VersionNumber == 1)              {                  var guidBytes = dataStream.ReadBytes(16);                  JobId = new Guid(guidBytes);                  var ticks = dataStream.ReadInt64();                  TransactionStartTime = new DateTime(ticks);                  TransactionType = (TransactionType)dataStream.ReadInt32();                  TransactionStatus = (TransactionStatus)dataStream.ReadInt32();                  DataStartPosition = dataStream.ReadUInt64();                  DataLength = dataStream.ReadUInt64();                }              else              {                  throw new BrightstarInternalException("Invalid TransactionInfo structure version: " + VersionNumber);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Encode,The following statement contains a magic number: while (srcSize >= 1)              {                  blockSize = srcSize < BASE32_INPUT ? srcSize : BASE32_INPUT;                  n1 = n2 = n3 = n4 = n5 = n6 = n7 = n8 = 0;                    if (blockSize < 1 || blockSize > 5) Debug.Assert(false);                  if (blockSize == 5)                  {                      n8 = (byte)(bytes[blockStart + 4] & 0x1f);                      n7 = (byte)((bytes[blockStart + 4] & 0xe0) >> 5);                  }                  if (blockSize >= 4)                  {                      n7 |= (byte)((bytes[blockStart + 3] & 0x03) << 3);                      n6 = (byte)((bytes[blockStart + 3] & 0x7c) >> 2);                      n5 = (byte)((bytes[blockStart + 3] & 0x80) >> 7);                  }                  if (blockSize >= 3)                  {                      n5 |= (byte)((bytes[blockStart + 2] & 0x0f) << 1);                      n4 = (byte)((bytes[blockStart + 2] & 0xf0) >> 4);                  }                  if (blockSize >= 2)                  {                      n4 |= (byte)((bytes[blockStart + 1] & 0x01) << 4);                      n3 = (byte)((bytes[blockStart + 1] & 0x3e) >> 1);                      n2 = (byte)((bytes[blockStart + 1] & 0xc0) >> 6);                  }                  if (blockSize >= 1)                  {                      n2 |= (byte)((bytes[blockStart] & 0x07) << 2);                      n1 = (byte)((bytes[blockStart] & 0xf8) >> 3);                  }                  blockStart += blockSize;                  srcSize -= blockSize;                    Debug.Assert(n1 <= 31);                  Debug.Assert(n2 <= 31);                  Debug.Assert(n3 <= 31);                  Debug.Assert(n4 <= 31);                  Debug.Assert(n5 <= 31);                  Debug.Assert(n6 <= 31);                  Debug.Assert(n7 <= 31);                  Debug.Assert(n8 <= 31);                    // Padding                  if (blockSize < 1 || blockSize > 5)                  {                      Debug.Assert(false);                  }                  if (blockSize == 1) { n3 = n4 = 32; }                  if (blockSize <= 2) { n5 = 32; }                  if (blockSize <= 3) { n6 = n7 = 32; }                  if (blockSize <= 4) { n8 = 32; }                    // 8 outputs                  dest.Append(EncodeSymbol[n1]);                  dest.Append(EncodeSymbol[n2]);                  dest.Append(EncodeSymbol[n3]);                  dest.Append(EncodeSymbol[n4]);                  dest.Append(EncodeSymbol[n5]);                  dest.Append(EncodeSymbol[n6]);                  dest.Append(EncodeSymbol[n7]);                  dest.Append(EncodeSymbol[n8]);              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,GetDecodableString,The following statement contains a magic number: while (str.Length % 8 != 0)              {                  // Pad with =                  str = str + "=";              }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,GetDecodedLength,The following statement contains a magic number: return ((decodable.Length + 7) / 8) * 5;
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,GetDecodedLength,The following statement contains a magic number: return ((decodable.Length + 7) / 8) * 5;
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,GetDecodedLength,The following statement contains a magic number: return ((decodable.Length + 7) / 8) * 5;
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,Base32,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\Base32.cs,Decode,The following statement contains a magic number: while (srcSize >= 1)              {                  // 8 inputs                  in1 = src[srcOffset++];                  in2 = src[srcOffset++];                  in3 = src[srcOffset++];                  in4 = src[srcOffset++];                  in5 = src[srcOffset++];                  in6 = src[srcOffset++];                  in7 = src[srcOffset++];                  in8 = src[srcOffset++];                  srcSize -= 8;                    // Validation                  if (in1 > 0x80 || in2 >= 0x80 || in3 >= 0x80 || in4 >= 0x80                      || in5 > 0x80 || in6 >= 0x80 || in7 >= 0x80 || in8 >= 0x80)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // Convert to base32 value                  in1 = (char)DecodeValue[in1];                  in2 = (char)DecodeValue[in2];                  in3 = (char)DecodeValue[in3];                  in4 = (char)DecodeValue[in4];                  in5 = (char)DecodeValue[in5];                  in6 = (char)DecodeValue[in6];                  in7 = (char)DecodeValue[in7];                  in8 = (char)DecodeValue[in8];                  // Validate base32                  if (in1 > BASE32_MAX_VALUE || in2 > BASE32_MAX_VALUE)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                  // The following can be padding (0x20)                  if (in3 > BASE32_MAX_VALUE + 1 || in4 > BASE32_MAX_VALUE + 1                      || in5 > BASE32_MAX_VALUE + 1 || in6 > BASE32_MAX_VALUE + 1                      || in7 > BASE32_MAX_VALUE + 1 || in8 > BASE32_MAX_VALUE + 1)                  {                      throw new FormatException("Invalid Base32 character in input string");                  }                    dest[destOffset++] = (byte)(((in1 & 0x1f) << 3) | ((in2 & 0x1c) >> 2));                  dest[destOffset++] = (byte)(((in2 & 0x03) << 6) | ((in3 & 0x1f) << 1) | ((in4 & 0x10) >> 4));                  dest[destOffset++] = (byte)(((in4 & 0x0f) << 4) | ((in5 & 0x1e) >> 1));                  dest[destOffset++] = (byte)(((in5 & 0x01) << 7) | ((in6 & 0x1f) << 2) | ((in7 & 0x18) >> 3));                  dest[destOffset++] = (byte)(((in7 & 0x07) << 5) | (in8 & 0x1f));                  destSize += 5;                    // Padding                  if (in8 == BASE32_MAX_VALUE + 1)                  {                      destSize--;                      Debug.Assert((in7 == BASE32_MAX_VALUE + 1 && in6 == BASE32_MAX_VALUE + 1) || (in7 != BASE32_MAX_VALUE + 1));                      if (in6 == BASE32_MAX_VALUE + 1)                      {                          destSize--;                          if (in5 == BASE32_MAX_VALUE + 1)                          {                              destSize--;                              Debug.Assert((in4 == BASE32_MAX_VALUE + 1 && in3 == BASE32_MAX_VALUE + 1) || (in4 != BASE32_MAX_VALUE + 1));                              if (in3 == BASE32_MAX_VALUE + 1)                              {                                  destSize--;                              }                          }                      }                  }                }
Magic Number,BrightstarDB.Utils,LruCache<TKey;TValue>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\LruCache.cs,LruCache,The following statement contains a magic number: if (highWatermark <= 0)              {                  highWatermark = (int) (limit*0.95);              }
Magic Number,BrightstarDB.Utils,LruCache<TKey;TValue>,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\LruCache.cs,LruCache,The following statement contains a magic number: if (lowWatermark <= 0)              {                  lowWatermark = (int) (limit*0.85);              }
Magic Number,BrightstarDB.Utils,StringExtensions,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\StringExtensions.cs,GetBrightstarHashCode,The following statement contains a magic number: uint h = 5381;
Magic Number,BrightstarDB.Utils,StringExtensions,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Utils\StringExtensions.cs,GetBrightstarHashCode,The following statement contains a magic number: for (int i = 0; i < arry.Length; i++)              {                  h = (h << 5) + h ^ arry[i];              }
Magic Number,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,DictionaryEntryNewExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\DictionaryEntryNewExpressionTransformer.cs,CanAddMembers,The following statement contains a magic number: return instantiatedType == typeof (DictionaryEntry) && arguments.Count == 2;
Magic Number,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,KeyValuePairNewExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\KeyValuePairNewExpressionTransformer.cs,CanAddMembers,The following statement contains a magic number: return instantiatedType.Name == typeof (KeyValuePair<'>).Name                && instantiatedType.Namespace == typeof (KeyValuePair<'>).Namespace                && arguments.Count == 2;
Magic Number,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,Transform,The following statement contains a magic number: if (leftSideAsMethodCallExpression != null && (IsVBOperator (leftSideAsMethodCallExpression.Method' c_vbCompareStringOperatorMethodName)))        {          var rightSideAsConstantExpression = expression.Right as ConstantExpression;          Debug.Assert (              rightSideAsConstantExpression != null && rightSideAsConstantExpression.Value is Int32 && (int) rightSideAsConstantExpression.Value == 0'              "The right side of the binary expression has to be a constant expression with value 0.");            var leftSideArgument2AsConstantExpression = leftSideAsMethodCallExpression.Arguments[2] as ConstantExpression;          Debug.Assert (              leftSideArgument2AsConstantExpression != null && leftSideArgument2AsConstantExpression.Value is bool'              "The second argument of the method call expression has to be a constant expression with a boolean value.");            return GetExpressionForNodeType (expression' leftSideAsMethodCallExpression' leftSideArgument2AsConstantExpression);        }
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,AggregateExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\AggregateExpressionNode.cs,AggregateExpressionNode,The following statement contains a magic number: if (func.Parameters.Count != 2)          throw new ArgumentException ("Func must have exactly two parameters."' "func");
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,AggregateFromSeedExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\AggregateFromSeedExpressionNode.cs,AggregateFromSeedExpressionNode,The following statement contains a magic number: if (func.Parameters.Count != 2)          throw new ArgumentException ("Func must have exactly two parameters."' "func");
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,CreateSelectorForSelectNode,The following statement contains a magic number: var expressionMapping = new Dictionary<Expression' Expression> (2)                                {                                    { resultSelector.Parameters[1]' groupParameter }'                                    { resultSelector.Parameters[0]' keyExpression }                                };
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,GetResultSelector,The following statement contains a magic number: if (resultSelectorOrNull != null)        {          if (resultSelectorOrNull.Parameters.Count != 2)            throw new ArgumentException ("ResultSelector must have exactly two parameters."' "resultSelectorOrNull");            return resultSelectorOrNull;        }        else        {          if (elementSelectorOrResultSelector.Parameters.Count != 2)            throw new ArgumentException ("ResultSelector must have exactly two parameters."' "elementSelectorOrResultSelector");          return elementSelectorOrResultSelector;        }
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupByWithResultSelectorExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupByWithResultSelectorExpressionNode.cs,GetResultSelector,The following statement contains a magic number: if (resultSelectorOrNull != null)        {          if (resultSelectorOrNull.Parameters.Count != 2)            throw new ArgumentException ("ResultSelector must have exactly two parameters."' "resultSelectorOrNull");            return resultSelectorOrNull;        }        else        {          if (elementSelectorOrResultSelector.Parameters.Count != 2)            throw new ArgumentException ("ResultSelector must have exactly two parameters."' "elementSelectorOrResultSelector");          return elementSelectorOrResultSelector;        }
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,GroupJoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\GroupJoinExpressionNode.cs,GroupJoinExpressionNode,The following statement contains a magic number: if (resultSelector.Parameters.Count != 2)          throw new ArgumentException ("Result selector must have exactly two parameters."' "resultSelector");
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,JoinExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\JoinExpressionNode.cs,JoinExpressionNode,The following statement contains a magic number: if (resultSelector.Parameters.Count != 2)          throw new ArgumentException ("Result selector must have exactly two parameters."' "resultSelector");
Magic Number,Remotion.Linq.Parsing.Structure.IntermediateModel,SelectManyExpressionNode,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\Structure\IntermediateModel\SelectManyExpressionNode.cs,SelectManyExpressionNode,The following statement contains a magic number: if (resultSelector != null)        {          if (resultSelector.Parameters.Count != 2)            throw new ArgumentException ("Result selector must have exactly two parameters."' "resultSelector");            ResultSelector = resultSelector;        }        else        {          var parameter1 = Expression.Parameter (collectionSelector.Parameters[0].Type' collectionSelector.Parameters[0].Name);          var itemType = ReflectionUtility.GetItemTypeOfIEnumerable (CollectionSelector.Body.Type' "collectionSelector");          var parameter2 = Expression.Parameter (itemType' parseInfo.AssociatedIdentifier);          ResultSelector = Expression.Lambda (parameter2' parameter1' parameter2);        }
Missing Default,BrightstarDB.Portable.Compatibility,NotifyCollectionChangedEventArgs,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\Compatibility\INotifyCollectionChanged.cs,NotifyCollectionChangedEventArgs,The following switch statement is missing a default case: switch (action)              {                  case NotifyCollectionChangedAction.Add:                      NewItems = new List<object> {item};                      NewStartingIndex = index;                      break;                  case NotifyCollectionChangedAction.Remove:                      OldItems = new List<object> {item};                      OldStartingIndex = index;                      break;              }
Missing Default,BrightstarDB.Caching,LruCacheEvictionPolicy,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Caching\LruCacheEvictionPolicy.cs,NotifyInsert,The following switch statement is missing a default case: switch (priority)              {                  case CachePriority.Normal:                      queue = _normalPriorityEntries;                      break;                  case CachePriority.High:                      queue = _highPriorityEntries;                      break;              }
Missing Default,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,VisitMemberExpression,The following switch statement is missing a default case: switch (hint.MappingType)                          {                              case PropertyMappingType.Id:                                  //throw new NotSupportedException("Properties that map to a topic ID cannot be used as part of a filter expression");                                  if (_appendExpressionVariable)                                  {                                      AppendFormat("?{0}"' sourceVarName);                                      return expression;                                  }                                  break;                                case PropertyMappingType.Arc:                              case PropertyMappingType.Property:                              {                                  var existingVarName = QueryBuilder.GetVariableForObject(GraphNode.Variable'                                      sourceVarName'                                      GraphNode.Iri'                                      hint.SchemaTypeUri);                                  if (!String.IsNullOrEmpty(existingVarName))                                  {                                      if (_appendExpressionVariable)                                      {                                          AppendFormat("?{0}"' existingVarName);                                      }                                      return new SelectVariableNameExpression(existingVarName'                                          hint.MappingType == PropertyMappingType.Arc                                              ? VariableBindingType.Resource                                              : VariableBindingType.Literal'                                          propertyInfo.PropertyType);                                  }                                  else                                  {                                                                                var varName = QueryBuilder.NextVariable();                                          QueryBuilder.AddTripleConstraint(                                              GraphNode.Variable' sourceVarName'                                              GraphNode.Iri' hint.SchemaTypeUri'                                              GraphNode.Variable' varName);                                          if (_appendExpressionVariable)                                          {                                              AppendFormat("?{0}"' varName);                                          }                                          return new SelectVariableNameExpression(                                              varName'                                              hint.MappingType == PropertyMappingType.Arc                                                  ? VariableBindingType.Resource                                                  : VariableBindingType.Literal'                                              propertyInfo.PropertyType);                                                                        }                              }                              case PropertyMappingType.InverseArc:                              {                                  var existingVarName = QueryBuilder.GetVariableForSubject(GraphNode.Iri'                                      hint.SchemaTypeUri'                                      GraphNode.Variable'                                      sourceVarName);                                  if (!String.IsNullOrEmpty(existingVarName))                                  {                                      if (_appendExpressionVariable)                                      {                                          AppendFormat("?{0}"' existingVarName);                                      }                                      return new SelectVariableNameExpression(existingVarName'                                          VariableBindingType.Resource'                                          propertyInfo.PropertyType);                                  }                                  var varName = QueryBuilder.NextVariable();                                  QueryBuilder.AddTripleConstraint(GraphNode.Variable' varName'                                      GraphNode.Iri' hint.SchemaTypeUri'                                      GraphNode.Variable' sourceVarName);                                  if (_appendExpressionVariable)                                  {                                      AppendFormat("?{0}"' varName);                                  }                                  return new SelectVariableNameExpression(varName' VariableBindingType.Resource'                                      propertyInfo.PropertyType);                              }                              case PropertyMappingType.Address:                                  if (_appendExpressionVariable)                                  {                                      AppendFormat("?{0}"' sourceVarName);                                  }                                  return expression;                          }
Missing Default,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,VisitMemberExpression,The following switch statement is missing a default case: switch (propertyInfo.Name)                              {                                  case "Day":                                      fnName = "DAY";                                      break;                                  case "Hour":                                      fnName = "HOURS";                                      break;                                  case "Minute":                                      fnName = "MINUTES";                                      break;                                  case "Month":                                      fnName = "MONTH";                                      break;                                  case "Second":                                      fnName = "SECONDS";                                      break;                                  case "Year":                                      fnName = "YEAR";                                      break;                              }
Missing Default,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,HandleMethodCallExpression,The following switch statement is missing a default case: switch (expression.Method.Name)                      {                          case "Round":                              fnName = "ROUND";                              break;                          case "Floor":                              fnName = "FLOOR";                              break;                          case "Ceiling":                              fnName = "CEIL";                              break;                      }
Missing Default,BrightstarDB.EntityFramework.Query,FilterWriter,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\FilterWriter.cs,VisitUnaryExpression,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Not:                      _filterExpressionBuilder.Append("(!(");                      VisitExpression(expression.Operand);                      _filterExpressionBuilder.Append("))");                      return expression;              }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlGeneratorSelectExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorSelectExpressionTreeVisitor.cs,VisitMemberExpression,The following switch statement is missing a default case: switch (propertyHint.MappingType)                          {                              case PropertyMappingType.Arc:                                  {                                      var memberVarName = _queryBuilder.GetVariableForObject(                                          GraphNode.Variable' sourceVarName'                                          GraphNode.Iri' propertyHint.SchemaTypeUri);                                      if (memberVarName == null)                                      {                                          memberVarName = _queryBuilder.NextVariable();                                          _queryBuilder.AddTripleConstraint(                                              GraphNode.Variable' sourceVarName'                                              GraphNode.Iri' propertyHint.SchemaTypeUri'                                              GraphNode.Variable' memberVarName);                                      }                                      return new SelectVariableNameExpression(memberVarName' VariableBindingType.Resource' propertyInfo.PropertyType );                                  }                              case PropertyMappingType.InverseArc:                                  {                                      var memberVarName = _queryBuilder.GetVariableForSubject(                                          GraphNode.Iri' propertyHint.SchemaTypeUri'                                          GraphNode.Variable' sourceVarName);                                      if (memberVarName == null)                                      {                                          memberVarName = _queryBuilder.NextVariable();                                          _queryBuilder.AddTripleConstraint(                                              GraphNode.Variable' memberVarName'                                              GraphNode.Iri' propertyHint.SchemaTypeUri'                                              GraphNode.Variable' sourceVarName);                                      }                                      return new SelectVariableNameExpression(memberVarName' VariableBindingType.Resource' propertyInfo.PropertyType);                                  }                              case PropertyMappingType.Property:                                  {                                      var propertyValueVarName = _queryBuilder.GetVariableForObject(GraphNode.Variable'                                                                                                    sourceVarName'                                                                                                    GraphNode.Iri'                                                                                                    propertyHint.                                                                                                        SchemaTypeUri);                                      if (propertyValueVarName == null)                                      {                                          propertyValueVarName = _queryBuilder.NextVariable();                                          _queryBuilder.AddTripleConstraint(                                              GraphNode.Variable' sourceVarName'                                              GraphNode.Iri' propertyHint.SchemaTypeUri'                                              GraphNode.Variable' propertyValueVarName);                                      }                                      return new SelectVariableNameExpression(propertyValueVarName'                                                                              VariableBindingType.Literal' propertyInfo.PropertyType);                                  }                              case PropertyMappingType.Address:                                  {                                      return new SelectVariableNameExpression(sourceVarName' VariableBindingType.Resource' propertyInfo.PropertyType);                                  }                                  case PropertyMappingType.Id:                                  {                                      var prefix = EntityMappingStore.GetIdentifierPrefix(propertyInfo.DeclaringType);                                      return new SelectIdentifierVariableNameExpression(sourceVarName' prefix);                                      //return new SelectVariableNameExpression(sourceVarName' VariableBindingType.Resource' propertyInfo.PropertyType);                                  }                          }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionOptimisationVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionOptimisationVisitor.cs,VisitBinaryExpression,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Equal:                  case ExpressionType.NotEqual:                      _inBooleanExpression = false;                      ret =                          new BooleanFlagExpression(                              (                              // Allowed: x.prop=constant                              (expression.Left is MemberExpression && expression.Right is ConstantExpression) ||                              // Allowed: x.prop=y.other_prop                              (expression.Left is MemberExpression && expression.Right is MemberExpression)                              ) &&                              // Check left and right expression content are optimisable                              IsTrue(VisitExpression(expression.Left)) &&                                                    IsTrue(VisitExpression(expression.Right)));                      break;                     case ExpressionType.OrElse:                  case ExpressionType.AndAlso:                      _inBooleanExpression = true;                      ret =                           new BooleanFlagExpression(                              // Check left and right expression content are optimisable                              IsTrue(VisitExpression(expression.Left)) &&                                                    IsTrue(VisitExpression(expression.Right)));                      break;              }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleBinaryExpression,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Or:                      _filterWriter.WriteFunction(BrightstarFunctionFactory.BrightstarFunctionsNamespace'                          BrightstarFunctionFactory.BitOr' expression.Left' expression.Right);                      return expression;                  case ExpressionType.And:                      _filterWriter.WriteFunction(BrightstarFunctionFactory.BrightstarFunctionsNamespace'                          BrightstarFunctionFactory.BitAnd' expression.Left' expression.Right);                      return expression;              }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,HandleCompareExpression,The following switch statement is missing a default case: switch (hint.MappingType)                              {                                  case PropertyMappingType.Id:                                      filter = nodeType == ExpressionType.GreaterThan                                          ? "(str(?{0}) > '{1}')"                                          : "(str(?{0}) < '{1}')";                                      var prefix = EntityMappingStore.GetIdentifierPrefix(propertyInfo.DeclaringType);                                      _filterWriter.AppendFormat(filter' sourceVarName' prefix + value);                                      break;                                    case PropertyMappingType.Arc:                                  case PropertyMappingType.Property:                                  {                                      var existingVarName = QueryBuilder.GetVariableForObject(GraphNode.Variable'                                          sourceVarName'                                          GraphNode.Iri'                                          hint.SchemaTypeUri);                                      if (!string.IsNullOrEmpty(existingVarName))                                      {                                            _filterWriter.AppendFormat(filter' existingVarName' value);                                      }                                      else                                      {                                          var varName = QueryBuilder.NextVariable();                                          QueryBuilder.AddTripleConstraint(                                              GraphNode.Variable' sourceVarName'                                              GraphNode.Iri' hint.SchemaTypeUri'                                              GraphNode.Variable' varName);                                          _filterWriter.AppendFormat(filter' varName' value);                                      }                                      break;                                    }                                  case PropertyMappingType.InverseArc:                                  {                                      var existingVarName = QueryBuilder.GetVariableForSubject(GraphNode.Iri'                                          hint.SchemaTypeUri'                                          GraphNode.Variable'                                          sourceVarName);                                      if (!String.IsNullOrEmpty(existingVarName))                                      {                                          _filterWriter.AppendFormat(filter' existingVarName' value);                                      }                                      else                                      {                                          var varName = QueryBuilder.NextVariable();                                          QueryBuilder.AddTripleConstraint(GraphNode.Variable' varName'                                              GraphNode.Iri' hint.SchemaTypeUri'                                              GraphNode.Variable' sourceVarName);                                          _filterWriter.AppendFormat(filter' varName' value);                                      }                                  }                                      break;                                  case PropertyMappingType.Address:                                      _filterWriter.AppendFormat(filter' sourceVarName' value);                                      break;                              }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitMethodCallExpression,The following switch statement is missing a default case: switch (expression.Method.Name)                          {                              case "Round":                                  fnName = "ROUND";                                  break;                              case "Floor":                                  fnName = "FLOOR";                                  break;                              case "Ceiling":                                  fnName = "CEIL";                                  break;                          }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlGeneratorWhereExpressionTreeVisitor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlGeneratorWhereExpressionTreeVisitor.cs,VisitMemberExpression,The following switch statement is missing a default case: switch (hint.MappingType)                              {                                  case PropertyMappingType.Id:                                      return new SelectVariableNameExpression(sourceVarName' VariableBindingType.Resource'                                          propertyInfo.DeclaringType);                                    case PropertyMappingType.Arc:                                  case PropertyMappingType.Property:                                  {                                      if (_optimizeFilter && _inBooleanExpression)                                      {                                          if (expression.Type == typeof (bool))                                          {                                              // Explicitly bind to true                                              QueryBuilder.AddTripleConstraint(                                                  GraphNode.Variable' sourceVarName'                                                   GraphNode.Iri' hint.SchemaTypeUri'                                                   GraphNode.Raw' "true");                                          }                                          else                                          {                                              // Any binding is acceptable                                              QueryBuilder.AddTripleConstraint(                                                  GraphNode.Variable' sourceVarName'                                                  GraphNode.Iri' hint.SchemaTypeUri'                                                  GraphNode.Variable' QueryBuilder.NextVariable());                                          }                                          return expression;                                      }                                      var varName = QueryBuilder.GetVariableForObject(                                          GraphNode.Variable' sourceVarName'                                          GraphNode.Iri' hint.SchemaTypeUri);                                      if (varName == null)                                      {                                          varName = QueryBuilder.NextVariable();                                          QueryBuilder.AddTripleConstraint(                                              GraphNode.Variable' sourceVarName'                                              GraphNode.Iri' hint.SchemaTypeUri'                                              GraphNode.Variable' varName);                                      }                                      return new SelectVariableNameExpression(varName'                                          hint.MappingType == PropertyMappingType.Arc                                              ? VariableBindingType.Resource                                              : VariableBindingType.Literal'                                          propertyInfo.PropertyType);                                  }                                    case PropertyMappingType.Address:                                      return new SelectVariableNameExpression(sourceVarName' VariableBindingType.Resource'                                          propertyInfo.PropertyType);                                    case PropertyMappingType.InverseArc:                                  {                                      var varName = QueryBuilder.GetVariableForSubject(                                          GraphNode.Iri' hint.SchemaTypeUri'                                          GraphNode.Variable' sourceVarName);                                      if (varName == null)                                      {                                          varName = QueryBuilder.NextVariable();                                          QueryBuilder.AddTripleConstraint(                                              GraphNode.Variable' varName'                                              GraphNode.Iri' hint.SchemaTypeUri'                                              GraphNode.Variable' sourceVarName);                                      }                                      return new SelectVariableNameExpression(varName'                                          VariableBindingType.Resource'                                          propertyInfo.PropertyType);                                  }                              }
Missing Default,BrightstarDB.EntityFramework.Query,SparqlQueryBuilder,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\EntityFramework\Query\SparqlQueryBuilder.cs,Stringify,The following switch statement is missing a default case: switch (nodeType)              {                  case GraphNode.Iri:                      return String.Format("<{0}>"' nodeValue);                  case GraphNode.Literal:                      return QuoteLiteralString(nodeValue);                  case GraphNode.Variable:                      return String.Format("?{0}"' nodeValue);                  case GraphNode.Raw:                      return nodeValue;              }
Missing Default,BrightstarDB.Query,BrightstarFunctionFactory,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Query\BrightstarFunctionFactory.cs,TryCreateExpression,The following switch statement is missing a default case: switch (func)                  {                      case BitAnd:                          if (args.Count == 2)                          {                              brightstarFunc = new BitAndFunc(args[0]' args[1]);                          }                           else                          {                              throw new RdfParseException("Incorrect number of arguments for the BrightstarDB bit_and() function.");                          }                          break;                      case BitOr:                          if (args.Count == 2)                          {                              brightstarFunc = new BitOrFunc(args[0]' args[1]);                          }                          else                          {                              throw new RdfParseException("Incorrect number of arguments for the BrightstarDB bit_and() function.");                          }                          break;                  }
Missing Default,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,ReExecuteTransaction,The following switch statement is missing a default case: switch (transactionType)              {                  case TransactionType.ImportJob:                      var importJob = new ImportJob(jobId' jobLabel' storeWorker);                      importJob.ReadTransactionDataFromStream(transactionLog.GetTransactionData(dataStartPosition));                      storeWorker.QueueJob(importJob);                      break;                  case TransactionType.UpdateTransaction:                      var updateJob = new UpdateTransaction(jobId'jobLabel' storeWorker);                      updateJob.ReadTransactionDataFromStream(transactionLog.GetTransactionData(dataStartPosition));                      storeWorker.QueueJob(updateJob);                      break;                  case TransactionType.SparqlUpdateTransaction:                      var sparqlUpdateJob = new SparqlUpdateJob(jobId' jobLabel' storeWorker' null);                      sparqlUpdateJob.ReadTransactionDataFromStream(transactionLog.GetTransactionData(dataStartPosition));                      storeWorker.QueueJob(sparqlUpdateJob);                      break;              }
Missing Default,BrightstarDB.Server,ServerCore,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Server\ServerCore.cs,LoadTransaction,The following switch statement is missing a default case: switch (txn.TransactionType)              {                  case TransactionType.ImportJob:                      var importJob = new ImportJob(jobId' jobLabel' null);                      importJob.ReadTransactionDataFromStream(transactionLog.GetTransactionData(txn.DataStartPosition));                      return importJob;                  case TransactionType.UpdateTransaction:                      var updateJob = new UpdateTransaction(jobId' jobLabel' null);                      updateJob.ReadTransactionDataFromStream(transactionLog.GetTransactionData(txn.DataStartPosition));                      return updateJob;                  case TransactionType.SparqlUpdateTransaction:                      var sparqlUpdateJob = new SparqlUpdateJob(jobId' jobLabel' null' null);                      sparqlUpdateJob.ReadTransactionDataFromStream(transactionLog.GetTransactionData(txn.DataStartPosition));                      return sparqlUpdateJob;              }
Missing Default,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,CreateStore,The following switch statement is missing a default case: switch (storePersistenceType)              {                  case PersistenceType.AppendOnly:                      dataPageStore = new AppendOnlyFilePageStore(_persistenceManager' dataFilePath' PageSize' false' _storeConfiguration.DisableBackgroundWrites);                      break;                  case PersistenceType.Rewrite:                      dataPageStore = new BinaryFilePageStore(_persistenceManager' dataFilePath' PageSize' false' 0' 1' _storeConfiguration.DisableBackgroundWrites);                      break;              }
Missing Default,BrightstarDB.Storage.BPlusTreeStore,BPlusTreeStoreManager,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Storage\BPlusTreeStore\BPlusTreeStoreManager.cs,OpenStore,The following switch statement is missing a default case: switch (masterFile.PersistenceType)                  {                          case PersistenceType.AppendOnly:                          dataPageStore = new AppendOnlyFilePageStore(_persistenceManager' dataFilePath' PageSize' readOnly' _storeConfiguration.DisableBackgroundWrites);                          break;                          case PersistenceType.Rewrite:                          dataPageStore = new BinaryFilePageStore(_persistenceManager' dataFilePath' PageSize' readOnly'                               latestCommitPoint.CommitNumber' latestCommitPoint.NextCommitNumber' _storeConfiguration.DisableBackgroundWrites);                          break;                  }
Missing Default,BrightstarDB.Update,BrightstarUpdateProcessor,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB\Update\BrightstarUpdateProcessor.cs,ProcessClearCommand,The following switch statement is missing a default case: switch (cmd.Mode)              {                  case ClearMode.Default:                  case ClearMode.Graph:                      _manager.DeleteGraph(cmd.TargetUri);                      break;                  case ClearMode.Named:                      _manager.DeleteGraphs(_manager.ListGraphs().Select(u=>u.ToString()));                      break;                  case ClearMode.All:                      _manager.DeleteGraphs(_manager.ListGraphs().Select(u=>u.ToString()).Union(new string[]{Constants.DefaultGraphUri}));                      break;              }
Missing Default,Remotion.Linq,ReflectionUtility,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\ReflectionUtility.cs,GetMethod,The following switch statement is missing a default case: switch (wrappedCall.Body.NodeType)        {          case ExpressionType.Call:            return ((MethodCallExpression) wrappedCall.Body).Method;          case ExpressionType.MemberAccess:            var memberExpression = (MemberExpression) wrappedCall.Body;            var property = memberExpression.Member as PropertyInfo;            var method = property != null ? property.GetGetMethod() : null;            if (method != null)              return method;            break;        }
Missing Default,Remotion.Linq.Parsing.ExpressionTreeVisitors.Transformation.PredefinedTransformations,VBCompareStringExpressionTransformer,C:\repos\BrightstarDB_BrightstarDB\src\portable\BrightstarDB.Portable\relinq\RelinqCore\Parsing\ExpressionTreeVisitors\Transformation\PredefinedTransformations\VBCompareStringExpressionTransformer.cs,GetExpressionForNodeType,The following switch statement is missing a default case: switch (expression.NodeType)        {          case ExpressionType.Equal:            binaryExpression = Expression.Equal (leftSideAsMethodCallExpression.Arguments[0]' leftSideAsMethodCallExpression.Arguments[1]);            return new VBStringComparisonExpression (binaryExpression' (bool) leftSideArgument2AsConstantExpression.Value);          case ExpressionType.NotEqual:            binaryExpression = Expression.NotEqual (leftSideAsMethodCallExpression.Arguments[0]' leftSideAsMethodCallExpression.Arguments[1]);            return new VBStringComparisonExpression (binaryExpression' (bool) leftSideArgument2AsConstantExpression.Value);        }
