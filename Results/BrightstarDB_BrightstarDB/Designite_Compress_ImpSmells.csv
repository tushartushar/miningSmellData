Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,Parser,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,Cyclomatic complexity of the method is 24
Complex Method,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,GetUsageString,Cyclomatic complexity of the method is 11
Complex Method,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,LexFileArguments,Cyclomatic complexity of the method is 15
Long Identifier,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,GetUsageString,The length of the parameter minimumNumberOfCharsForHelpText is 31.
Long Statement,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,IsValidElementType,The length of the statement  "	return type != null && (type == typeof(int) || type == typeof(uint) || type == typeof(string) || type == typeof(bool) || type.IsEnum); " is 134.
Magic Number,Compress,Compress,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\Compress.cs,RunCompressJob,The following statement contains a magic number: while (!(compressJob.JobCompletedOk || compressJob.JobCompletedWithErrors)) {  	System.Threading.Thread.Sleep (1000);  	compressJob = client.GetJobInfo (storeName' compressJob.JobId);  }  
Magic Number,Compress,Compress,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\Compress.cs,RunCompressJob,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ArgumentsUsage,The following statement contains a magic number: if (screenWidth == 0)  	screenWidth = 80;  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ArgumentsUsage,The following statement contains a magic number: screenWidth = 80;  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: if (args != null) {  	foreach (string argument in args) {  		if (argument.Length > 0) {  			switch (argument [0]) {  			case '-':  			case '/':  				int endIndex = argument.IndexOfAny (new char[] {  					':''  					'+''  					'-'  				}' 1);  				string option = argument.Substring (1' endIndex == -1 ? argument.Length - 1 : endIndex - 1);  				string optionArgument;  				if (option.Length + 1 == argument.Length) {  					optionArgument = null;  				} else if (argument.Length > 1 + option.Length && argument [1 + option.Length] == ':') {  					optionArgument = argument.Substring (option.Length + 2);  				} else {  					optionArgument = argument.Substring (option.Length + 1);  				}  				Argument arg = (Argument)this.argumentMap [option];  				if (arg == null) {  					ReportUnrecognizedArgument (argument);  					hadError = true;  				} else {  					hadError |= !arg.SetValue (optionArgument' destination);  				}  				break;  			case '@':  				string[] nestedArguments;  				hadError |= LexFileArguments (argument.Substring (1)' out nestedArguments);  				hadError |= ParseArgumentList (nestedArguments' destination);  				break;  			default:  				if (this.defaultArgument != null) {  					hadError |= !this.defaultArgument.SetValue (argument' destination);  				} else {  					ReportUnrecognizedArgument (argument);  					hadError = true;  				}  				break;  			}  		}  	}  }  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: foreach (string argument in args) {  	if (argument.Length > 0) {  		switch (argument [0]) {  		case '-':  		case '/':  			int endIndex = argument.IndexOfAny (new char[] {  				':''  				'+''  				'-'  			}' 1);  			string option = argument.Substring (1' endIndex == -1 ? argument.Length - 1 : endIndex - 1);  			string optionArgument;  			if (option.Length + 1 == argument.Length) {  				optionArgument = null;  			} else if (argument.Length > 1 + option.Length && argument [1 + option.Length] == ':') {  				optionArgument = argument.Substring (option.Length + 2);  			} else {  				optionArgument = argument.Substring (option.Length + 1);  			}  			Argument arg = (Argument)this.argumentMap [option];  			if (arg == null) {  				ReportUnrecognizedArgument (argument);  				hadError = true;  			} else {  				hadError |= !arg.SetValue (optionArgument' destination);  			}  			break;  		case '@':  			string[] nestedArguments;  			hadError |= LexFileArguments (argument.Substring (1)' out nestedArguments);  			hadError |= ParseArgumentList (nestedArguments' destination);  			break;  		default:  			if (this.defaultArgument != null) {  				hadError |= !this.defaultArgument.SetValue (argument' destination);  			} else {  				ReportUnrecognizedArgument (argument);  				hadError = true;  			}  			break;  		}  	}  }  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: if (argument.Length > 0) {  	switch (argument [0]) {  	case '-':  	case '/':  		int endIndex = argument.IndexOfAny (new char[] {  			':''  			'+''  			'-'  		}' 1);  		string option = argument.Substring (1' endIndex == -1 ? argument.Length - 1 : endIndex - 1);  		string optionArgument;  		if (option.Length + 1 == argument.Length) {  			optionArgument = null;  		} else if (argument.Length > 1 + option.Length && argument [1 + option.Length] == ':') {  			optionArgument = argument.Substring (option.Length + 2);  		} else {  			optionArgument = argument.Substring (option.Length + 1);  		}  		Argument arg = (Argument)this.argumentMap [option];  		if (arg == null) {  			ReportUnrecognizedArgument (argument);  			hadError = true;  		} else {  			hadError |= !arg.SetValue (optionArgument' destination);  		}  		break;  	case '@':  		string[] nestedArguments;  		hadError |= LexFileArguments (argument.Substring (1)' out nestedArguments);  		hadError |= ParseArgumentList (nestedArguments' destination);  		break;  	default:  		if (this.defaultArgument != null) {  			hadError |= !this.defaultArgument.SetValue (argument' destination);  		} else {  			ReportUnrecognizedArgument (argument);  			hadError = true;  		}  		break;  	}  }  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: switch (argument [0]) {  case '-':  case '/':  	int endIndex = argument.IndexOfAny (new char[] {  		':''  		'+''  		'-'  	}' 1);  	string option = argument.Substring (1' endIndex == -1 ? argument.Length - 1 : endIndex - 1);  	string optionArgument;  	if (option.Length + 1 == argument.Length) {  		optionArgument = null;  	} else if (argument.Length > 1 + option.Length && argument [1 + option.Length] == ':') {  		optionArgument = argument.Substring (option.Length + 2);  	} else {  		optionArgument = argument.Substring (option.Length + 1);  	}  	Argument arg = (Argument)this.argumentMap [option];  	if (arg == null) {  		ReportUnrecognizedArgument (argument);  		hadError = true;  	} else {  		hadError |= !arg.SetValue (optionArgument' destination);  	}  	break;  case '@':  	string[] nestedArguments;  	hadError |= LexFileArguments (argument.Substring (1)' out nestedArguments);  	hadError |= ParseArgumentList (nestedArguments' destination);  	break;  default:  	if (this.defaultArgument != null) {  		hadError |= !this.defaultArgument.SetValue (argument' destination);  	} else {  		ReportUnrecognizedArgument (argument);  		hadError = true;  	}  	break;  }  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: if (option.Length + 1 == argument.Length) {  	optionArgument = null;  } else if (argument.Length > 1 + option.Length && argument [1 + option.Length] == ':') {  	optionArgument = argument.Substring (option.Length + 2);  } else {  	optionArgument = argument.Substring (option.Length + 1);  }  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: if (argument.Length > 1 + option.Length && argument [1 + option.Length] == ':') {  	optionArgument = argument.Substring (option.Length + 2);  } else {  	optionArgument = argument.Substring (option.Length + 1);  }  
Magic Number,CommandLine,Parser,F:\newReposMay17\BrightstarDB_BrightstarDB\src\tools\BrightstarCommands\Compress\CommandLineArguments.cs,ParseArgumentList,The following statement contains a magic number: optionArgument = argument.Substring (option.Length + 2);  
