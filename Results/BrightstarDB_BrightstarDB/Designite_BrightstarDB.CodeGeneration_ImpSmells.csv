Implementation smell,Namespace,Class,File,Method,Description
Long Method,BrightstarDB.CodeGeneration,EntityContextGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GetConstructors,The method has 171 lines of code.
Long Method,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GetNonIdentifierProperties,The method has 181 lines of code.
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,Generate,The method has 7 parameters. Parameters: language' solutionPath' contextNamespace' contextName' entityNamespaceSelector' entityNameSelector' interfacePredicate
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,Generate2,The method has 5 parameters. Parameters: language' solutionPath' contextNamespace' contextName' internalEntityClasses
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,_Generate,The method has 8 parameters. Parameters: language' solutionPath' contextNamespace' contextName' entityNamespaceSelector' entityNameSelector' entityAccessibiltySelector' interfacePredicate
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GenerateAsync,The method has 8 parameters. Parameters: language' solutionPath' contextNamespace' contextName' entityNamespaceSelector' entityNameSelector' entityAccessibilitySelector' interfacePredicate
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GenerateAsync,The method has 8 parameters. Parameters: language' solution' contextNamespace' contextName' entityNamespaceSelector' entityNameSelector' entityAccessibilitySelector' interfacePredicate
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GenerateContext,The method has 7 parameters. Parameters: language' solution' namespace' name' interfaceSymbols' entityNamespaceSelector' entityNameSelector
Long Parameter List,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GenerateEntity,The method has 8 parameters. Parameters: language' solution' compilation' interfaceSymbols' entityNamespaceSelector' entityNameSelector' entityAccessibilitySelector' interfaceSymbol
Long Parameter List,BrightstarDB.CodeGeneration,GeneratorBase,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GeneratorBase,The method has 8 parameters. Parameters: language' syntaxGenerator' solution' compilation' namespace' interfaceSymbols' entityNamespaceSelector' entityNameSelector
Long Parameter List,BrightstarDB.CodeGeneration,EntityContextGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,EntityContextGenerator,The method has 9 parameters. Parameters: language' syntaxGenerator' solution' compilation' namespace' name' interfaceSymbols' entityNamespaceSelector' entityNameSelector
Long Parameter List,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,EntityGenerator,The method has 9 parameters. Parameters: language' syntaxGenerator' solution' compilation' interfaceSymbols' entityNamespaceSelector' entityNameSelector' entityAccessibilitySelector' interfaceSymbol
Long Identifier,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,,The length of the parameter interfaceNameTransformationExpression is 37.
Long Statement,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,Generate,The length of the statement  "            return _Generate(language' solutionPath' contextNamespace' contextName' entityNamespaceSelector' entityNameSelector' null' interfacePredicate); " is 143.
Long Statement,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GenerateAsync,The length of the statement  "            interfacePredicate = interfacePredicate ?? (x => x.GetAttributes().Any(y => y.AttributeClass.ToString() == Constants.EntityAttribute)); " is 135.
Long Statement,BrightstarDB.CodeGeneration,Generator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,InteralyEntityAccessibilitySelector,The length of the statement  "            return interfaceSymbol.DeclaredAccessibility == Accessibility.Public ? Accessibility.Internal : interfaceSymbol.DeclaredAccessibility; " is 134.
Long Statement,BrightstarDB.CodeGeneration,EntityContextGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GetConstructors,The length of the statement  "                //     public [Name](string connectionString' bool? enableOptimisticLocking = null' string updateGraphUri = null' IEnumerable< string > datasetGraphUris = null' string versionGraphUri = null) " is 191.
Long Statement,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GetIdProperty,The length of the statement  "                propertyDeclaration = syntaxGenerator.AsPublicInterfaceImplementation(propertyDeclaration' syntaxGenerator.TypeExpression(identityProperty.ContainingType)); " is 156.
Long Statement,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,GetNonIdentifierProperties,The length of the statement  "                    propertyDeclaration = syntaxGenerator.AsPublicInterfaceImplementation(propertyDeclaration' syntaxGenerator.TypeExpression(property.ContainingType)); " is 148.
Long Statement,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,ValidateIdentityProperty,The length of the statement  "                            "The property '{0}' must be of type {1} to be used as the identity property for an entity. If this property is intended to be the identity property for the entity please change its type to {1}. If it is not intended to be the identity property' either rename this property or create an identity property and decorate it with the [{2}] attribute."' " is 347.
Long Statement,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,ValidateIdentityProperty,The length of the statement  "                            "The property '{0}' must not have a setter to be used as the identity property for an entity. If this property is intended to be the identity property for the entity please remove the setter. If it is not intended to be the identity property' either rename this property or create an identity propertyn and decorate it with the [{1}] attribute."' " is 346.
Long Statement,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,ValidateProperty,The length of the statement  "                var inversePropertyAttribute = property.GetAttributes().SingleOrDefault(x => x.AttributeClass == inversePropertyAttributeType); " is 127.
Magic Number,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,FindIdentityProperty,The following statement contains a magic number: var potentialIdentifierProperties =                      from property in GetMembersRecursive(this.interfaceSymbol).OfType<IPropertySymbol>()                      let isDefinedInOriginalInterface = property.ContainingSymbol == this.interfaceSymbol                      let hasIdentifierAttribute = property.GetAttributes().Any(y => y.AttributeClass == identifierAttributeType)                      let isClassWithIdSuffix = property.Name == this.name + "Id" || property.Name == this.name + "ID"                      let isId = property.Name == "Id" || property.Name == "ID"                      let rank =                          (hasIdentifierAttribute                              ? 5                              : (isClassWithIdSuffix                                  ? 4                                  : (isId                                      ? 3                                      : 0)))                      where rank > 0                      let scaledRank = rank * (isDefinedInOriginalInterface ? 2 : 1)                      orderby scaledRank descending                      select property;
Magic Number,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,FindIdentityProperty,The following statement contains a magic number: var potentialIdentifierProperties =                      from property in GetMembersRecursive(this.interfaceSymbol).OfType<IPropertySymbol>()                      let isDefinedInOriginalInterface = property.ContainingSymbol == this.interfaceSymbol                      let hasIdentifierAttribute = property.GetAttributes().Any(y => y.AttributeClass == identifierAttributeType)                      let isClassWithIdSuffix = property.Name == this.name + "Id" || property.Name == this.name + "ID"                      let isId = property.Name == "Id" || property.Name == "ID"                      let rank =                          (hasIdentifierAttribute                              ? 5                              : (isClassWithIdSuffix                                  ? 4                                  : (isId                                      ? 3                                      : 0)))                      where rank > 0                      let scaledRank = rank * (isDefinedInOriginalInterface ? 2 : 1)                      orderby scaledRank descending                      select property;
Magic Number,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,FindIdentityProperty,The following statement contains a magic number: var potentialIdentifierProperties =                      from property in GetMembersRecursive(this.interfaceSymbol).OfType<IPropertySymbol>()                      let isDefinedInOriginalInterface = property.ContainingSymbol == this.interfaceSymbol                      let hasIdentifierAttribute = property.GetAttributes().Any(y => y.AttributeClass == identifierAttributeType)                      let isClassWithIdSuffix = property.Name == this.name + "Id" || property.Name == this.name + "ID"                      let isId = property.Name == "Id" || property.Name == "ID"                      let rank =                          (hasIdentifierAttribute                              ? 5                              : (isClassWithIdSuffix                                  ? 4                                  : (isId                                      ? 3                                      : 0)))                      where rank > 0                      let scaledRank = rank * (isDefinedInOriginalInterface ? 2 : 1)                      orderby scaledRank descending                      select property;
Magic Number,BrightstarDB.CodeGeneration,EntityGenerator,C:\repos\BrightstarDB_BrightstarDB\src\core\BrightstarDB.CodeGeneration\Generator.cs,FindIdentityProperty,The following statement contains a magic number: var potentialIdentifierProperties =                      from property in GetMembersRecursive(this.interfaceSymbol).OfType<IPropertySymbol>()                      let isDefinedInOriginalInterface = property.ContainingSymbol == this.interfaceSymbol                      let hasIdentifierAttribute = property.GetAttributes().Any(y => y.AttributeClass == identifierAttributeType)                      let isClassWithIdSuffix = property.Name == this.name + "Id" || property.Name == this.name + "ID"                      let isId = property.Name == "Id" || property.Name == "ID"                      let rank =                          (hasIdentifierAttribute                              ? 5                              : (isClassWithIdSuffix                                  ? 4                                  : (isId                                      ? 3                                      : 0)))                      where rank > 0                      let scaledRank = rank * (isDefinedInOriginalInterface ? 2 : 1)                      orderby scaledRank descending                      select property;
