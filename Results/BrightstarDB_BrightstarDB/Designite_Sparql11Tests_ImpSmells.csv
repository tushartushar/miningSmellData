Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NetworkedPlanet.Brightstar.Tests.Sparql11TestSuite,SparqlTest,D:\research\architectureSmells\repos\BrightstarDB_BrightstarDB\src\tools\SparqlTestTasks\Sparql11Tests\SparqlTest.cs,CompareNodes,Cyclomatic complexity of the method is 13
Complex Method,NetworkedPlanet.Brightstar.Tests.Sparql11TestSuite,SparqlTest,D:\research\architectureSmells\repos\BrightstarDB_BrightstarDB\src\tools\SparqlTestTasks\Sparql11Tests\SparqlTest.cs,TripleMatch,Cyclomatic complexity of the method is 8
Long Statement,NetworkedPlanet.Brightstar.Tests.Sparql11TestSuite,Exists,D:\research\architectureSmells\repos\BrightstarDB_BrightstarDB\src\tools\SparqlTestTasks\Sparql11Tests\Exists.cs,ExistsWithinGraphPattern,The length of the statement  "					ImportGraph("exists/exists02.ttl"' new Uri(@"file:///D:/Projects/brightstar/working/src/core/NetworkedPlanet.Brightstar.Tests/Data/sparql11_tests/exists/exists02.ttl")); " is 169.
Long Statement,NetworkedPlanet.Brightstar.Tests.Sparql11TestSuite,SparqlTest,D:\research\architectureSmells\repos\BrightstarDB_BrightstarDB\src\tools\SparqlTestTasks\Sparql11Tests\SparqlTest.cs,CompareResultGraphs,The length of the statement  "            var resultSet = expectedResultGraph.GetUriNode(new Uri("http://www.w3.org/2001/sw/DataAccess/tests/result-set#ResultSet")); " is 123.
Long Statement,NetworkedPlanet.Brightstar.Tests.Sparql11TestSuite,Subquery,D:\research\architectureSmells\repos\BrightstarDB_BrightstarDB\src\tools\SparqlTestTasks\Sparql11Tests\Subquery.cs,Sq04SubqueryWithinGraphPatternDefaultGraphDoesNotApply,The length of the statement  "					ImportGraph("subquery/sq01.rdf"' new Uri(@"file:///D:/Projects/brightstar/working/src/core/NetworkedPlanet.Brightstar.Tests/Data/sparql11_tests/subquery/sq01.rdf")); " is 165.
Missing Default,NetworkedPlanet.Brightstar.Tests.Sparql11TestSuite,SparqlTest,D:\research\architectureSmells\repos\BrightstarDB_BrightstarDB\src\tools\SparqlTestTasks\Sparql11Tests\SparqlTest.cs,CompareNodes,The following switch statement is missing a default case: switch (expectedNode.NodeType)              {                  case NodeType.Blank:                      var uriNode = actualNode as IUriNode;                      if (uriNode == null) return false;                      var bnode = expectedNode as IBlankNode;                      if (bnodeMap.ContainsKey(bnode.InternalID))                      {                          return uriNode.Uri.ToString().Equals(bnodeMap[bnode.InternalID]);                      }                      else if (uriNode.Uri.ToString().StartsWith(Constants.GeneratedUriPrefix))                      {                          bnodeMap[bnode.InternalID] = uriNode.Uri.ToString();                          return true;                      }                      return false;                  case NodeType.Literal:                      if (!actualNode.NodeType.Equals(expectedNode.NodeType)) return false;                      var xl = actualNode as LiteralNode;                      var yl = expectedNode as LiteralNode;                      if (!xl.Value.Equals(yl.Value)) return false;                      var xd = xl.DataType == null ? RdfDatatypes.PlainLiteral : xl.DataType.ToString();                      var yd = yl.DataType == null ? RdfDatatypes.PlainLiteral : yl.DataType.ToString();                      if (!xd.Equals(yd)) return false;                      var xlang = xl.Language ?? String.Empty;                      var ylang = yl.Language ?? String.Empty;                      if (!xlang.Equals(ylang' StringComparison.InvariantCultureIgnoreCase)) return false;                      break;                  case NodeType.Uri:                      if (!actualNode.NodeType.Equals(expectedNode.NodeType)) return false;                      var xu = actualNode as UriNode;                      var yu = expectedNode as UriNode;                      if (!xu.Uri.Equals(yu.Uri)) return false;                      break;              }
