Implementation smell,Namespace,Class,File,Method,Description
Long Method,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The method has 69 lines of code.
Long Method,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The method has 75 lines of code.
Complex Method,Remact.Net.Plugin.Json.Msgpack.Alchemy,JsonRpcNewtonsoftMsgPackDriver,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\JsonRpc\JsonRpcNewtonsoftMsgPackDriver.cs,OnReceived,Cyclomatic complexity of the method is 12
Complex Method,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,Cyclomatic complexity of the method is 8
Complex Method,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnMessageToClient,Cyclomatic complexity of the method is 9
Complex Method,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,Cyclomatic complexity of the method is 10
Long Statement,Remact.Net.Plugin.Json.Msgpack.Alchemy,JsonRpcNewtonsoftMsgPackDriver,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\JsonRpc\JsonRpcNewtonsoftMsgPackDriver.cs,OnReceived,The length of the statement  "			// in case the payload is a primitive- or known type' it has already been converted and SerializationPayload.AsDynamic will return null. " is 136.
Long Statement,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,ErrorFromClient,The length of the statement  "	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"] " is 133.
Long Statement,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The length of the statement  "			// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"] " is 133.
Long Statement,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnErrorFromService,The length of the statement  "	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"] " is 133.
Long Statement,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The length of the statement  "			// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"] " is 133.
Empty Catch Block,Remact.Net.Plugin.Json.Msgpack.Alchemy,ProtocolDriverClientHelper,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\ProtocolDriverClientHelper.cs,Dispose,The method has an empty catch block.
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,JsonRpcNewtonsoftMsgPackDriver,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\JsonRpc\JsonRpcNewtonsoftMsgPackDriver.cs,IncomingMessageNotDeserializable,The following statement contains a magic number: if (_toClientInterface != null && _lowLevelErrorCount > 100) {  	return;  	// on client side do not respond endless on erronous error messages  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,ResponseNotDeserializable,The following statement contains a magic number: if (++_lowLevelErrorCount > 100) {  	return;  	// do not respond endless on erronous error messages  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	// dynamics' needs Microsoft.CSharp.dll  	//dynamic obj = JsonConvert.DeserializeObject(json);  	//switch ((int)obj.Type)  	//{  	//    case (int)CommandType.Register:  	//        Register(obj.Name.Value' context);  	//        break;  	//    case (int)CommandType.Message:  	//        ChatMessage(obj.Message.Value' context);  	//        break;  	//    case (int)CommandType.NameChange:  	//        NameChange(obj.Name.Value' context);  	//        break;  	//}  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1CallResult) {  		// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  		msg.Type = RemactMessageType.Response;  		msg.RequestId = int.Parse ((string)wamp [1]);  		msg.Payload = wamp [2];  		// JToken  		msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		msg.Type = RemactMessageType.Error;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			msg.RequestId = int.Parse (requestId);  		}  		if (wamp.Count > 4) {  			var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			msg.Payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeName  			msg.SerializationPayload = pld;  		} else {  			msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		}  		_callback.OnMessageToClient (msg);  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		msg.Type = RemactMessageType.Notification;  		var notifyUri = (string)wamp [1];  		var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (notifyUri);  		// notifyUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  		_callback.OnMessageToClient (msg);  	} else {  		ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  	}  } catch (Exception ex) {  	if (msg.Type != RemactMessageType.Error)  		ResponseNotDeserializable (msg.RequestId' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallResult) {  	// eg. CALLRESULT message with 'null' result: [3' "CcDnuI2bl2oLGBzO"' null]  	msg.Type = RemactMessageType.Response;  	msg.RequestId = int.Parse ((string)wamp [1]);  	msg.Payload = wamp [2];  	// JToken  	msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: msg.Payload = wamp [2];  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: msg.SerializationPayload = new NewtonsoftJsonPayload (wamp [2]' serializer);  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	msg.Type = RemactMessageType.Error;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		msg.RequestId = int.Parse (requestId);  	}  	if (wamp.Count > 4) {  		var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		msg.Payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeName  		msg.SerializationPayload = pld;  	} else {  		msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	}  	_callback.OnMessageToClient (msg);  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 4) {  	var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (errorUri);  	// errorUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  } else {  	msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 4) {  	var pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (errorUri);  	// errorUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  } else {  	msg.Payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClient,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClient.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	msg.Type = RemactMessageType.Notification;  	var notifyUri = (string)wamp [1];  	var pld = new NewtonsoftJsonPayload (wamp [2]' serializer);  	// JToken  	msg.Payload = pld.TryReadAs (notifyUri);  	// notifyUri is assemblyQualifiedTypeName  	msg.SerializationPayload = pld;  	_callback.OnMessageToClient (msg);  } else {  	ResponseNotDeserializable (msg.RequestId' "expected wamp message type 3 (v1CallResult)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: try {  	string json = context.DataFrame.ToString ();  	var serializer = JsonProtocolConfig.Instance.GetSerializer ();  	JArray wamp = JArray.Parse (json);  	if (wamp.Count < 3) {  		RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  		return;  	}  	int wampType = (int)wamp [0];  	if (wampType == (int)WampMessageType.v1Call) {  		// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  		id = int.Parse ((string)wamp [1]);  		JToken jToken = null;  		if (wamp.Count > 3) {  			jToken = wamp [3];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [2]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Request'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1CallError) {  		// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  		errorReceived = true;  		var requestId = (string)wamp [1];  		var errorUri = (string)wamp [2];  		var errorDesc = (string)wamp [3];  		if (!string.IsNullOrEmpty (requestId)) {  			id = int.Parse (requestId);  		}  		NewtonsoftJsonPayload pld;  		object payload;  		if (wamp.Count > 4) {  			pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  			// JToken  			payload = pld.TryReadAs (errorUri);  			// errorUri is assemblyQualifiedTypeNamewamp[4]  		} else {  			pld = null;  			payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  			// Errormessage from client  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = null'  			Payload = payload'  			SerializationPayload = pld'  			Type = RemactMessageType.Error'  			RequestId = id'  		});  	} else if (wampType == (int)WampMessageType.v1Event) {  		// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  		JToken jToken = null;  		if (wamp.Count > 2) {  			jToken = wamp [2];  		}  		_requestHandler.MessageToService (new LowerProtocolMessage {  			DestinationMethod = (string)wamp [1]'  			Payload = jToken'  			SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  			Type = RemactMessageType.Notification'  			RequestId = 0'  		});  	} else {  		RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  	}  } catch (Exception ex) {  	if (!errorReceived)  		RequestNotDeserializable (id' ex.Message);  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count < 3) {  	RequestNotDeserializable (id' "Wamp call with 3 or more arguments expected");  	return;  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Call) {  	// eg. CALL message for RPC with no arguments: [2' "7DK6TdN4wLiUJgNM"' "http://example.com/api#howdy"]  	id = int.Parse ((string)wamp [1]);  	JToken jToken = null;  	if (wamp.Count > 3) {  		jToken = wamp [3];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [2]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Request'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 3) {  	jToken = wamp [3];  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 3) {  	jToken = wamp [3];  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: jToken = wamp [3];  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: _requestHandler.MessageToService (new LowerProtocolMessage {  	DestinationMethod = (string)wamp [2]'  	Payload = jToken'  	SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  	Type = RemactMessageType.Request'  	RequestId = id'  });  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1CallError) {  	// eg. CALLERROR message with generic error: [4' "gwbN3EDtFv6JvNV5"' "http://autobahn.tavendo.de/error#generic"' "math domain error"]  	errorReceived = true;  	var requestId = (string)wamp [1];  	var errorUri = (string)wamp [2];  	var errorDesc = (string)wamp [3];  	if (!string.IsNullOrEmpty (requestId)) {  		id = int.Parse (requestId);  	}  	NewtonsoftJsonPayload pld;  	object payload;  	if (wamp.Count > 4) {  		pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  		// JToken  		payload = pld.TryReadAs (errorUri);  		// errorUri is assemblyQualifiedTypeNamewamp[4]  	} else {  		pld = null;  		payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  		// Errormessage from client  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = null'  		Payload = payload'  		SerializationPayload = pld'  		Type = RemactMessageType.Error'  		RequestId = id'  	});  } else if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 4) {  	pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  	// JToken  	payload = pld.TryReadAs (errorUri);  	// errorUri is assemblyQualifiedTypeNamewamp[4]  } else {  	pld = null;  	payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	// Errormessage from client  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 4) {  	pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  	// JToken  	payload = pld.TryReadAs (errorUri);  	// errorUri is assemblyQualifiedTypeNamewamp[4]  } else {  	pld = null;  	payload = new ErrorMessage (ErrorCode.Undef' errorUri + ": " + errorDesc);  	// Errormessage from client  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: pld = new NewtonsoftJsonPayload (wamp [4]' serializer);  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wampType == (int)WampMessageType.v1Event) {  	// eg. EVENT message with 'null' as payload: [8' "http://example.com/simple"' null]  	JToken jToken = null;  	if (wamp.Count > 2) {  		jToken = wamp [2];  	}  	_requestHandler.MessageToService (new LowerProtocolMessage {  		DestinationMethod = (string)wamp [1]'  		Payload = jToken'  		SerializationPayload = new NewtonsoftJsonPayload (jToken' serializer)'  		Type = RemactMessageType.Notification'  		RequestId = 0'  	});  } else {  	RequestNotDeserializable (id' "expected wamp message type 2 (v1Call)");  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 2) {  	jToken = wamp [2];  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: if (wamp.Count > 2) {  	jToken = wamp [2];  }  
Magic Number,Remact.Net.Plugin.Json.Msgpack.Alchemy,WampClientStub,D:\newReposJune17\steforster_Remact.Net\src\Remact.Net.Plugin.Json.Msgpak.Alchemy\JsonProtocol\Wamp\WampClientStub.cs,OnReceived,The following statement contains a magic number: jToken = wamp [2];  
