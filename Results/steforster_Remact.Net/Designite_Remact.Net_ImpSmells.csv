Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,Cyclomatic complexity of the method is 8
Complex Method,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,DispatchMessageFirstStepSync,Cyclomatic complexity of the method is 8
Complex Method,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,SetLogOutput,Cyclomatic complexity of the method is 9
Complex Method,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,AppInfo,Cyclomatic complexity of the method is 9
Complex Method,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,CheckRemactInternalResponse,Cyclomatic complexity of the method is 8
Complex Method,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,DoPeriodicTasks,Cyclomatic complexity of the method is 8
Long Parameter List,Remact.Net,RemactException,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactException.cs,RemactException,The method has 5 parameters. Parameters: msg' errorcode' message' innerEx' sourceStackTrace
Long Parameter List,Remact.Net,RemactMessage,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactMessage.cs,RemactMessage,The method has 5 parameters. Parameters: proxy' destinationMethod' payload' messageType' responseHandler
Long Parameter List,Remact.Net,RemactMessage,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactMessage.cs,RemactMessage,The method has 5 parameters. Parameters: client' destinationMethod' payload' messageType' responseHandler
Long Parameter List,Remact.Net,RemactMessage,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactMessage.cs,RemactMessage,The method has 7 parameters. Parameters: destination' destinationMethod' payload' messageType' sender' clientId' requestId
Long Statement,Remact.Net,ActorInfo,C:\repos\steforster_Remact.Net\src\Remact.Net\Contracts\ActorInfo.cs,IsEqualTo,The length of the statement  "                    && (!RemactConfigDefault.Instance.IsProcessIdUsed(AppInstance) || ProcessId == p.ProcessId) // process id is valid for a running client only " is 140.
Long Statement,Remact.Net,ActorInfo,C:\repos\steforster_Remact.Net\src\Remact.Net\Contracts\ActorInfo.cs,IsEqualTo,The length of the statement  "                    && (!RemactConfigDefault.Instance.IsProcessIdUsed(AppInstance) || ProcessId == p.ProcessId) // process id is valid for a running client only " is 140.
Long Statement,Remact.Net,RemactConfigDefault,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactConfigDefault.cs,DoServiceConfiguration,The length of the statement  "            throw new NotSupportedException("RemactConfigDefault cannot configure service for remote connection. Use LoadPluginAssembly to load plugin for remote configuration."); " is 167.
Long Statement,Remact.Net,RemactConfigDefault,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactConfigDefault.cs,DoClientConfiguration,The length of the statement  "            throw new NotSupportedException("RemactConfigDefault cannot configure client for remote connection. Use LoadPluginAssembly to load a plugin for remote configuration."); " is 168.
Long Statement,Remact.Net,RemactPortProxy,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPortProxy.cs,ConnectAsync,The length of the statement  "            if (m_RemoteClient != null) return m_RemoteClient.ConnectAsync(); // calls PickupSynchronizationContext and sets m_Connected " is 124.
Long Statement,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,The length of the statement  "            var mTargetList = implementation.GetType().GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.FlattenHierarchy " is 130.
Long Statement,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,The length of the statement  "                        throw new InvalidOperationException("return type of method '" + mTarget.Name + "' does not match the interface. Note' Task<T> is accepted."); " is 141.
Long Statement,Remact.Net,RemactMessage,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactMessage.cs,SendResponseFrom,The length of the statement  "                throw new InvalidOperationException("Remact: wrong thread synchronization context when responding from '" + name + "'"); " is 120.
Long Statement,Remact.Net,RemactMessage,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactMessage.cs,SendResponseFrom,The length of the statement  "                // PostInput does not check for the correct synchronization context. We want to send from threadpool also (exceptions and InternalResponses) " is 140.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,ToString,The length of the statement  "                //                              prefix' Name' AppIdentification' AppVersion.ToString (versionCount)' // ACHTUNG ToString(3) kann Exception geben' falls nur 2 Felder spezifiziert sind ! " is 184.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,PostInput,The length of the statement  "                throw new InvalidOperationException("Remact: Destination of '" + Name + "' has not picked up a thread synchronization context."); " is 129.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,SendOut,The length of the statement  "            if (LinkedPort == null) throw new InvalidOperationException("Remact: Output of '" + Name + "' has not been linked. Cannot send message."); " is 138.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,SendOut,The length of the statement  "            if (!m_isOpen) throw new InvalidOperationException("Remact: ActorPort '" + Name + "' is not connected. Cannot send message."); " is 126.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,SendReceiveAsync,The length of the statement  "                                    //var ex = new RemactException<dynamic>(dynamicRsp' "unexpected response type '" + rsp.Payload.GetType().FullName + "' from method '" + method + "'"); " is 150.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,SendReceiveAsync,The length of the statement  "                                        ex = new RemactException(rsp' ErrorCode.UnexpectedResponsePayloadType' "got unexpected response payload type '" + rsp.Payload.GetType().FullName + "' from method '" + method + "'"); " is 181.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,PickupSynchronizationContext,The length of the statement  "                    throw new InvalidOperationException("The thread that opens RemactPort '" + Name + "' has no message queue. Set RemactPort.IsMultithreaded=true' when your message handlers are threadsafe!"); " is 189.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,PickupSynchronizationContext,The length of the statement  "                        RaLog.Error("Remact"' "Thread connecting RemactPort '" + Name + "' has changed. Only one synchronization context is supported!"' Logger); " is 137.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,DispatchMessageFirstStepSync,The length of the statement  "                DispatchingError(msg' new ErrorMessage(ErrorCode.NotConnected' "Input port not open on service side' cannot post message")); " is 124.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,DispatchMessageFirstStepSync,The length of the statement  "            if (msg.DestinationLambda == null && msg.DestinationMethod != null && IsServiceName && msg.DestinationMethod.StartsWith(ActorInfo.MethodNamePrefix)) " is 148.
Long Statement,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,DispatchMessageFirstStepSync,The length of the statement  "                return msg.DestinationLambda(msg); // a response to a lambda function' one of the On<T> extension methods may handle the message type " is 133.
Long Statement,Remact.Net,RemactPortService,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPortService.cs,LinkInputToNetwork,The length of the statement  "            m_MyInputService = new RemactService(this' tcpPort' publishToCatalog' serviceConfig); // sets this.Uri. SenderContext is set into client stubs on connecting. " is 157.
Long Statement,Remact.Net,RemactPortService<TSC>,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPortService.cs,GetSenderContext,The length of the statement  "            // We NEVER are client : SendingP is ServiceIdent of RemactClient. It's SenderContext is the same as its ClientIdent.SenderContext.  " is 131.
Long Statement,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,SetLogOutput,The length of the statement  "                    Trace.WriteLine("\n+-------------------------------------------------------------------------------------------------"); " is 120.
Long Statement,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,AppInfo,The length of the statement  "                    s += (Attribute.GetCustomAttribute(myApp' typeof(AssemblyDescriptionAttribute)) as AssemblyDescriptionAttribute).Description; " is 125.
Long Statement,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,AppInfo,The length of the statement  "                    s += "\r\n|   Machine    \t: " + Environment.MachineName + " (Process Id " + RemactConfigDefault.Instance.ProcessId + ")"; " is 122.
Long Statement,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,AssemblyVersion,The length of the statement  "                s += "' " + (Attribute.GetCustomAttribute(A' typeof(AssemblyConfigurationAttribute)) as AssemblyConfigurationAttribute).Configuration; " is 134.
Long Statement,Remact.Net.Remote,MultithreadedServiceNet40,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\MultithreadedServiceNet40.cs,MessageToService,The length of the statement  "            // We are instantiated for each connected client' we know the _svcUser (because of the underlying WebSocket implementation). " is 124.
Long Statement,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The length of the statement  "                                m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync " is 150.
Long Statement,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,ConnectToCatalog,The length of the statement  "                var uri = new Uri(string.Format("ws://{0}:{1}/{2}/{3}"' RemactConfigDefault.Instance.CatalogHost' RemactConfigDefault.Instance.CatalogPort' RemactConfigDefault.WsNamespace' RemactConfigDefault.Instance.CatalogServiceName)); " is 223.
Long Statement,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,ConnectAsync,The length of the statement  "                EndOfConnectionTries(tcs' "exception in ConnectAsync."' ex); // enter 'faulted' state when eg. configuration is incorrect " is 121.
Long Statement,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,TryOpenNextServiceIpAddress,The length of the statement  "                if (PortProxy.AddressList == null) return EndOfConnectionTries(tcs' "one address tried."' error); // connect without lookup a catalog " is 133.
Long Statement,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,OnOpenCompleted,The length of the statement  "                                EndOfConnectionTries(state.Tcs' "unexpeced ClientConnectResponse."' new InvalidOperationException("unexpected message from service: " + t.Result.ToString())); " is 158.
Long Statement,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,OnOpenCompleted,The length of the statement  "                EndOfConnectionTries(state.Tcs' "exception in OnOpenCompleted."' ex); // enter 'faulted' state when eg. configuration is incorrect " is 130.
Long Statement,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,Remact_ActorInfo_ClientConnectRequest,The length of the statement  "            var task = PortProxy.SendReceiveAsync<ActorInfo>(RemactService.ConnectMethodName' client' out sentMessage' throwException: false); " is 130.
Long Statement,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,Remact_ActorInfo_ClientDisconnectNotification,The length of the statement  "            var msg = new RemactMessage(PortProxy' RemactService.DisconnectMethodName' client' RemactMessageType.Notification' null); " is 121.
Long Statement,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,ConnectPartner,The length of the statement  "                    ErrorMessage rsp = new ErrorMessage(ErrorCode.ClientIdNotFoundOnService' "Service cannot find client " + req.ClientId + " to connect"); " is 135.
Long Statement,Remact.Net.Remote,RemactServiceUser,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactServiceUser.cs,TestChannel,The length of the statement  "                     && ChannelTestTimer > ((PortClient.TimeoutSeconds + i_nMillisecondsPassed) * 400)) // 2 messages per TimeoutSeconds-period " is 122.
Long Statement,Remact.Net.Remote,RemactServiceUser,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactServiceUser.cs,TestChannel,The length of the statement  "                ChannelTestTimer += i_nMillisecondsPassed; // increment at end' to give a chance to recover after longer debugging breakpoints " is 126.
Complex Conditional,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,DispatchMessageFirstStepSync,The conditional expression  "msg.DestinationLambda == null && msg.DestinationMethod != null && IsServiceName && msg.DestinationMethod.StartsWith(ActorInfo.MethodNamePrefix)"  is complex.
Virtual Method Call from Constructor,Remact.Net.Remote,RemactServiceUser,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactServiceUser.cs,RemactServiceUser,The constructor "RemactServiceUser" calls a virtual method "GetNewSenderContext".
Empty Catch Block,Remact.Net,RemactPortService,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPortService.cs,LinkInputToNetwork,The method has an empty catch block.
Empty Catch Block,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,SetLogOutput,The method has an empty catch block.
Empty Catch Block,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,LoggingException,The method has an empty catch block.
Empty Catch Block,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,Disconnect,The method has an empty catch block.
Magic Number,Remact.Net,ActorInfo,C:\repos\steforster_Remact.Net\src\Remact.Net\Contracts\ActorInfo.cs,ActorInfo,The following statement contains a magic number: if (ApplicationRunTime < TimeSpan.FromDays(20))              {                  // Adjusting of the clock or winter/summmertime switches should not influence the ApplicationRunTime                  // during the first 20 days (1'728'000'000 ms)                  ApplicationRunTime = TimeSpan.FromMilliseconds(Environment.TickCount - ms_ApplicationStartMillis);              }
Magic Number,Remact.Net,ActorInfoList,C:\repos\steforster_Remact.Net\src\Remact.Net\Contracts\ActorInfo.cs,ActorInfoList,The following statement contains a magic number: Item = new List<ActorInfo>(20);
Magic Number,Remact.Net,ErrorMessage,C:\repos\steforster_Remact.Net\src\Remact.Net\Contracts\ErrorMessage.cs,ToString,The following statement contains a magic number: StringBuilder err = new StringBuilder(1000);
Magic Number,Remact.Net,RemactConfigDefault,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactConfigDefault.cs,IsAppIdUniqueInPlant,The following statement contains a magic number: return appId >= 100;
Magic Number,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,The following statement contains a magic number: foreach (var mInterface in mInterfaceList)              {                  try                  {                      var mTarget = mTargetList.Single((m) => m.Name == mInterface.Name);                      var param = mTarget.GetParameters();                        if (param.Length < 2 || param.Length > 3)                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "' must have 2 to 3 parameters");                      }                        if (param[1].ParameterType != typeof(RemactMessage))                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "'' second parameter must be of type 'RemactMessage'");                      }                        if (_methods.ContainsKey(mTarget.Name))                      {                          throw new InvalidOperationException("more than one method '" + mTarget.Name + "' found in " + actorInterface.FullName);                      }                        var innerIf = InnerType(mInterface.ReturnType);                      var innerTgt = InnerType(mTarget.ReturnType);                      if (innerIf != innerTgt)                      {                          throw new InvalidOperationException("return type of method '" + mTarget.Name + "' does not match the interface. Note' Task<T> is accepted.");                      }                        var method = new RemactMethod                      {                          Target = mTarget'                          Implementation = implementation'                          PayloadType = param[0].ParameterType'                          IsAsync = typeof(Task).IsAssignableFrom(mTarget.ReturnType)'                      };                        if (method.IsAsync)                      {                          // method returning Task or Task<T>                          method.AsyncResultProperty = mTarget.ReturnType.GetProperty("Result");                      }                        if (param.Length == 3)                      {                          method.ContextType = param[2].ParameterType;                      }                        _methods.Add(mTarget.Name' method);                  }                  catch (Exception ex)                  {                      string s = "Cannot add interface '" + actorInterface.FullName + "' to '" + implementation.GetType().FullName + "'";                      RaLog.Exception(s' ex); // TODO log + gather exceptions for all methods                      throw new InvalidOperationException(s' ex);                  }              }
Magic Number,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,The following statement contains a magic number: foreach (var mInterface in mInterfaceList)              {                  try                  {                      var mTarget = mTargetList.Single((m) => m.Name == mInterface.Name);                      var param = mTarget.GetParameters();                        if (param.Length < 2 || param.Length > 3)                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "' must have 2 to 3 parameters");                      }                        if (param[1].ParameterType != typeof(RemactMessage))                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "'' second parameter must be of type 'RemactMessage'");                      }                        if (_methods.ContainsKey(mTarget.Name))                      {                          throw new InvalidOperationException("more than one method '" + mTarget.Name + "' found in " + actorInterface.FullName);                      }                        var innerIf = InnerType(mInterface.ReturnType);                      var innerTgt = InnerType(mTarget.ReturnType);                      if (innerIf != innerTgt)                      {                          throw new InvalidOperationException("return type of method '" + mTarget.Name + "' does not match the interface. Note' Task<T> is accepted.");                      }                        var method = new RemactMethod                      {                          Target = mTarget'                          Implementation = implementation'                          PayloadType = param[0].ParameterType'                          IsAsync = typeof(Task).IsAssignableFrom(mTarget.ReturnType)'                      };                        if (method.IsAsync)                      {                          // method returning Task or Task<T>                          method.AsyncResultProperty = mTarget.ReturnType.GetProperty("Result");                      }                        if (param.Length == 3)                      {                          method.ContextType = param[2].ParameterType;                      }                        _methods.Add(mTarget.Name' method);                  }                  catch (Exception ex)                  {                      string s = "Cannot add interface '" + actorInterface.FullName + "' to '" + implementation.GetType().FullName + "'";                      RaLog.Exception(s' ex); // TODO log + gather exceptions for all methods                      throw new InvalidOperationException(s' ex);                  }              }
Magic Number,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,The following statement contains a magic number: foreach (var mInterface in mInterfaceList)              {                  try                  {                      var mTarget = mTargetList.Single((m) => m.Name == mInterface.Name);                      var param = mTarget.GetParameters();                        if (param.Length < 2 || param.Length > 3)                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "' must have 2 to 3 parameters");                      }                        if (param[1].ParameterType != typeof(RemactMessage))                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "'' second parameter must be of type 'RemactMessage'");                      }                        if (_methods.ContainsKey(mTarget.Name))                      {                          throw new InvalidOperationException("more than one method '" + mTarget.Name + "' found in " + actorInterface.FullName);                      }                        var innerIf = InnerType(mInterface.ReturnType);                      var innerTgt = InnerType(mTarget.ReturnType);                      if (innerIf != innerTgt)                      {                          throw new InvalidOperationException("return type of method '" + mTarget.Name + "' does not match the interface. Note' Task<T> is accepted.");                      }                        var method = new RemactMethod                      {                          Target = mTarget'                          Implementation = implementation'                          PayloadType = param[0].ParameterType'                          IsAsync = typeof(Task).IsAssignableFrom(mTarget.ReturnType)'                      };                        if (method.IsAsync)                      {                          // method returning Task or Task<T>                          method.AsyncResultProperty = mTarget.ReturnType.GetProperty("Result");                      }                        if (param.Length == 3)                      {                          method.ContextType = param[2].ParameterType;                      }                        _methods.Add(mTarget.Name' method);                  }                  catch (Exception ex)                  {                      string s = "Cannot add interface '" + actorInterface.FullName + "' to '" + implementation.GetType().FullName + "'";                      RaLog.Exception(s' ex); // TODO log + gather exceptions for all methods                      throw new InvalidOperationException(s' ex);                  }              }
Magic Number,Remact.Net,RemactDispatcher,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,AddActorInterface,The following statement contains a magic number: foreach (var mInterface in mInterfaceList)              {                  try                  {                      var mTarget = mTargetList.Single((m) => m.Name == mInterface.Name);                      var param = mTarget.GetParameters();                        if (param.Length < 2 || param.Length > 3)                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "' must have 2 to 3 parameters");                      }                        if (param[1].ParameterType != typeof(RemactMessage))                      {                          throw new InvalidOperationException("method '" + mTarget.Name + "'' second parameter must be of type 'RemactMessage'");                      }                        if (_methods.ContainsKey(mTarget.Name))                      {                          throw new InvalidOperationException("more than one method '" + mTarget.Name + "' found in " + actorInterface.FullName);                      }                        var innerIf = InnerType(mInterface.ReturnType);                      var innerTgt = InnerType(mTarget.ReturnType);                      if (innerIf != innerTgt)                      {                          throw new InvalidOperationException("return type of method '" + mTarget.Name + "' does not match the interface. Note' Task<T> is accepted.");                      }                        var method = new RemactMethod                      {                          Target = mTarget'                          Implementation = implementation'                          PayloadType = param[0].ParameterType'                          IsAsync = typeof(Task).IsAssignableFrom(mTarget.ReturnType)'                      };                        if (method.IsAsync)                      {                          // method returning Task or Task<T>                          method.AsyncResultProperty = mTarget.ReturnType.GetProperty("Result");                      }                        if (param.Length == 3)                      {                          method.ContextType = param[2].ParameterType;                      }                        _methods.Add(mTarget.Name' method);                  }                  catch (Exception ex)                  {                      string s = "Cannot add interface '" + actorInterface.FullName + "' to '" + implementation.GetType().FullName + "'";                      RaLog.Exception(s' ex); // TODO log + gather exceptions for all methods                      throw new InvalidOperationException(s' ex);                  }              }
Magic Number,Remact.Net,RemactMethod,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,Parameters,The following statement contains a magic number: if (ContextType == null)              {                  param = new object[2];              }              else              {                  param = new object[3];                  param[2] = context;              }
Magic Number,Remact.Net,RemactMethod,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,Parameters,The following statement contains a magic number: if (ContextType == null)              {                  param = new object[2];              }              else              {                  param = new object[3];                  param[2] = context;              }
Magic Number,Remact.Net,RemactMethod,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactDispatcher.cs,Parameters,The following statement contains a magic number: if (ContextType == null)              {                  param = new object[2];              }              else              {                  param = new object[3];                  param[2] = context;              }
Magic Number,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,RemactPort,The following statement contains a magic number: TimeoutSeconds = 60;
Magic Number,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,RemactPort,The following statement contains a magic number: TimeoutSeconds = 60;
Magic Number,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,ToString,The following statement contains a magic number: int versionCount = 2;
Magic Number,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,ToString,The following statement contains a magic number: if (AppVersion.Revision != 0 || CifVersion.Revision != 0)              {                  versionCount = 4;              }              else if (AppVersion.Build != 0 || CifVersion.Build != 0)              {                  versionCount = 3;              }
Magic Number,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,ToString,The following statement contains a magic number: if (AppVersion.Revision != 0 || CifVersion.Revision != 0)              {                  versionCount = 4;              }              else if (AppVersion.Build != 0 || CifVersion.Build != 0)              {                  versionCount = 3;              }
Magic Number,Remact.Net,RemactPort,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPort.cs,StartClockSeconds,The following statement contains a magic number: m_Clock = seconds * 1000;
Magic Number,Remact.Net,RemactPortService,C:\repos\steforster_Remact.Net\src\Remact.Net\RemactPortService.cs,TryAddClient,The following statement contains a magic number: lock (m_inputClientLock)              {                  if (InputClientList == null) InputClientList = new List<RemactPortClient>(10);                  if (InputClientList.Contains(client)) return; // already added                  InputClientList.Add(client);              }
Magic Number,Remact.Net,PluginConsole,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginConsole.cs,Exception,The following statement contains a magic number: var sb = new StringBuilder(500);
Magic Number,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,Exception,The following statement contains a magic number: var sb = new StringBuilder(500);
Magic Number,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,SetLogOutput,The following statement contains a magic number: try                  {                      if (i_FileName == null || i_FileName.Length == 0)                      {                          i_FileName = RemactApplication.LogFolder;                            // files older than 30 days will be deleted                          DateTime tooOld = DateTime.Now.AddDays(-30);                          string[] files = Directory.GetFiles(i_FileName' "*.log.*"' SearchOption.TopDirectoryOnly);                          foreach (string filename in files)                          {                              try                              {                                  FileInfo fi = new FileInfo(filename);                                  if (fi.LastWriteTime < tooOld)                                  {                                      fi.Delete();                                  }                              }                              catch (Exception) { }                          }                          i_FileName += "/" + RemactConfigDefault.Instance.AppIdentification + ".log.txt";                      }                  }                  catch (Exception ex)                  {                      LoggingException("##'Error while creating directory " + i_FileName + "\r\n   " + ex.Message);                  }
Magic Number,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,Refresh,The following statement contains a magic number: try                  {                      if (m_boLogReady)                      {                          Trace.Flush();                          m_boLogReady = false;                          if (m_nLogLines > 200)                          {                              m_nLogLines = 0;                              FileInfo fi = new FileInfo(m_LogFileName);                              if (fi.Length > c_nMaxFileLength)                              {                                  SetLogOutput(m_LogFileName);                              }                          }                      }                  }                  catch (Exception ex)                  {                      // Can't do anything against some other process locking the file !                      sLastLoggingProblem = ex.Message;                  }
Magic Number,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,AssemblyVersion,The following statement contains a magic number: if (V.Revision == 0) s = V.ToString(3);                  else s = V.ToString(4);
Magic Number,Remact.Net,PluginFile,C:\repos\steforster_Remact.Net\src\Remact.Net\Util\RaLogPluginFile.cs,AssemblyVersion,The following statement contains a magic number: if (V.Revision == 0) s = V.ToString(3);                  else s = V.ToString(4);
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,Reconnect,The following statement contains a magic number: m_Timer.Change(20' 1000);
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,Reconnect,The following statement contains a magic number: m_Timer.Change(20' 1000);
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnTimerTick,The following statement contains a magic number: try              { //-------------------------------                  if (m_nCurrentSvc == -100) // Disconnect all services and clients                  {                      if (ms_Instance != null && m_ServiceList != null)                      {                          int nServices = m_ServiceList.Count;                          lock (ms_Lock)                          {                              while (m_ServiceList.Count > 0)                              {                                  m_ServiceList[0].Disconnect(); // shutdown all services and send ServiceDisable messages to Remact.CatalogService when overloaded in RemactClientAsync                              }                                while (m_ClientList.Count > 0)                              {                                  m_ClientList[0].Disconnect(); // shutdown all clients and send ClientDisconnectRequest to its connected service                              }                          }                            if (nServices > 0) Thread.Sleep(20 + (nServices * 10));  // let the communication end                          Disconnect();                                          // shutdown the CatalogClient itself                      }                  }//-------------------------------                  else if (state == PortState.Faulted)                  {                      if (m_nConnectTries < 0) RaLog.Error("Remact"' "Catalog client in fault state !"' RemactApplication.Logger);                      m_CatalogProxy.Disconnect();                      m_Timer.Change(15000' 1000); // wait 15 s before next connect approach                  }//-------------------------------                  else if (state == PortState.Disconnected || state == PortState.Unlinked)                  {                      ConnectToCatalog();                  }//-------------------------------                  else if (m_CatalogProxy.IsOutputConnected)                  {                      m_nConnectTries = -1;                      if (m_ServiceList.Count <= m_nCurrentSvc)                      {                          m_nCurrentSvc = 0;                      }                      else                      {                          lock (ms_Lock)                          {                              ActorInfo info = new ActorInfo(m_ServiceList[m_nCurrentSvc].ServiceIdent);                              RemactService svc = m_ServiceList[m_nCurrentSvc];                              if (!svc.IsServiceRegistered)                              {                                  svc.NextEnableMessage = DateTime.Now.AddSeconds(20);                                  svc.IsServiceRegistered = true;                                  UpdateCatalog(info);                                  RaLog.Info(_latestSentMessage.CltSndId' "Sent to Remact.Catalog: " + info.ToString()' RemactApplication.Logger);                              }                              else if (m_ServiceList[m_nCurrentSvc].NextEnableMessage < DateTime.Now)                              {                                  m_ServiceList[m_nCurrentSvc].NextEnableMessage = DateTime.Now.AddSeconds(20);                                  UpdateCatalog(info);                                  //RaLog.Info (_latestSentMessage.CltSndId' "Alive    "+info.ToString ());                              }                              m_nCurrentSvc++; // next Svc on next timer event                          }                      }                  }//connected                    if (ms_DisableCatalogClient && m_Timer != null) m_Timer.Change(Timeout.Infinite' 1000); // stop the timer              }              catch (Exception ex)              {                  RaLog.Exception("during CatalogClient timer"' ex' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,ConnectToCatalog,The following statement contains a magic number: lock (ms_Lock)              {                  if (ms_DisableCatalogClient) return;                  if (m_connectToCatalogTask != null && !m_connectToCatalogTask[0].IsCompleted) return; // connect in progress                    m_nConnectTries++;                  m_nCurrentSvc = 0;                  var uri = new Uri(string.Format("ws://{0}:{1}/{2}/{3}"' RemactConfigDefault.Instance.CatalogHost' RemactConfigDefault.Instance.CatalogPort' RemactConfigDefault.WsNamespace' RemactConfigDefault.Instance.CatalogServiceName));                  m_CatalogProxy.LinkOutputToRemoteService(uri);                  if (m_connectToCatalogTask == null)                  {                      m_connectToCatalogTask = new Task<bool>[1];                  }                    m_connectToCatalogTask[0] = m_CatalogProxy.ConnectAsync();                  m_connectToCatalogTask[0].ContinueWith(t =>                      {                          if (t.Status == TaskStatus.RanToCompletion)                          {                              m_Timer.Change(20' 1000); // start updating ActorInfo when connected to the catalog service.                      }                      });                    foreach (RemactService s in m_ServiceList)                  {                      s.IsServiceRegistered = false; // reset in case CatalogService has been restarted                   }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,ConnectToCatalog,The following statement contains a magic number: lock (ms_Lock)              {                  if (ms_DisableCatalogClient) return;                  if (m_connectToCatalogTask != null && !m_connectToCatalogTask[0].IsCompleted) return; // connect in progress                    m_nConnectTries++;                  m_nCurrentSvc = 0;                  var uri = new Uri(string.Format("ws://{0}:{1}/{2}/{3}"' RemactConfigDefault.Instance.CatalogHost' RemactConfigDefault.Instance.CatalogPort' RemactConfigDefault.WsNamespace' RemactConfigDefault.Instance.CatalogServiceName));                  m_CatalogProxy.LinkOutputToRemoteService(uri);                  if (m_connectToCatalogTask == null)                  {                      m_connectToCatalogTask = new Task<bool>[1];                  }                    m_connectToCatalogTask[0] = m_CatalogProxy.ConnectAsync();                  m_connectToCatalogTask[0].ContinueWith(t =>                      {                          if (t.Status == TaskStatus.RanToCompletion)                          {                              m_Timer.Change(20' 1000); // start updating ActorInfo when connected to the catalog service.                      }                      });                    foreach (RemactService s in m_ServiceList)                  {                      s.IsServiceRegistered = false; // reset in case CatalogService has been restarted                   }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnMessageReceived,The following statement contains a magic number: if (rsp.MessageType == RemactMessageType.Response && rsp.TryConvertPayload(out ready) && m_ServiceList != null)              {                  m_Timer.Change(20' 1000); // wait 20 ms before next RemactMessage update              }              else if (rsp.MessageType == RemactMessageType.Error && rsp.TryConvertPayload(out err))              {                  RaLog.Warning(rsp.CltRcvId' err.ToString()' RemactApplication.Logger);              }              else              {                  RaLog.Info(rsp.CltRcvId' "unexpected message: " + rsp.ToString()' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,OnMessageReceived,The following statement contains a magic number: if (rsp.MessageType == RemactMessageType.Response && rsp.TryConvertPayload(out ready) && m_ServiceList != null)              {                  m_Timer.Change(20' 1000); // wait 20 ms before next RemactMessage update              }              else if (rsp.MessageType == RemactMessageType.Error && rsp.TryConvertPayload(out err))              {                  RaLog.Warning(rsp.CltRcvId' err.ToString()' RemactApplication.Logger);              }              else              {                  RaLog.Info(rsp.CltRcvId' "unexpected message: " + rsp.ToString()' RemactApplication.Logger);              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,RemactCatalogClient,The following statement contains a magic number: m_ServiceList = new List<RemactService>(20);
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,RemactCatalogClient,The following statement contains a magic number: m_ClientList = new List<RemactClient>(20);
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,RemactCatalogClient,The following statement contains a magic number: m_Timer = new Timer(OnTimerTick' this' 0' 1000);
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,DisconnectAll,The following statement contains a magic number: if (client != null && client.m_ServiceList != null)              {                  // Send disconnect notifications on the ThreadPool timer thread. Responses are not expected.                  if (client.m_Running) Thread.Sleep(20);                  client.m_nCurrentSvc = -100;    // mark for disconnect from all services and from catalog                   if (client.m_Timer != null)                  {                      client.m_Timer.Change(0' 1000); // run in timer thread                  }                  // wait until all disconnects have been done                  int n = 0;                  while (ms_Instance != null && n < 500) { Thread.Sleep(20); n += 20; }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,DisconnectAll,The following statement contains a magic number: if (client != null && client.m_ServiceList != null)              {                  // Send disconnect notifications on the ThreadPool timer thread. Responses are not expected.                  if (client.m_Running) Thread.Sleep(20);                  client.m_nCurrentSvc = -100;    // mark for disconnect from all services and from catalog                   if (client.m_Timer != null)                  {                      client.m_Timer.Change(0' 1000); // run in timer thread                  }                  // wait until all disconnects have been done                  int n = 0;                  while (ms_Instance != null && n < 500) { Thread.Sleep(20); n += 20; }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,DisconnectAll,The following statement contains a magic number: if (client != null && client.m_ServiceList != null)              {                  // Send disconnect notifications on the ThreadPool timer thread. Responses are not expected.                  if (client.m_Running) Thread.Sleep(20);                  client.m_nCurrentSvc = -100;    // mark for disconnect from all services and from catalog                   if (client.m_Timer != null)                  {                      client.m_Timer.Change(0' 1000); // run in timer thread                  }                  // wait until all disconnects have been done                  int n = 0;                  while (ms_Instance != null && n < 500) { Thread.Sleep(20); n += 20; }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,DisconnectAll,The following statement contains a magic number: if (client != null && client.m_ServiceList != null)              {                  // Send disconnect notifications on the ThreadPool timer thread. Responses are not expected.                  if (client.m_Running) Thread.Sleep(20);                  client.m_nCurrentSvc = -100;    // mark for disconnect from all services and from catalog                   if (client.m_Timer != null)                  {                      client.m_Timer.Change(0' 1000); // run in timer thread                  }                  // wait until all disconnects have been done                  int n = 0;                  while (ms_Instance != null && n < 500) { Thread.Sleep(20); n += 20; }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,DisconnectAll,The following statement contains a magic number: if (client != null && client.m_ServiceList != null)              {                  // Send disconnect notifications on the ThreadPool timer thread. Responses are not expected.                  if (client.m_Running) Thread.Sleep(20);                  client.m_nCurrentSvc = -100;    // mark for disconnect from all services and from catalog                   if (client.m_Timer != null)                  {                      client.m_Timer.Change(0' 1000); // run in timer thread                  }                  // wait until all disconnects have been done                  int n = 0;                  while (ms_Instance != null && n < 500) { Thread.Sleep(20); n += 20; }              }
Magic Number,Remact.Net.Remote,RemactCatalogClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactCatalogClient.cs,DisconnectAll,The following statement contains a magic number: if (client != null && client.m_ServiceList != null)              {                  // Send disconnect notifications on the ThreadPool timer thread. Responses are not expected.                  if (client.m_Running) Thread.Sleep(20);                  client.m_nCurrentSvc = -100;    // mark for disconnect from all services and from catalog                   if (client.m_Timer != null)                  {                      client.m_Timer.Change(0' 1000); // run in timer thread                  }                  // wait until all disconnects have been done                  int n = 0;                  while (ms_Instance != null && n < 500) { Thread.Sleep(20); n += 20; }              }
Magic Number,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,Remact_ActorInfo_ClientConnectRequest,The following statement contains a magic number: PortProxy.LastRequestIdSent = 9;
Magic Number,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,Remact_ActorInfo_ClientConnectRequest,The following statement contains a magic number: LastRequestIdReceived = 9;
Magic Number,Remact.Net.Remote,RemactClient,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactClient.cs,Remact_ActorInfo_ClientDisconnectNotification,The following statement contains a magic number: Thread.Sleep(30);
Magic Number,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,RemactService,The following statement contains a magic number: ServiceIdent.InputClientList = new List<RemactPortClient>(20);
Magic Number,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,ConnectPartner,The following statement contains a magic number: if (req.ClientId != 0)              {// Client war schon mal verbunden                  int i = req.ClientId - m_FirstClientId;                  if (i >= 0 && i < ServiceIdent.InputClientList.Count + 100)                  {                      // Nach dem Restart eines Service kφnnen sich Clients mit der alten Nummer anmelden                      while (ServiceIdent.InputClientList.Count < i) ServiceIdent.InputClientList.Add(null);                        svcUser = ServiceIdent.InputClientList[i].SvcUser;                      if (svcUser == null)                      {                          svcUser = AddNewSvcUser(client' i' svcUser);                          LastAction = "Reconnect after service restart";                      }                      else if (!client.IsEqualTo(svcUser.PortClient))                      {                          RaLog.Warning(req.SvcRcvId' svcUser.PortClient.ToString("ClientId already used"' 0)' ServiceIdent.Logger);                          req.ClientId = 0; // eine neue ID vergeben' kann passieren' wenn Service' aber nicht alle Clients durchgestartet werden                          m_ConnectedClientCount -= 2; // wird sofort 2 mal inkrementiert                      }                      else if (svcUser.IsConnected)                      {                          LastAction = "Reconnect' no disconnect";                          RaLog.Warning(req.SvcRcvId' svcUser.PortClient.ToString(LastAction' 0)' ServiceIdent.Logger);                          //TODO                          svcUser.UseDataFrom(client' req.ClientId);                          m_ConnectedClientCount--; // wird sofort wieder inkrementiert                      }                      else if (svcUser.IsFaulted)                      {                          LastAction = "Reconnect after network failure";                          RaLog.Warning(req.SvcRcvId' svcUser.PortClient.ToString(LastAction' 0)' ServiceIdent.Logger);                          //TODO                          svcUser.UseDataFrom(client' req.ClientId);                          if (RemactConfigDefault.Instance.IsProcessIdUsed(svcUser.PortClient.ProcessId)) m_UnusedClientCount--;                      }                      else                      {                          //TODO                          svcUser.UseDataFrom(client' req.ClientId);                          LastAction = "Reconnect after client disconnect";                          if (RemactConfigDefault.Instance.IsProcessIdUsed(svcUser.PortClient.ProcessId)) m_UnusedClientCount--;                      }                      m_ConnectedClientCount++;                  }                  else                  {                      ErrorMessage rsp = new ErrorMessage(ErrorCode.ClientIdNotFoundOnService' "Service cannot find client " + req.ClientId + " to connect");                      RaLog.Error(req.SvcRcvId' rsp.Message' ServiceIdent.Logger);                      LastAction = "ClientId mismatch while connecting";                      return rsp;                  }              }
Magic Number,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,ConnectPartner,The following statement contains a magic number: if (req.ClientId != 0)              {// Client war schon mal verbunden                  int i = req.ClientId - m_FirstClientId;                  if (i >= 0 && i < ServiceIdent.InputClientList.Count + 100)                  {                      // Nach dem Restart eines Service kφnnen sich Clients mit der alten Nummer anmelden                      while (ServiceIdent.InputClientList.Count < i) ServiceIdent.InputClientList.Add(null);                        svcUser = ServiceIdent.InputClientList[i].SvcUser;                      if (svcUser == null)                      {                          svcUser = AddNewSvcUser(client' i' svcUser);                          LastAction = "Reconnect after service restart";                      }                      else if (!client.IsEqualTo(svcUser.PortClient))                      {                          RaLog.Warning(req.SvcRcvId' svcUser.PortClient.ToString("ClientId already used"' 0)' ServiceIdent.Logger);                          req.ClientId = 0; // eine neue ID vergeben' kann passieren' wenn Service' aber nicht alle Clients durchgestartet werden                          m_ConnectedClientCount -= 2; // wird sofort 2 mal inkrementiert                      }                      else if (svcUser.IsConnected)                      {                          LastAction = "Reconnect' no disconnect";                          RaLog.Warning(req.SvcRcvId' svcUser.PortClient.ToString(LastAction' 0)' ServiceIdent.Logger);                          //TODO                          svcUser.UseDataFrom(client' req.ClientId);                          m_ConnectedClientCount--; // wird sofort wieder inkrementiert                      }                      else if (svcUser.IsFaulted)                      {                          LastAction = "Reconnect after network failure";                          RaLog.Warning(req.SvcRcvId' svcUser.PortClient.ToString(LastAction' 0)' ServiceIdent.Logger);                          //TODO                          svcUser.UseDataFrom(client' req.ClientId);                          if (RemactConfigDefault.Instance.IsProcessIdUsed(svcUser.PortClient.ProcessId)) m_UnusedClientCount--;                      }                      else                      {                          //TODO                          svcUser.UseDataFrom(client' req.ClientId);                          LastAction = "Reconnect after client disconnect";                          if (RemactConfigDefault.Instance.IsProcessIdUsed(svcUser.PortClient.ProcessId)) m_UnusedClientCount--;                      }                      m_ConnectedClientCount++;                  }                  else                  {                      ErrorMessage rsp = new ErrorMessage(ErrorCode.ClientIdNotFoundOnService' "Service cannot find client " + req.ClientId + " to connect");                      RaLog.Error(req.SvcRcvId' rsp.Message' ServiceIdent.Logger);                      LastAction = "ClientId mismatch while connecting";                      return rsp;                  }              }
Magic Number,Remact.Net.Remote,RemactService,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactService.cs,DoPeriodicTasks,The following statement contains a magic number: if (deltaT < 0 || deltaT > 3600000) deltaT = 0;
Magic Number,Remact.Net.Remote,RemactServiceUser,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactServiceUser.cs,TestChannel,The following statement contains a magic number: if (_protocolCallback != null)              {                  try                  {                      if (PortClient.TimeoutSeconds > 0                       && ChannelTestTimer > ((PortClient.TimeoutSeconds + i_nMillisecondsPassed) * 400)) // 2 messages per TimeoutSeconds-period                      {                          PortClient.Notify(RemactService.KeepAliveMethodName' new ReadyMessage());                      }                  }                  catch (Exception ex)                  {                      RaLog.Exception("Cannot test '" + ClientMark + "' from service"' ex' PortClient.Logger);                      m_boTimeout = true;                      return true; // changed                  }              }
Magic Number,Remact.Net.Remote,RemactServiceUser,C:\repos\steforster_Remact.Net\src\Remact.Net\Remote\RemactServiceUser.cs,TestChannel,The following statement contains a magic number: if (IsConnected)              {                  if (PortClient.TimeoutSeconds > 0 && ChannelTestTimer > PortClient.TimeoutSeconds * 1000)                  {                      m_boTimeout = true; // Client has not sent a request for longer than the specified timeout                      Disconnect();                      return true; // changed                  }                    ChannelTestTimer += i_nMillisecondsPassed; // increment at end' to give a chance to recover after longer debugging breakpoints              }
