Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,PeriodicCall,Cyclomatic complexity of the method is 13
Long Statement,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,PeriodicCall,The length of the statement  "                    sb.AppendLine("Note: current version uses only one transport plugin of 'Remact.Net.CatalogApp.exe.config': " + Program.TransportPluginDll); " is 139.
Long Statement,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,RegisterService,The length of the statement  "                    throw new RemactException(null' ErrorCode.ServiceIsBackup' "Service '" + registered.Uri + "' is already active. Service '" + svc.Uri + "' may be used as backup."); " is 163.
Long Statement,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,Open,The length of the statement  "            m_RemactService = new RemactPortService(RemactConfigDefault.Instance.CatalogServiceName' m_CatalogService.OnUnknownRequest); " is 124.
Long Statement,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,Open,The length of the statement  "            m_RemactService.LinkInputToNetwork( null' RemactConfigDefault.Instance.CatalogPort' publishToCatalog: false' serviceConfig: this ); // calls our DoServiceConfiguration " is 167.
Long Statement,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,Open,The length of the statement  "                                     + "/" + RemactConfigDefault.WsNamespace + "/" + RemactConfigDefault.Instance.CatalogServiceName)'// no catalog lookup as uri is given. " is 134.
Long Statement,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,OnResponseFromPeerCatalog,The length of the statement  "              RaLog.Warning("Remact"' "Received unexpected message from peer catalog " + id.Source.Name + ": " + id.Payload.ToString()); " is 122.
Long Statement,Remact.Net.CatalogApp,CatalogService,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\CatalogService.cs,OnUnknownRequest,The length of the statement  "            msg.SendResponse(new ErrorMessage(ErrorCode.ActorReceivedMessageForUnknownDestinationMethod' "Remact.CatalogService got unknown request: "+msg.ToString())); " is 156.
Long Statement,Remact.Net.CatalogApp,Program,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Program.cs,Main,The length of the statement  "                    RaLog.Info("Remact.Net.CatalogApp.exe.config"' "loaded TransportPlugin and its dependencies: " + loadedAssembly.CodeBase); " is 122.
Empty Catch Block,Remact.Net.CatalogApp,Program,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Program.cs,Main,The method has an empty catch block.
Magic Number,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,PeriodicCall,The following statement contains a magic number: if (SvcRegisterChanged && tbStatus != null)              {                  SvcRegisterChanged = false;                  StringBuilder sb = new StringBuilder();                    if (!m_RemactService.MustOpenInput)                  {                      sb.AppendLine("CatalogService listening on '" + m_RemactService.Uri + "'");                      sb.AppendLine("Note: current version uses only one transport plugin of 'Remact.Net.CatalogApp.exe.config': " + Program.TransportPluginDll);                  }                  else                  {                      sb.AppendLine(m_RemactService.InputStateFromNetwork + " CatalogService '" + m_RemactService.Uri + "'");                  }                    sb.Append( SvcRegister.Item.Count+" registered Remact services (");                  sb.Append( servicesFromPeerCatalogs+" from remote catalogs). " );                  sb.Append( m_RemactService.BasicService.ConnectedClientCount+" clients. ");                  sb.Append( connectedPeerCatalogs + "/" + PeerCatalogs.Count );                  sb.Append(" configured remote catalog services.");                  sb.AppendLine();                            foreach (ActorInfo s in SvcRegister.Item)                  {                      int versionCount = 2;                      if (s.AppVersion.Revision != 0)                      {                          versionCount = 4;                      }                      else if (s.AppVersion.Build != 0)                      {                          versionCount = 3;                      }                      sb.AppendLine();                      if (s.IsOpen) sb.Append ("++");                               else sb.Append ("--");                      sb.Append (s.Uri);                      sb.Append (" in ");                      sb.Append (RemactConfigDefault.Instance.GetAppIdentification (s.AppName' s.AppInstance' s.HostName' s.ProcessId));                      sb.Append (" V ");                      sb.Append (s.AppVersion.ToString (versionCount));                  }                  tbStatus.Text = sb.ToString ();              }
Magic Number,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,PeriodicCall,The following statement contains a magic number: if (SvcRegisterChanged && tbStatus != null)              {                  SvcRegisterChanged = false;                  StringBuilder sb = new StringBuilder();                    if (!m_RemactService.MustOpenInput)                  {                      sb.AppendLine("CatalogService listening on '" + m_RemactService.Uri + "'");                      sb.AppendLine("Note: current version uses only one transport plugin of 'Remact.Net.CatalogApp.exe.config': " + Program.TransportPluginDll);                  }                  else                  {                      sb.AppendLine(m_RemactService.InputStateFromNetwork + " CatalogService '" + m_RemactService.Uri + "'");                  }                    sb.Append( SvcRegister.Item.Count+" registered Remact services (");                  sb.Append( servicesFromPeerCatalogs+" from remote catalogs). " );                  sb.Append( m_RemactService.BasicService.ConnectedClientCount+" clients. ");                  sb.Append( connectedPeerCatalogs + "/" + PeerCatalogs.Count );                  sb.Append(" configured remote catalog services.");                  sb.AppendLine();                            foreach (ActorInfo s in SvcRegister.Item)                  {                      int versionCount = 2;                      if (s.AppVersion.Revision != 0)                      {                          versionCount = 4;                      }                      else if (s.AppVersion.Build != 0)                      {                          versionCount = 3;                      }                      sb.AppendLine();                      if (s.IsOpen) sb.Append ("++");                               else sb.Append ("--");                      sb.Append (s.Uri);                      sb.Append (" in ");                      sb.Append (RemactConfigDefault.Instance.GetAppIdentification (s.AppName' s.AppInstance' s.HostName' s.ProcessId));                      sb.Append (" V ");                      sb.Append (s.AppVersion.ToString (versionCount));                  }                  tbStatus.Text = sb.ToString ();              }
Magic Number,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,PeriodicCall,The following statement contains a magic number: if (SvcRegisterChanged && tbStatus != null)              {                  SvcRegisterChanged = false;                  StringBuilder sb = new StringBuilder();                    if (!m_RemactService.MustOpenInput)                  {                      sb.AppendLine("CatalogService listening on '" + m_RemactService.Uri + "'");                      sb.AppendLine("Note: current version uses only one transport plugin of 'Remact.Net.CatalogApp.exe.config': " + Program.TransportPluginDll);                  }                  else                  {                      sb.AppendLine(m_RemactService.InputStateFromNetwork + " CatalogService '" + m_RemactService.Uri + "'");                  }                    sb.Append( SvcRegister.Item.Count+" registered Remact services (");                  sb.Append( servicesFromPeerCatalogs+" from remote catalogs). " );                  sb.Append( m_RemactService.BasicService.ConnectedClientCount+" clients. ");                  sb.Append( connectedPeerCatalogs + "/" + PeerCatalogs.Count );                  sb.Append(" configured remote catalog services.");                  sb.AppendLine();                            foreach (ActorInfo s in SvcRegister.Item)                  {                      int versionCount = 2;                      if (s.AppVersion.Revision != 0)                      {                          versionCount = 4;                      }                      else if (s.AppVersion.Build != 0)                      {                          versionCount = 3;                      }                      sb.AppendLine();                      if (s.IsOpen) sb.Append ("++");                               else sb.Append ("--");                      sb.Append (s.Uri);                      sb.Append (" in ");                      sb.Append (RemactConfigDefault.Instance.GetAppIdentification (s.AppName' s.AppInstance' s.HostName' s.ProcessId));                      sb.Append (" V ");                      sb.Append (s.AppVersion.ToString (versionCount));                  }                  tbStatus.Text = sb.ToString ();              }
Magic Number,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,UpdatePeerCatalogs,The following statement contains a magic number: foreach( RemactPortProxy<SvcDat> p in PeerCatalogs )              {                  if( !p.IsOutputConnected )                  {                      if( p.MustConnectOutput )                      {                          p.OutputContext.WaitSeconcsForConnect -= seconds;                          if( p.OutputContext.WaitSeconcsForConnect <= 0 )                          {                              p.ConnectAsync();                              p.OutputContext.WaitSeconcsForConnect = 30;                              p.OutputContext.WaitSecondsForUpdate  =  0;                          }                      }                  }                  else                  {                      connectedPeerCatalogs++;                      p.OutputContext.WaitSecondsForUpdate -= seconds;                      if( p.OutputContext.WaitSecondsForUpdate <= 0 || changed )                      {                          p.Notify("RegisterList"' SvcRegister);                          p.OutputContext.WaitSecondsForUpdate = 30;                      }                  }              }
Magic Number,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,UpdatePeerCatalogs,The following statement contains a magic number: foreach( RemactPortProxy<SvcDat> p in PeerCatalogs )              {                  if( !p.IsOutputConnected )                  {                      if( p.MustConnectOutput )                      {                          p.OutputContext.WaitSeconcsForConnect -= seconds;                          if( p.OutputContext.WaitSeconcsForConnect <= 0 )                          {                              p.ConnectAsync();                              p.OutputContext.WaitSeconcsForConnect = 30;                              p.OutputContext.WaitSecondsForUpdate  =  0;                          }                      }                  }                  else                  {                      connectedPeerCatalogs++;                      p.OutputContext.WaitSecondsForUpdate -= seconds;                      if( p.OutputContext.WaitSecondsForUpdate <= 0 || changed )                      {                          p.Notify("RegisterList"' SvcRegister);                          p.OutputContext.WaitSecondsForUpdate = 30;                      }                  }              }
Magic Number,Remact.Net.CatalogApp,Catalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\Catalog.cs,RegisterService,The following statement contains a magic number: if (svc.CatalogHopCount > 1) svc.TimeoutSeconds = 120;
Magic Number,Remact.Net.CatalogApp,FrmCatalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\FrmCatalog.cs,timer1_Tick,The following statement contains a magic number: if (m_Seconds % 5 == 0) RaLog.Run ();
Magic Number,Remact.Net.CatalogApp,FrmCatalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\FrmCatalog.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.Size = new System.Drawing.Size (890' 166);
Magic Number,Remact.Net.CatalogApp,FrmCatalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\FrmCatalog.cs,InitializeComponent,The following statement contains a magic number: this.tbStatus.Size = new System.Drawing.Size (890' 166);
Magic Number,Remact.Net.CatalogApp,FrmCatalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\FrmCatalog.cs,InitializeComponent,The following statement contains a magic number: this.timer1.Interval = 1000;
Magic Number,Remact.Net.CatalogApp,FrmCatalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\FrmCatalog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (890' 166);
Magic Number,Remact.Net.CatalogApp,FrmCatalog,C:\repos\steforster_Remact.Net\src\Remact.Net.CatalogApp\FrmCatalog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (890' 166);
