Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The method has 171 lines of code.
Long Statement,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The length of the statement  "				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31}; " is 146.
Long Statement,OpenRA.Utility,Program,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Program.cs,PrintUsage,The length of the statement  "			Console.WriteLine("  --shp PNGFILE FRAMEWIDTH     Convert a single PNG with multiple frames appended after another to a SHP"); " is 126.
Long Statement,OpenRA.Utility,Program,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Program.cs,PrintUsage,The length of the statement  "			Console.WriteLine("  --png SHPFILE PALETTE [--noshadow]     Convert a SHP to a PNG containing all of its frames' optionally removing the shadow"); " is 146.
Long Statement,OpenRA.Utility,Program,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Program.cs,PrintUsage,The length of the statement  "			Console.WriteLine("  --r8 R8FILE PALETTE START END FILENAME [--noshadow] [--infrantry] [--vehicle] [--projectile] [--building] [--wall] [--tileset]     Convert Dune 2000 DATA.R8 to PNGs choosing start- and endframe as well as type for correct offset to append multiple frames to one PNG named by filename optionally removing the shadow."); " is 339.
Long Statement,OpenRA.Utility,Program,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Program.cs,PrintUsage,The length of the statement  "			Console.WriteLine("  --transpose SRCSHP DESTSHP START N M [START N M ...]     Transpose the N*M block of frames starting at START."); " is 133.
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,Settings,The following statement contains a magic number: if (args.Length < 2)  			{  				Console.WriteLine("Error: Invalid syntax");  				return;  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertPngToShp,The following statement contains a magic number: var width = int.Parse(args[2]);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertShpToPng,The following statement contains a magic number: if (args.Contains("--noshadow"))  			{  					Array.Resize(ref ShadowIndex' ShadowIndex.Length + 3);  					ShadowIndex[ShadowIndex.Length - 1] = 1;  					ShadowIndex[ShadowIndex.Length - 2] = 3;  					ShadowIndex[ShadowIndex.Length - 1] = 4;  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertShpToPng,The following statement contains a magic number: if (args.Contains("--noshadow"))  			{  					Array.Resize(ref ShadowIndex' ShadowIndex.Length + 3);  					ShadowIndex[ShadowIndex.Length - 1] = 1;  					ShadowIndex[ShadowIndex.Length - 2] = 3;  					ShadowIndex[ShadowIndex.Length - 1] = 4;  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertShpToPng,The following statement contains a magic number: if (args.Contains("--noshadow"))  			{  					Array.Resize(ref ShadowIndex' ShadowIndex.Length + 3);  					ShadowIndex[ShadowIndex.Length - 1] = 1;  					ShadowIndex[ShadowIndex.Length - 2] = 3;  					ShadowIndex[ShadowIndex.Length - 1] = 4;  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertShpToPng,The following statement contains a magic number: if (args.Contains("--noshadow"))  			{  					Array.Resize(ref ShadowIndex' ShadowIndex.Length + 3);  					ShadowIndex[ShadowIndex.Length - 1] = 1;  					ShadowIndex[ShadowIndex.Length - 2] = 3;  					ShadowIndex[ShadowIndex.Length - 1] = 4;  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertShpToPng,The following statement contains a magic number: var palette = Palette.Load(args[2]' ShadowIndex);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--noshadow"))  			{  					Array.Resize(ref ShadowIndex' ShadowIndex.Length + 1);  					ShadowIndex[ShadowIndex.Length - 1] = 3;  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: var palette = Palette.Load(args[2]' ShadowIndex);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: var startFrame = int.Parse(args[3]);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: var endFrame = int.Parse(args[4]) + 1;
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: var filename = args[5];
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertR8ToPng,The following statement contains a magic number: if (args.Contains("--infantry")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				endFrame = startFrame-1;  				for (int e = 8; e < FrameCount+1; e=e+8) //assuming 8 facings each animation set  				{  					  					for (int f = startFrame+e-1; f > endFrame; f--)  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;    						Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  						Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    						var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  							PixelFormat.Format8bppIndexed);    						for (var i = 0; i < frame.Height; i++)  							Marshal.Copy(frame.Image' i * frame.Width'  								new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    						bitmap.UnlockBits(data);    						x += frame.FrameWidth;    						frame = srcImage[f];  						Console.WriteLine("f: {0}"' f);  					}  					endFrame = startFrame+e-1;  					frame = srcImage[startFrame+e];  					Console.WriteLine("e: {0}"' e);  					Console.WriteLine("FrameCount: {0}"' FrameCount);  				}  			}  			else if (args.Contains("--vehicle")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					OffsetX = frame.FrameWidth/2 - frame.OffsetX;  					OffsetY = frame.FrameHeight/2 - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--turret")) //resorting to RA/CnC compatible counter-clockwise frame order  			{  				frame = srcImage[startFrame];    				for (int f = endFrame-1; f > startFrame-1; f--)  				{  					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;    					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;    					frame = srcImage[f];  				}  			}  			else if (args.Contains("--wall")) //complex resorting to RA/CnC compatible frame order  			{  				int[] D2kBrikFrameOrder = {1' 4' 2' 12' 5' 6' 16' 9' 3' 13' 7' 8' 14' 10' 11' 15' 17' 20' 18' 28' 21' 22' 32' 25' 19' 29' 23' 24' 30' 26' 27' 31};  				foreach (int o in D2kBrikFrameOrder)  				{  					int f = startFrame -1 + o;    					frame = srcImage[f];    					if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  					if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  					OffsetX = 0 + frame.OffsetX;  					OffsetY = frame.FrameHeight - frame.OffsetY;  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}  			else if (args.Contains("--tileset"))  			{  				int f = 0;  				var tileset = new Bitmap(frame.FrameWidth * 20' frame.FrameHeight * 40' PixelFormat.Format8bppIndexed);  				tileset.Palette = palette.AsSystemPalette();    				for (int h = 0; h < 40; h++)  				{  					for (int w = 0; w < 20; w++)  					{  						if (h * 20 + w < FrameCount)  						{  							Console.WriteLine(f);  							frame = srcImage[f];    							var data = tileset.LockBits(new Rectangle(w * frame.Width' h * frame.Height' frame.Width' frame.Height)'  								ImageLockMode.WriteOnly' PixelFormat.Format8bppIndexed);    							for (var i = 0; i < frame.Height; i++)  								Marshal.Copy(frame.Image' i * frame.Width'  									new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    							tileset.UnlockBits(data);  							f++;  						}  					}  				}  				bitmap = tileset;  			}  			else  			{  				for (int f = startFrame; f < endFrame; f++)  				{  					frame = srcImage[f];  					if (args.Contains("--infantrydeath"))  					{  						OffsetX = frame.FrameWidth/2 - frame.Width/2;  						OffsetY = frame.FrameHeight/2 - frame.Height/2;  					}  					else if (args.Contains("--projectile"))  					{  						OffsetX = frame.FrameWidth/2 - frame.OffsetX;  						OffsetY = frame.FrameHeight/2 - frame.OffsetY;  					}  					else if (args.Contains("--building"))  					{  						if (frame.OffsetX < 0) { frame.OffsetX = 0 - frame.OffsetX; }  						if (frame.OffsetY < 0) { frame.OffsetY = 0 - frame.OffsetY; }  						OffsetX = 0 + frame.OffsetX;  						OffsetY = frame.FrameHeight - frame.OffsetY;  					}  					Console.WriteLine("calculated OffsetX: {0}"' OffsetX);  					Console.WriteLine("calculated OffsetY: {0}"' OffsetY);    					var data = bitmap.LockBits(new Rectangle(x+OffsetX' 0+OffsetY' frame.Width' frame.Height)' ImageLockMode.WriteOnly'  						PixelFormat.Format8bppIndexed);    					for (var i = 0; i < frame.Height; i++)  						Marshal.Copy(frame.Image' i * frame.Width'  							new IntPtr(data.Scan0.ToInt64() + i * data.Stride)' frame.Width);    					bitmap.UnlockBits(data);    					x += frame.FrameWidth;  				}  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertTmpToPng,The following statement contains a magic number: var theater = args[2];
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertTmpToPng,The following statement contains a magic number: var templateNames = args.Skip(3);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertTmpToPng,The following statement contains a magic number: int[] ShadowIndex = { 3' 4 };
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertTmpToPng,The following statement contains a magic number: int[] ShadowIndex = { 3' 4 };
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ConvertFormat2ToFormat80,The following statement contains a magic number: var dest = args[2];
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,ExtractFiles,The following statement contains a magic number: var files = args.Skip(2);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: for (var i = 0; i < 4; i++)  				remap[i] = i;
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: var destMod = args[2].Split(':')[0];
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: for (var i = 0; i < 16; i++)  				remap[PlayerColorRemap.GetRemapIndex(srcRemapIndex' i)]  					= PlayerColorRemap.GetRemapIndex(destRemapIndex' i);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: var destPalette = Palette.Load(args[2].Split(':')[1]' ShadowIndex);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: var fullIndexRange = Exts.MakeArray<int>(256' x => x);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: for (var i = 0; i < 256; i++)  				if (!remap.ContainsKey(i))  					remap[i] = fullIndexRange  						.Where(a => !remap.ContainsValue(a))  						.OrderBy(a => ColorDistance(destPalette.Values[a]' srcPalette.Values[i]))  						.First();
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: var srcImage = ShpReader.Load(args[3]);
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,RemapShp,The following statement contains a magic number: using (var destStream = File.Create(args[4]))  				ShpWriter.Write(destStream' srcImage.Width' srcImage.Height'  					srcImage.Frames.Select( im => im.Image.Select(px => (byte)remap[px]).ToArray() ));
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,TransposeShp,The following statement contains a magic number: for( var z = 3; z < args.Length - 2; z += 3 )  			{  				var start = int.Parse(args[z]);  				var m = int.Parse(args[z+1]);  				var n = int.Parse(args[z+2]);    				for( var i = 0; i < m; i++ )  					for( var j = 0; j < n; j++ )  						destFrames[ start + i*n + j ] = srcFrames[ start + j*m + i ];  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,TransposeShp,The following statement contains a magic number: for( var z = 3; z < args.Length - 2; z += 3 )  			{  				var start = int.Parse(args[z]);  				var m = int.Parse(args[z+1]);  				var n = int.Parse(args[z+2]);    				for( var i = 0; i < m; i++ )  					for( var j = 0; j < n; j++ )  						destFrames[ start + i*n + j ] = srcFrames[ start + j*m + i ];  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,TransposeShp,The following statement contains a magic number: for( var z = 3; z < args.Length - 2; z += 3 )  			{  				var start = int.Parse(args[z]);  				var m = int.Parse(args[z+1]);  				var n = int.Parse(args[z+2]);    				for( var i = 0; i < m; i++ )  					for( var j = 0; j < n; j++ )  						destFrames[ start + i*n + j ] = srcFrames[ start + j*m + i ];  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,TransposeShp,The following statement contains a magic number: for( var z = 3; z < args.Length - 2; z += 3 )  			{  				var start = int.Parse(args[z]);  				var m = int.Parse(args[z+1]);  				var n = int.Parse(args[z+2]);    				for( var i = 0; i < m; i++ )  					for( var j = 0; j < n; j++ )  						destFrames[ start + i*n + j ] = srcFrames[ start + j*m + i ];  			}
Magic Number,OpenRA.Utility,Command,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Command.cs,TransposeShp,The following statement contains a magic number: using( var destStream = File.Create(args[2]) )  				ShpWriter.Write(destStream' srcImage.Width' srcImage.Height'  					destFrames.Select(f => f.Image));
Magic Number,OpenRA.Utility,Program,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\Program.cs,GetNamedArg,The following statement contains a magic number: if (args.Length < 2)  				return null;
Magic Number,OpenRA.Utility,R8Image,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\R8Reader.cs,R8Image,The following statement contains a magic number: if (Bpp == 8)  				Image = new byte[Width*Height];  			else  				throw new InvalidDataException("Error: {0} bits per pixel are not supported.".F(Bpp));
Magic Number,OpenRA.Utility,R8Image,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\R8Reader.cs,R8Image,The following statement contains a magic number: if (ID == 1 && PaletteHandle != 0)  			{  				// read and ignore custom palette  				reader.ReadInt32(); //Memory  				reader.ReadInt32(); //Handle    				for (int i = 0; i < Width*Height; i++)  					Image[i] = reader.ReadByte();  				for (int i = 0; i < 256; i++)  					reader.ReadUInt16();  			}  			else if (ID == 2 && PaletteHandle != 0) // image with custom palette  			{  				for (int i = 0; i < Width*Height; i++)  					Image[i] = reader.ReadByte();  			}  			else //standard palette or 16 Bpp  			{  				for (int i = 0; i < Width*Height; i++)  					Image[i] = reader.ReadByte();  			}
Magic Number,OpenRA.Utility,R8Image,C:\repos\chrisforbes_OpenRA\OpenRA.Utility\R8Reader.cs,R8Image,The following statement contains a magic number: if (ID == 1 && PaletteHandle != 0)  			{  				// read and ignore custom palette  				reader.ReadInt32(); //Memory  				reader.ReadInt32(); //Handle    				for (int i = 0; i < Width*Height; i++)  					Image[i] = reader.ReadByte();  				for (int i = 0; i < 256; i++)  					reader.ReadUInt16();  			}  			else if (ID == 2 && PaletteHandle != 0) // image with custom palette  			{  				for (int i = 0; i < Width*Height; i++)  					Image[i] = reader.ReadByte();  			}  			else //standard palette or 16 Bpp  			{  				for (int i = 0; i < Width*Height; i++)  					Image[i] = reader.ReadByte();  			}
