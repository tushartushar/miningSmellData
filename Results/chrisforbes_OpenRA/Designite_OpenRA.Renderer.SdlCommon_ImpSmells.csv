Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenRA.Renderer.SdlCommon,SdlGraphics,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlGraphics.cs,InitializeSdlGl,Cyclomatic complexity of the method is 8
Complex Method,OpenRA.Renderer.SdlCommon,SdlInput,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlInput.cs,PumpInput,Cyclomatic complexity of the method is 11
Magic Number,OpenRA.Renderer.SdlCommon,SdlGraphics,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlGraphics.cs,InitializeSdlGl,The following statement contains a magic number: Sdl.SDL_GL_SetAttribute( Sdl.SDL_GL_RED_SIZE' 8 );
Magic Number,OpenRA.Renderer.SdlCommon,SdlGraphics,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlGraphics.cs,InitializeSdlGl,The following statement contains a magic number: Sdl.SDL_GL_SetAttribute( Sdl.SDL_GL_GREEN_SIZE' 8 );
Magic Number,OpenRA.Renderer.SdlCommon,SdlGraphics,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlGraphics.cs,InitializeSdlGl,The following statement contains a magic number: Sdl.SDL_GL_SetAttribute( Sdl.SDL_GL_BLUE_SIZE' 8 );
Magic Number,OpenRA.Renderer.SdlCommon,VertexBuffer<T>,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\VertexBuffer.cs,Bind,The following statement contains a magic number: Gl.glVertexPointer(3' Gl.GL_FLOAT' vertexSize' IntPtr.Zero);
Magic Number,OpenRA.Renderer.SdlCommon,VertexBuffer<T>,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\VertexBuffer.cs,Bind,The following statement contains a magic number: Gl.glTexCoordPointer(4' Gl.GL_FLOAT' vertexSize' new IntPtr(12));
Magic Number,OpenRA.Renderer.SdlCommon,VertexBuffer<T>,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\VertexBuffer.cs,Bind,The following statement contains a magic number: Gl.glTexCoordPointer(4' Gl.GL_FLOAT' vertexSize' new IntPtr(12));
Missing Default,OpenRA.Renderer.SdlCommon,SdlGraphics,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlGraphics.cs,ModeFromPrimitiveType,The following switch statement is missing a default case: switch(pt)  			{  			case PrimitiveType.PointList: return Gl.GL_POINTS;  			case PrimitiveType.LineList: return Gl.GL_LINES;  			case PrimitiveType.TriangleList: return Gl.GL_TRIANGLES;  			case PrimitiveType.QuadList: return Gl.GL_QUADS;  			}
Missing Default,OpenRA.Renderer.SdlCommon,SdlInput,D:\research\architectureSmells\repos\chrisforbes_OpenRA\OpenRA.Renderer.SdlCommon\SdlInput.cs,PumpInput,The following switch statement is missing a default case: switch( e.type )  				{  				case Sdl.SDL_QUIT:  					OpenRA.Game.Exit();  					break;    				case Sdl.SDL_MOUSEBUTTONDOWN:  					{  						if( pendingMotion != null )  						{  							inputHandler.OnMouseInput( pendingMotion.Value );  							pendingMotion = null;  						}    						var button = MakeButton( e.button.button );  						lastButtonBits |= button;    						var pos = new int2( e.button.x' e.button.y );    						inputHandler.OnMouseInput(new MouseInput(  													MouseInputEvent.Down' button' pos' mods'  													MultiTapDetection.DetectFromMouse(e.button.button' pos)  						));  					} break;    				case Sdl.SDL_MOUSEBUTTONUP:  					{  						if( pendingMotion != null )  						{  							inputHandler.OnMouseInput( pendingMotion.Value );  							pendingMotion = null;  						}    						var button = MakeButton( e.button.button );  						lastButtonBits &= ~button;    						var pos = new int2( e.button.x' e.button.y );  						inputHandler.OnMouseInput(new MouseInput(  							MouseInputEvent.Up' button' pos' mods'  							MultiTapDetection.InfoFromMouse(e.button.button)  						));  					} break;    				case Sdl.SDL_MOUSEMOTION:  					{  						pendingMotion = new MouseInput(  							MouseInputEvent.Move'  							lastButtonBits'  							new int2( e.motion.x' e.motion.y )'  							mods' 0 );  					} break;    				case Sdl.SDL_KEYDOWN:  					{  						var keyName = Sdl.SDL_GetKeyName( e.key.keysym.sym );    						var keyEvent = new KeyInput  						{  							Event = KeyInputEvent.Down'  							Modifiers = mods'  							UnicodeChar = (char)e.key.keysym.unicode'  							KeyName = Sdl.SDL_GetKeyName( e.key.keysym.sym )'  							VirtKey = e.key.keysym.sym'  							MultiTapCount = MultiTapDetection.DetectFromKeyboard(keyName)  						};    						if( !HandleSpecialKey( keyEvent ) )  							inputHandler.OnKeyInput( keyEvent );  					} break;    				case Sdl.SDL_KEYUP:  					{  						var keyName = Sdl.SDL_GetKeyName( e.key.keysym.sym );    						var keyEvent = new KeyInput  						{  							Event = KeyInputEvent.Up'  							Modifiers = mods'  							UnicodeChar = (char)e.key.keysym.unicode'  							KeyName = Sdl.SDL_GetKeyName( e.key.keysym.sym )'  							VirtKey = e.key.keysym.sym'  							MultiTapCount = MultiTapDetection.InfoFromKeyboard(keyName)  						};    						inputHandler.OnKeyInput( keyEvent );  					} break;  				}
